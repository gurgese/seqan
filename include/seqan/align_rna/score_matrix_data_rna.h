// ==========================================================================
//                 SeqAn - The Library for Sequence Analysis
// ==========================================================================
// Copyright (c) 2006-2015, Knut Reinert, FU Berlin
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
//     * Redistributions of source code must retain the above copyright
//       notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above copyright
//       notice, this list of conditions and the following disclaimer in the
//       documentation and/or other materials provided with the distribution.
//     * Neither the name of Knut Reinert or the FU Berlin nor the names of
//       its contributors may be used to endorse or promote products derived
//       from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL KNUT REINERT OR THE FU BERLIN BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
// OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
// DAMAGE.
//
// ==========================================================================
// Author: Gianvito Urgese <gianvito.urgese@gmail.com>
// ==========================================================================
#ifndef SEQAN_INCLUDE_ALIGN_RNA_SCORE_MATRIX_DATA_RNA_H_
#define SEQAN_INCLUDE_ALIGN_RNA_SCORE_MATRIX_DATA_RNA_H_
using namespace seqan;
namespace seqan {

// ----------------------------------------------------------------------------
// Ribosum80_90 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.274157    0.201865    0.276749    0.247229
	struct Ribosum80_90 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum80_90>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.322417,       -4.539591,       -4.108158,       -3.891634
-4.539591,       1.828173,       -4.895502,       -3.129846
-4.108158,       -4.895502,       1.48777,       -4.404372
-3.891634,       -3.129846,       -4.404372,       1.849408
                    };
            return _data;
        }
    };
//    H: 1.6887
//    E: -1.0817

// ----------------------------------------------------------------------------
// Ribosum80_90N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum80_90N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum80_90N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.322417,       -4.539591,       -4.108158,       -3.891634,       -4.895502
-4.539591,       1.828173,       -4.895502,       -3.129846,       -4.895502
-4.108158,       -4.895502,       1.48777,       -4.404372,       -4.895502
-3.891634,       -3.129846,       -4.404372,       1.849408,       -4.895502
-4.895502,       -4.895502,       -4.895502,       -4.895502,       -4.895502
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum80_90d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum80_90d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum80_90d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.29838,       -8.934946,       -8.24437,       -5.403376,       -12.001084,       -999.0,       -8.590608,       -14.582499,       -8.138451,       -7.480672,       -10.34745,       -8.991235,       -6.742224,       -15.51379,       -9.348156,       -11.283604
-8.934946,       -0.202028,       -10.466597,       -4.841137,       -12.56279,       -9.076196,       -9.192796,       -13.303686,       -16.676521,       -4.084716,       -13.634561,       -7.655759,       -8.145754,       -8.565754,       -10.939604,       -11.456045
-8.24437,       -10.466597,       -0.570258,       -7.051588,       -12.509382,       -15.649949,       -6.133644,       -14.205437,       -11.185611,       -8.165497,       -7.081788,       -10.47862,       -7.872351,       -13.279438,       -6.792976,       -12.216106
-5.403376,       -4.841137,       -7.051588,       5.103644,       -10.030135,       -10.025403,       -2.498025,       -6.524018,       -10.769958,       -0.344126,       -8.432188,       -1.105024,       -2.569888,       -8.586888,       -4.455612,       -4.590546
-12.001084,       -12.56279,       -12.509382,       -10.030135,       -1.637844,       -9.862461,       -4.416414,       -8.056408,       -9.587574,       -8.635924,       -8.295801,       -10.339126,       -4.515762,       -12.214199,       -7.852329,       -11.998107
-999.0,       -9.076196,       -15.649949,       -10.025403,       -9.862461,       -0.740726,       -5.574846,       -7.108185,       -12.596311,       -4.415761,       -13.633089,       -10.15777,       -8.3413,       -9.967654,       -10.052714,       -8.873175
-8.590608,       -9.192796,       -6.133644,       -2.498025,       -4.416414,       -5.574846,       6.132401,       -6.293356,       -9.510939,       -1.659167,       -5.626855,       -3.837368,       -0.30245,       -7.845518,       -0.458898,       -7.036532
-14.582499,       -13.303686,       -14.205437,       -6.524018,       -8.056408,       -7.108185,       -6.293356,       -0.626071,       -14.117577,       -7.353624,       -13.293013,       -6.994087,       -7.412897,       -7.900952,       -9.365936,       -8.557462
-8.138451,       -16.676521,       -11.185611,       -10.769958,       -9.587574,       -12.596311,       -9.510939,       -14.117577,       -0.453508,       -6.562453,       -9.427552,       -7.292583,       -7.518929,       -17.527365,       -12.182994,       -15.497891
-7.480672,       -4.084716,       -8.165497,       -0.344126,       -8.635924,       -4.415761,       -1.659167,       -7.353624,       -6.562453,       6.225852,       -5.385457,       -0.351863,       -2.904513,       -5.612738,       -3.708414,       -6.85129
-10.34745,       -13.634561,       -7.081788,       -8.432188,       -8.295801,       -13.633089,       -5.626855,       -13.293013,       -9.427552,       -5.385457,       -1.104121,       -6.68829,       -9.931425,       -12.652055,       -6.35884,       -13.094729
-8.991235,       -7.655759,       -10.47862,       -1.105024,       -10.339126,       -10.15777,       -3.837368,       -6.994087,       -7.292583,       -0.351863,       -6.68829,       3.932197,       -4.758701,       -7.703102,       -5.128967,       -6.235789
-6.742224,       -8.145754,       -7.872351,       -2.569888,       -4.515762,       -8.3413,       -0.30245,       -7.412897,       -7.518929,       -2.904513,       -9.931425,       -4.758701,       5.266021,       -5.645415,       -1.358445,       -5.70091
-15.51379,       -8.565754,       -13.279438,       -8.586888,       -12.214199,       -9.967654,       -7.845518,       -7.900952,       -17.527365,       -5.612738,       -12.652055,       -7.703102,       -5.645415,       -0.717755,       -6.985813,       -6.47479
-9.348156,       -10.939604,       -6.792976,       -4.455612,       -7.852329,       -10.052714,       -0.458898,       -9.365936,       -12.182994,       -3.708414,       -6.35884,       -5.128967,       -1.358445,       -6.985813,       3.920933,       -6.398357
-11.283604,       -11.456045,       -12.216106,       -4.590546,       -11.998107,       -8.873175,       -7.036532,       -8.557462,       -15.497891,       -6.85129,       -13.094729,       -6.235789,       -5.70091,       -6.47479,       -6.398357,       0.263153
                    };
            return _data;
        }
    };
//    H: 5.0060
//    E: -6.8210


// ----------------------------------------------------------------------------
// Ribosum60 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.300351    0.181319    0.249264    0.269066
	struct Ribosum60 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum60>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.384845,       -3.539442,       -3.185301,       -3.147715
-3.539442,       1.60636,       -3.952724,       -2.059246
-3.185301,       -3.952724,       1.345653,       -3.416239
-3.147715,       -2.059246,       -3.416239,       1.872643
                    };
            return _data;
        }
    };
//    H: 0.2386
//    E: 0.0097

// ----------------------------------------------------------------------------
// Ribosum60N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum60N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum60N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.384845,       -3.539442,       -3.185301,       -3.147715,       -3.952724
-3.539442,       1.60636,       -3.952724,       -2.059246,       -3.952724
-3.185301,       -3.952724,       1.345653,       -3.416239,       -3.952724
-3.147715,       -2.059246,       -3.416239,       1.872643,       -3.952724
-3.952724,       -3.952724,       -3.952724,       -3.952724,       -3.952724
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum60d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum60d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum60d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-0.825002,       -8.789867,       -8.138405,       -5.359276,       -10.308103,       -14.882799,       -6.825425,       -12.819745,       -5.687891,       -5.453924,       -9.724141,       -7.556358,       -5.521855,       -13.209691,       -7.812514,       -9.678899
-8.789867,       -0.373006,       -9.290897,       -3.967421,       -11.024818,       -8.404926,       -6.611927,       -11.5699,       -11.4429,       -3.714417,       -11.976352,       -6.687857,       -7.71012,       -9.07673,       -9.465677,       -9.329889
-8.138405,       -9.290897,       -0.530688,       -7.054159,       -11.194324,       -13.481756,       -5.819005,       -12.283301,       -8.171979,       -7.826605,       -6.622184,       -6.818141,       -8.096193,       -12.060908,       -6.272483,       -10.745708
-5.359276,       -3.967421,       -7.054159,       5.057974,       -8.234782,       -8.6512,       -0.509825,       -5.917038,       -8.901949,       1.211343,       -7.486873,       -0.54295,       -0.842372,       -6.968751,       -2.914705,       -3.661803
-10.308103,       -11.024818,       -11.194324,       -8.234782,       -3.222134,       -11.252923,       -4.08032,       -9.371708,       -9.330271,       -7.41754,       -11.47,       -8.808648,       -3.163526,       -11.6512,       -6.541384,       -9.794851
-14.882799,       -8.404926,       -13.481756,       -8.6512,       -11.252923,       -1.443437,       -4.983769,       -7.006763,       -14.098427,       -4.500461,       -12.372949,       -8.697368,       -8.564968,       -9.663875,       -8.999601,       -5.529107
-6.825425,       -6.611927,       -5.819005,       -0.509825,       -4.08032,       -4.983769,       5.904014,       -4.966738,       -8.166657,       0.083242,       -5.193348,       -1.773088,       1.16859,       -6.661261,       0.702568,       -4.925489
-12.819745,       -11.5699,       -12.283301,       -5.917038,       -9.371708,       -7.006763,       -4.966738,       -1.02293,       -13.283301,       -7.09271,       -12.162963,       -6.37015,       -6.891351,       -5.836156,       -8.169272,       -6.462324
-5.687891,       -11.4429,       -8.171979,       -8.901949,       -9.330271,       -14.098427,       -8.166657,       -13.283301,       -0.784341,       -6.175158,       -9.877566,       -6.098413,       -7.474384,       -13.605229,       -9.875824,       -13.790103
-5.453924,       -3.714417,       -7.826605,       1.211343,       -7.41754,       -4.500461,       0.083242,       -7.09271,       -6.175158,       6.014487,       -4.89412,       0.449452,       -1.01069,       -4.62633,       -2.070411,       -5.564783
-9.724141,       -11.976352,       -6.622184,       -7.486873,       -11.47,       -12.372949,       -5.193348,       -12.162963,       -9.877566,       -4.89412,       -1.979118,       -5.91234,       -7.961554,       -11.698,       -5.197368,       -12.230797
-7.556358,       -6.687857,       -6.818141,       -0.54295,       -8.808648,       -8.697368,       -1.773088,       -6.37015,       -6.098413,       0.449452,       -5.91234,       3.791724,       -3.100373,       -5.104041,       -3.094738,       -5.685699
-5.521855,       -7.71012,       -8.096193,       -0.842372,       -3.163526,       -8.564968,       1.16859,       -6.891351,       -7.474384,       -1.01069,       -7.961554,       -3.100373,       5.25148,       -5.19832,       -0.455153,       -4.664927
-13.209691,       -9.07673,       -12.060908,       -6.968751,       -11.6512,       -9.663875,       -6.661261,       -5.836156,       -13.605229,       -4.62633,       -11.698,       -5.104041,       -5.19832,       -1.481383,       -5.996577,       -5.123987
-7.812514,       -9.465677,       -6.272483,       -2.914705,       -6.541384,       -8.999601,       0.702568,       -8.169272,       -9.875824,       -2.070411,       -5.197368,       -3.094738,       -0.455153,       -5.996577,       3.750712,       -5.777525
-9.678899,       -9.329889,       -10.745708,       -3.661803,       -9.794851,       -5.529107,       -4.925489,       -6.462324,       -13.790103,       -5.564783,       -12.230797,       -5.685699,       -4.664927,       -5.123987,       -5.777525,       0.318963
                    };
            return _data;
        }
    };
//    H: 3.3077
//    E: -2.8736


// ----------------------------------------------------------------------------
// Ribosum55_45 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.258091    0.219712    0.297639    0.224558
	struct Ribosum55_45 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum55_45>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.979181,       -1.354715,       -0.930239,       -1.01851
-1.354715,       1.004547,       -1.706072,       -0.620535
-0.930239,       -1.706072,       0.857244,       -1.120647
-1.01851,       -0.620535,       -1.120647,       1.389456
                    };
            return _data;
        }
    };
//    H: 0.5677
//    E: -0.0981

// ----------------------------------------------------------------------------
// Ribosum55_45N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum55_45N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum55_45N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.979181,       -1.354715,       -0.930239,       -1.01851,       -1.706072
-1.354715,       1.004547,       -1.706072,       -0.620535,       -1.706072
-0.930239,       -1.706072,       0.857244,       -1.120647,       -1.706072
-1.01851,       -0.620535,       -1.120647,       1.389456,       -1.706072
-1.706072,       -1.706072,       -1.706072,       -1.706072,       -1.706072
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum55_45d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum55_45d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum55_45d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.598037,       -8.449224,       -8.815276,       -5.079206,       -10.061397,       -13.460086,       -3.875804,       -12.109546,       -6.614585,       -5.230103,       -9.674878,       -6.526971,       -2.487481,       -12.280161,       -3.546815,       -8.835549
-8.449224,       -1.857563,       -9.599541,       -1.652426,       -10.546819,       -8.878359,       -5.473214,       -10.68234,       -7.177253,       -2.714989,       -10.390065,       -4.931597,       -5.603504,       -8.892766,       -7.178609,       -8.38443
-8.815276,       -9.599541,       -1.317094,       -6.057996,       -10.649854,       -15.164679,       -2.5752,       -9.368617,       -9.397486,       -6.296769,       -4.223351,       -7.117509,       -2.826894,       -8.01498,       -5.826946,       -9.794597
-5.079206,       -1.652426,       -6.057996,       4.262385,       -5.77747,       -2.382717,       2.022763,       -4.177508,       -3.783713,       2.871837,       -4.934264,       0.742611,       1.873105,       -4.552733,       -0.397559,       -2.459369
-10.061397,       -10.546819,       -10.649854,       -5.77747,       -6.207279,       -11.700722,       -3.246014,       -8.263066,       -7.769881,       -5.405057,       -11.486759,       -6.20504,       -2.908058,       -8.021173,       -6.201597,       -8.846772
-13.460086,       -8.878359,       -15.164679,       -2.382717,       -11.700722,       -3.457062,       -5.086689,       -6.842926,       -12.90221,       -3.760105,       -12.075785,       -7.121431,       -6.489591,       -8.955013,       -8.317457,       -6.646909
-3.875804,       -5.473214,       -2.5752,       2.022763,       -3.246014,       -5.086689,       5.220427,       -4.382309,       -6.025331,       2.791712,       -4.71946,       0.241321,       2.921611,       -4.340583,       1.187635,       -3.009154
-12.109546,       -10.68234,       -9.368617,       -4.177508,       -8.263066,       -6.842926,       -4.382309,       -2.554077,       -7.121443,       -2.208388,       -9.167246,       -4.403424,       -4.362843,       -4.654494,       -6.523985,       -5.427775
-6.614585,       -7.177253,       -9.397486,       -3.783713,       -7.769881,       -12.90221,       -6.025331,       -7.121443,       -1.613492,       -2.578738,       -9.984528,       -6.188043,       -4.884701,       -6.950429,       -7.676082,       -10.165275
-5.230103,       -2.714989,       -6.296769,       2.871837,       -5.405057,       -3.760105,       2.791712,       -2.208388,       -2.578738,       5.487023,       -4.797244,       1.41975,       1.877578,       -4.18727,       0.325623,       -3.04861
-9.674878,       -10.390065,       -4.223351,       -4.934264,       -11.486759,       -12.075785,       -4.71946,       -9.167246,       -9.984528,       -4.797244,       -2.306579,       -5.533553,       -6.34542,       -10.552989,       -4.342357,       -5.019997
-6.526971,       -4.931597,       -7.117509,       0.742611,       -6.20504,       -7.121431,       0.241321,       -4.403424,       -6.188043,       1.41975,       -5.533553,       3.324102,       0.056177,       -4.605671,       -1.268776,       -2.570396
-2.487481,       -5.603504,       -2.826894,       1.873105,       -2.908058,       -6.489591,       2.921611,       -4.362843,       -4.884701,       1.877578,       -6.34542,       0.056177,       4.733413,       -3.524381,       1.044637,       -1.585793
-12.280161,       -8.892766,       -8.01498,       -4.552733,       -8.021173,       -8.955013,       -4.340583,       -4.654494,       -6.950429,       -4.18727,       -10.552989,       -4.605671,       -3.524381,       -4.113306,       -4.215672,       -5.894605
-3.546815,       -7.178609,       -5.826946,       -0.397559,       -6.201597,       -8.317457,       1.187635,       -6.523985,       -7.676082,       0.325623,       -4.342357,       -1.268776,       1.044637,       -4.215672,       3.19388,       -3.672374
-8.835549,       -8.38443,       -9.794597,       -2.459369,       -8.846772,       -6.646909,       -3.009154,       -5.427775,       -10.165275,       -3.04861,       -5.019997,       -2.570396,       -1.585793,       -5.894605,       -3.672374,       -0.701789
                    };
            return _data;
        }
    };
//    H: 3.4679
//    E: -2.6069


// ----------------------------------------------------------------------------
// Ribosum60_80 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.259332    0.213626    0.286241    0.240801
	struct Ribosum60_80 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum60_80>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.32002,       -2.736622,       -2.475435,       -2.459753
-2.736622,       1.495413,       -3.151351,       -1.47759
-2.475435,       -3.151351,       1.268424,       -2.6501
-2.459753,       -1.47759,       -2.6501,       1.782202
                    };
            return _data;
        }
    };
//    H: 1.2537
//    E: -0.5088

// ----------------------------------------------------------------------------
// Ribosum60_80N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum60_80N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum60_80N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.32002,       -2.736622,       -2.475435,       -2.459753,       -3.151351
-2.736622,       1.495413,       -3.151351,       -1.47759,       -3.151351
-2.475435,       -3.151351,       1.268424,       -2.6501,       -3.151351
-2.459753,       -1.47759,       -2.6501,       1.782202,       -3.151351
-3.151351,       -3.151351,       -3.151351,       -3.151351,       -3.151351
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum60_80d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum60_80d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum60_80d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-0.80182,       -8.843394,       -8.258235,       -5.244054,       -9.915086,       -13.127651,       -6.100782,       -12.271835,       -5.734357,       -5.096385,       -10.101405,       -6.721044,       -4.873082,       -12.622332,       -7.1867,       -8.352695
-8.843394,       -0.601327,       -9.130254,       -2.548001,       -10.745445,       -7.944898,       -5.650763,       -11.391527,       -10.613704,       -3.552533,       -12.056852,       -5.934825,       -6.427959,       -8.663607,       -7.813669,       -7.819099
-8.258235,       -9.130254,       -0.569719,       -6.011448,       -10.356547,       -14.289443,       -4.773396,       -10.779866,       -8.779214,       -6.836396,       -5.004443,       -6.911086,       -7.355874,       -9.413084,       -5.825834,       -11.364622
-5.244054,       -2.548001,       -6.011448,       4.942,       -7.13476,       -7.856118,       0.364505,       -5.76405,       -7.914161,       1.766578,       -7.097318,       0.13068,       -0.004187,       -6.078289,       -2.137563,       -2.94436
-9.915086,       -10.745445,       -10.356547,       -7.13476,       -3.974792,       -10.942329,       -3.478307,       -8.169579,       -8.42271,       -6.354238,       -11.210232,       -8.324028,       -2.566956,       -9.821148,       -6.355085,       -7.565447
-13.127651,       -7.944898,       -14.289443,       -7.856118,       -10.942329,       -1.258579,       -4.837234,       -7.390478,       -13.85504,       -3.999484,       -12.51204,       -8.38631,       -7.888661,       -8.394254,       -9.017982,       -6.086417
-6.100782,       -5.650763,       -4.773396,       0.364505,       -3.478307,       -4.837234,       5.787467,       -4.815037,       -7.466482,       1.031911,       -4.734369,       -1.34617,       1.775381,       -5.307293,       0.878768,       -4.13803
-12.271835,       -11.391527,       -10.779866,       -5.76405,       -8.169579,       -7.390478,       -4.815037,       -0.983034,       -8.77456,       -6.930967,       -12.086156,       -6.553111,       -5.723882,       -4.98441,       -7.742117,       -5.985503
-5.734357,       -10.613704,       -8.779214,       -7.914161,       -8.42271,       -13.85504,       -7.466482,       -8.77456,       -0.685935,       -5.895985,       -9.74699,       -6.208416,       -6.493855,       -8.26917,       -8.444535,       -13.559
-5.096385,       -3.552533,       -6.836396,       1.766578,       -6.354238,       -3.999484,       1.031911,       -6.930967,       -5.895985,       5.914743,       -4.963516,       0.732606,       0.070327,       -4.51753,       -1.218954,       -4.474906
-10.101405,       -12.056852,       -5.004443,       -7.097318,       -11.210232,       -12.51204,       -4.734369,       -12.086156,       -9.74699,       -4.963516,       -2.167833,       -5.750098,       -7.124584,       -11.742614,       -4.400365,       -11.826958
-6.721044,       -5.934825,       -6.911086,       0.13068,       -8.324028,       -8.38631,       -1.34617,       -6.553111,       -6.208416,       0.732606,       -5.750098,       3.694343,       -2.14514,       -4.619335,       -2.800299,       -5.061778
-4.873082,       -6.427959,       -7.355874,       -0.004187,       -2.566956,       -7.888661,       1.775381,       -5.723882,       -6.493855,       0.070327,       -7.124584,       -2.14514,       5.15602,       -4.272916,       0.115346,       -4.2225
-12.622332,       -8.663607,       -9.413084,       -6.078289,       -9.821148,       -8.394254,       -5.307293,       -4.98441,       -8.26917,       -4.51753,       -11.742614,       -4.619335,       -4.272916,       -2.19618,       -5.871864,       -4.389994
-7.1867,       -7.813669,       -5.825834,       -2.137563,       -6.355085,       -9.017982,       0.878768,       -7.742117,       -8.444535,       -1.218954,       -4.400365,       -2.800299,       0.115346,       -5.871864,       3.638461,       -5.011649
-8.352695,       -7.819099,       -11.364622,       -2.94436,       -7.565447,       -6.086417,       -4.13803,       -5.985503,       -13.559,       -4.474906,       -11.826958,       -5.061778,       -4.2225,       -4.389994,       -5.011649,       0.154667
                    };
            return _data;
        }
    };
//    H: 4.3151
//    E: -2.9865


// ----------------------------------------------------------------------------
// Ribosum85_25 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.263286    0.216848    0.294852    0.225013
	struct Ribosum85_25 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum85_25>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.883271,       -1.225642,       -0.835694,       -0.826847
-1.225642,       0.947746,       -1.637349,       -0.574484
-0.835694,       -1.637349,       0.821252,       -1.025227
-0.826847,       -0.574484,       -1.025227,       1.309654
                    };
            return _data;
        }
    };
//    H: 0.4985
//    E: -0.0718

// ----------------------------------------------------------------------------
// Ribosum85_25N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum85_25N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum85_25N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.883271,       -1.225642,       -0.835694,       -0.826847,       -1.637349
-1.225642,       0.947746,       -1.637349,       -0.574484,       -1.637349
-0.835694,       -1.637349,       0.821252,       -1.025227,       -1.637349
-0.826847,       -0.574484,       -1.025227,       1.309654,       -1.637349
-1.637349,       -1.637349,       -1.637349,       -1.637349,       -1.637349
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum85_25d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum85_25d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum85_25d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-3.341525,       -7.483124,       -8.649236,       -4.566202,       -9.554447,       -12.855579,       -3.692613,       -12.512115,       -7.492891,       -5.203798,       -8.740012,       -5.988703,       -2.63828,       -11.713546,       -3.794785,       -8.657717
-7.483124,       -2.087523,       -9.410681,       -1.646732,       -10.018733,       -8.78604,       -5.059052,       -10.067477,       -7.558015,       -2.846465,       -10.11189,       -4.462955,       -4.744943,       -8.845539,       -6.738247,       -8.257355
-8.649236,       -9.410681,       -1.494272,       -5.338081,       -10.426138,       -14.402681,       -2.51876,       -9.182133,       -8.797339,       -5.61421,       -4.551412,       -6.831693,       -2.818105,       -8.116417,       -5.851343,       -9.732234
-4.566202,       -1.646732,       -5.338081,       4.086328,       -5.245251,       -2.734679,       2.155063,       -3.970336,       -3.753901,       2.989497,       -4.561516,       0.786789,       1.952772,       -4.168158,       -0.241223,       -2.430018
-9.554447,       -10.018733,       -10.426138,       -5.245251,       -5.859115,       -10.62061,       -2.822493,       -8.78059,       -7.278372,       -5.026927,       -11.278835,       -6.064323,       -2.654987,       -7.662631,       -5.84363,       -9.062325
-12.855579,       -8.78604,       -14.402681,       -2.734679,       -10.62061,       -4.2854,       -4.827415,       -6.351984,       -11.33161,       -3.33632,       -11.360721,       -6.747424,       -5.76766,       -8.028511,       -7.673518,       -6.051992
-3.692613,       -5.059052,       -2.51876,       2.155063,       -2.822493,       -4.827415,       5.200797,       -4.486861,       -5.31613,       2.915297,       -4.545974,       0.354126,       3.060533,       -4.344482,       1.337817,       -3.026648
-12.512115,       -10.067477,       -9.182133,       -3.970336,       -8.78059,       -6.351984,       -4.486861,       -3.097882,       -8.268658,       -2.27912,       -9.348154,       -4.4904,       -4.501657,       -4.622671,       -6.418153,       -5.991058
-7.492891,       -7.558015,       -8.797339,       -3.753901,       -7.278372,       -11.33161,       -5.31613,       -8.268658,       -1.765863,       -2.584991,       -8.652009,       -6.130683,       -4.678903,       -7.291487,       -7.596956,       -10.236993
-5.203798,       -2.846465,       -5.61421,       2.989497,       -5.026927,       -3.33632,       2.915297,       -2.27912,       -2.584991,       5.508701,       -4.172038,       1.508215,       2.125195,       -3.810415,       0.438978,       -2.713084
-8.740012,       -10.11189,       -4.551412,       -4.561516,       -11.278835,       -11.360721,       -4.545974,       -9.348154,       -8.652009,       -4.172038,       -2.066924,       -5.473967,       -5.775815,       -10.401265,       -4.361941,       -5.426092
-5.988703,       -4.462955,       -6.831693,       0.786789,       -6.064323,       -6.747424,       0.354126,       -4.4904,       -6.130683,       1.508215,       -5.473967,       3.229094,       0.124514,       -4.732806,       -1.304883,       -2.821642
-2.63828,       -4.744943,       -2.818105,       1.952772,       -2.654987,       -5.76766,       3.060533,       -4.501657,       -4.678903,       2.125195,       -5.775815,       0.124514,       4.601383,       -3.409843,       1.111924,       -1.711523
-11.713546,       -8.845539,       -8.116417,       -4.168158,       -7.662631,       -8.028511,       -4.344482,       -4.622671,       -7.291487,       -3.810415,       -10.401265,       -4.732806,       -3.409843,       -4.007774,       -4.218631,       -6.819524
-3.794785,       -6.738247,       -5.851343,       -0.241223,       -5.84363,       -7.673518,       1.337817,       -6.418153,       -7.596956,       0.438978,       -4.361941,       -1.304883,       1.111924,       -4.218631,       3.106969,       -3.642914
-8.657717,       -8.257355,       -9.732234,       -2.430018,       -9.062325,       -6.051992,       -3.026648,       -5.991058,       -10.236993,       -2.713084,       -5.426092,       -2.821642,       -1.711523,       -6.819524,       -3.642914,       -0.931188
                    };
            return _data;
        }
    };
//    H: 3.4064
//    E: -2.5277


// ----------------------------------------------------------------------------
// Ribosum95_70 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.257660    0.219667    0.300372    0.222301
	struct Ribosum95_70 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum95_70>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.300482,       -2.183858,       -1.780767,       -1.729147
-2.183858,       1.261675,       -2.785858,       -1.21012
-1.780767,       -2.785858,       1.111982,       -2.040757
-1.729147,       -1.21012,       -2.040757,       1.729932
                    };
            return _data;
        }
    };
//    H: 1.0338
//    E: -0.3402

// ----------------------------------------------------------------------------
// Ribosum95_70N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum95_70N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum95_70N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.300482,       -2.183858,       -1.780767,       -1.729147,       -2.785858
-2.183858,       1.261675,       -2.785858,       -1.21012,       -2.785858
-1.780767,       -2.785858,       1.111982,       -2.040757,       -2.785858
-1.729147,       -1.21012,       -2.040757,       1.729932,       -2.785858
-2.785858,       -2.785858,       -2.785858,       -2.785858,       -2.785858
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum95_70d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum95_70d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum95_70d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.924377,       -8.490803,       -8.521412,       -4.683341,       -9.801212,       -13.893618,       -5.122439,       -11.956553,       -6.318091,       -4.727376,       -9.858285,       -6.226703,       -4.58641,       -11.615798,       -6.230593,       -8.815082
-8.490803,       -1.884475,       -8.919009,       -2.174766,       -9.776374,       -9.171267,       -5.869031,       -11.097647,       -10.145794,       -3.755541,       -12.317882,       -5.818584,       -5.853103,       -8.89203,       -7.529735,       -7.798154
-8.521412,       -8.919009,       -0.623084,       -5.794728,       -10.320252,       -14.741137,       -4.815763,       -8.95383,       -9.652614,       -6.285067,       -5.49013,       -6.917366,       -6.563472,       -8.056015,       -5.66889,       -10.228825
-4.683341,       -2.174766,       -5.794728,       4.636122,       -6.08145,       -7.011263,       1.425281,       -5.633909,       -6.223078,       2.516002,       -6.031167,       0.433493,       1.412421,       -5.419826,       -0.784159,       -3.13786
-9.801212,       -9.776374,       -10.320252,       -6.08145,       -5.436659,       -11.339263,       -3.839013,       -7.553984,       -8.559719,       -6.229252,       -11.970981,       -8.384195,       -2.654813,       -7.153432,       -6.15931,       -8.2391
-13.893618,       -9.171267,       -14.741137,       -7.011263,       -11.339263,       -2.797368,       -5.433974,       -6.373206,       -13.571973,       -4.041154,       -11.711383,       -8.101695,       -7.458998,       -7.91516,       -8.785135,       -6.20616
-5.122439,       -5.869031,       -4.815763,       1.425281,       -3.839013,       -5.433974,       5.467429,       -4.863245,       -6.448761,       1.726971,       -4.557655,       -0.672047,       2.533056,       -4.598696,       1.145804,       -4.048403
-11.956553,       -11.097647,       -8.95383,       -5.633909,       -7.553984,       -6.373206,       -4.863245,       -1.773894,       -6.973501,       -6.083653,       -13.351709,       -6.509385,       -4.356948,       -3.873601,       -7.754363,       -4.61251
-6.318091,       -10.145794,       -9.652614,       -6.223078,       -8.559719,       -13.571973,       -6.448761,       -6.973501,       -0.960795,       -5.362801,       -9.324092,       -6.553856,       -6.060722,       -6.492987,       -7.470545,       -11.772737
-4.727376,       -3.755541,       -6.285067,       2.516002,       -6.229252,       -4.041154,       1.726971,       -6.083653,       -5.362801,       5.683597,       -4.769542,       0.991525,       1.250974,       -4.894103,       -0.30088,       -4.421216
-9.858285,       -12.317882,       -5.49013,       -6.031167,       -11.970981,       -11.711383,       -4.557655,       -13.351709,       -9.324092,       -4.769542,       -1.988865,       -5.825865,       -6.218294,       -11.3551,       -4.111991,       -11.07013
-6.226703,       -5.818584,       -6.917366,       0.433493,       -8.384195,       -8.101695,       -0.672047,       -6.509385,       -6.553856,       0.991525,       -5.825865,       3.579074,       -0.866404,       -5.513661,       -2.240268,       -5.07297
-4.58641,       -5.853103,       -6.563472,       1.412421,       -2.654813,       -7.458998,       2.533056,       -4.356948,       -6.060722,       1.250974,       -6.218294,       -0.866404,       5.074909,       -2.994846,       0.959597,       -3.678906
-11.615798,       -8.89203,       -8.056015,       -5.419826,       -7.153432,       -7.91516,       -4.598696,       -3.873601,       -6.492987,       -4.894103,       -11.3551,       -5.513661,       -2.994846,       -3.166513,       -4.939987,       -5.225603
-6.230593,       -7.529735,       -5.66889,       -0.784159,       -6.15931,       -8.785135,       1.145804,       -7.754363,       -7.470545,       -0.30088,       -4.111991,       -2.240268,       0.959597,       -4.939987,       3.464721,       -4.611841
-8.815082,       -7.798154,       -10.228825,       -3.13786,       -8.2391,       -6.20616,       -4.048403,       -4.61251,       -11.772737,       -4.421216,       -11.07013,       -5.07297,       -3.678906,       -5.225603,       -4.611841,       0.15105
                    };
            return _data;
        }
    };
//    H: 3.9195
//    E: -2.8682


// ----------------------------------------------------------------------------
// Ribosum70_60 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.265216    0.211225    0.282674    0.240885
	struct Ribosum70_60 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum70_60>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.857485,       -1.265446,       -1.054775,       -0.91692
-1.265446,       1.11588,       -1.715822,       -0.536491
-1.054775,       -1.715822,       0.974653,       -1.25563
-0.91692,       -0.536491,       -1.25563,       1.284836
                    };
            return _data;
        }
    };
//    H: 0.5473
//    E: -0.0909

// ----------------------------------------------------------------------------
// Ribosum70_60N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum70_60N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum70_60N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.857485,       -1.265446,       -1.054775,       -0.91692,       -1.715822
-1.265446,       1.11588,       -1.715822,       -0.536491,       -1.715822
-1.054775,       -1.715822,       0.974653,       -1.25563,       -1.715822
-0.91692,       -0.536491,       -1.25563,       1.284836,       -1.715822
-1.715822,       -1.715822,       -1.715822,       -1.715822,       -1.715822
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum70_60d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum70_60d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum70_60d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.773544,       -4.200057,       -9.616152,       -4.115638,       -9.921569,       -12.735488,       -5.487298,       -10.470851,       -7.793669,       -4.821695,       -11.107695,       -6.470389,       -3.297253,       -11.495129,       -4.55872,       -9.357023
-4.200057,       -0.924405,       -7.264537,       -2.199576,       -8.958277,       -5.044838,       -3.9187,       -9.060882,       -7.18086,       -3.885632,       -10.864065,       -3.330684,       -3.346361,       -8.698995,       -5.723512,       -7.533648
-9.616152,       -7.264537,       -1.338714,       -3.898361,       -10.96522,       -12.515374,       -3.03097,       -10.521097,       -6.001611,       -3.900947,       -4.450903,       -5.80866,       -4.780164,       -9.449829,       -5.176734,       -10.659201
-4.115638,       -2.199576,       -3.898361,       4.432066,       -6.46652,       -4.187839,       1.560965,       -4.005203,       -3.213045,       2.834472,       -5.206409,       0.906886,       1.465281,       -4.506579,       -0.574795,       -2.786539
-9.921569,       -8.958277,       -10.96522,       -6.46652,       -4.149743,       -8.366808,       -2.428331,       -7.825042,       -9.017313,       -4.339721,       -10.336042,       -7.086965,       -2.559505,       -8.803726,       -5.339712,       -7.320209
-12.735488,       -5.044838,       -12.515374,       -4.187839,       -8.366808,       -2.494244,       -3.367614,       -3.42383,       -8.956839,       -2.806133,       -10.708216,       -6.217972,       -5.070476,       -6.277361,       -6.043875,       -4.598509
-5.487298,       -3.9187,       -3.03097,       1.560965,       -2.428331,       -3.367614,       5.486138,       -4.940222,       -6.294837,       2.063233,       -3.826802,       0.004711,       2.843692,       -3.627457,       1.547146,       -2.345825
-10.470851,       -9.060882,       -10.521097,       -4.005203,       -7.825042,       -3.42383,       -4.940222,       -2.042119,       -8.400385,       -4.874555,       -12.011828,       -4.095322,       -3.993722,       -4.116755,       -6.351142,       -4.874127
-7.793669,       -7.18086,       -6.001611,       -3.213045,       -9.017313,       -8.956839,       -6.294837,       -8.400385,       -0.792787,       -2.458005,       -9.654959,       -4.454552,       -4.272556,       -7.981846,       -7.550129,       -8.546134
-4.821695,       -3.885632,       -3.900947,       2.834472,       -4.339721,       -2.806133,       2.063233,       -4.874555,       -2.458005,       5.73445,       -3.652627,       1.623409,       1.637251,       -4.066059,       0.061452,       -2.410943
-11.107695,       -10.864065,       -4.450903,       -5.206409,       -10.336042,       -10.708216,       -3.826802,       -12.011828,       -9.654959,       -3.652627,       -3.016763,       -4.200851,       -5.003317,       -11.897403,       -4.108099,       -11.286303
-6.470389,       -3.330684,       -5.80866,       0.906886,       -7.086965,       -6.217972,       0.004711,       -4.095322,       -4.454552,       1.623409,       -4.200851,       3.297077,       -0.567464,       -3.860388,       -2.126571,       -3.166958
-3.297253,       -3.346361,       -4.780164,       1.465281,       -2.559505,       -5.070476,       2.843692,       -3.993722,       -4.272556,       1.637251,       -5.003317,       -0.567464,       4.623333,       -2.887393,       1.174904,       -3.383926
-11.495129,       -8.698995,       -9.449829,       -4.506579,       -8.803726,       -6.277361,       -3.627457,       -4.116755,       -7.981846,       -4.066059,       -11.897403,       -3.860388,       -2.887393,       -4.253359,       -4.250459,       -5.576073
-4.55872,       -5.723512,       -5.176734,       -0.574795,       -5.339712,       -6.043875,       1.547146,       -6.351142,       -7.550129,       0.061452,       -4.108099,       -2.126571,       1.174904,       -4.250459,       3.272362,       -4.367483
-9.357023,       -7.533648,       -10.659201,       -2.786539,       -7.320209,       -4.598509,       -2.345825,       -4.874127,       -8.546134,       -2.410943,       -11.286303,       -3.166958,       -3.383926,       -5.576073,       -4.367483,       -0.434528
                    };
            return _data;
        }
    };
//    H: 3.5558
//    E: -2.4332


// ----------------------------------------------------------------------------
// Ribosum70_55 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.269444    0.208957    0.279756    0.241843
	struct Ribosum70_55 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum70_55>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.765094,       -1.163735,       -0.912539,       -0.809684
-1.163735,       1.069293,       -1.66682,       -0.457049
-0.912539,       -1.66682,       0.947226,       -1.166778
-0.809684,       -0.457049,       -1.166778,       1.209794
                    };
            return _data;
        }
    };
//    H: 0.4830
//    E: -0.0668

// ----------------------------------------------------------------------------
// Ribosum70_55N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum70_55N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum70_55N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.765094,       -1.163735,       -0.912539,       -0.809684,       -1.66682
-1.163735,       1.069293,       -1.66682,       -0.457049,       -1.66682
-0.912539,       -1.66682,       0.947226,       -1.166778,       -1.66682
-0.809684,       -0.457049,       -1.166778,       1.209794,       -1.66682
-1.66682,       -1.66682,       -1.66682,       -1.66682,       -1.66682
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum70_55d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum70_55d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum70_55d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.029457,       -4.152369,       -10.027553,       -4.279775,       -10.353671,       -12.770497,       -5.111086,       -10.890645,       -8.267787,       -5.097137,       -11.574092,       -5.810389,       -3.557335,       -11.462098,       -4.785443,       -9.886641
-4.152369,       -0.96776,       -7.675964,       -2.233234,       -9.208345,       -5.077606,       -4.059048,       -8.065845,       -7.477971,       -3.777074,       -10.897383,       -3.364163,       -3.459864,       -8.64353,       -5.97921,       -7.284022
-10.027553,       -7.675964,       -1.503063,       -3.760049,       -10.353894,       -11.862836,       -2.914158,       -10.912158,       -5.773336,       -3.932651,       -4.33365,       -5.897853,       -4.122225,       -9.918803,       -5.198027,       -10.361101
-4.279775,       -2.233234,       -3.760049,       4.311478,       -6.048185,       -3.809801,       1.694083,       -3.997307,       -3.320079,       2.982622,       -5.176667,       0.935969,       1.613907,       -4.323857,       -0.471425,       -2.841779
-10.353671,       -9.208345,       -10.353894,       -6.048185,       -4.501153,       -8.19535,       -2.442821,       -7.944132,       -9.02249,       -4.35893,       -10.123676,       -6.621256,       -2.576959,       -8.85846,       -5.370962,       -7.587123
-12.770497,       -5.077606,       -11.862836,       -3.809801,       -8.19535,       -2.606501,       -3.268777,       -3.502418,       -9.182538,       -2.342848,       -10.63153,       -5.691283,       -4.379609,       -6.361211,       -5.278637,       -4.183096
-5.111086,       -4.059048,       -2.914158,       1.694083,       -2.442821,       -3.268777,       5.48053,       -4.936172,       -5.749771,       2.156877,       -3.911045,       0.048082,       3.012979,       -3.733348,       1.573204,       -2.517183
-10.890645,       -8.065845,       -10.912158,       -3.997307,       -7.944132,       -3.502418,       -4.936172,       -2.255837,       -8.863758,       -4.491175,       -11.989903,       -4.020507,       -3.55291,       -4.463888,       -5.826072,       -4.78967
-8.267787,       -7.477971,       -5.773336,       -3.320079,       -9.02249,       -9.182538,       -5.749771,       -8.863758,       -0.948354,       -2.491013,       -9.652991,       -4.401443,       -4.311961,       -8.342869,       -7.551727,       -8.955747
-5.097137,       -3.777074,       -3.932651,       2.982622,       -4.35893,       -2.342848,       2.156877,       -4.491175,       -2.491013,       5.755275,       -3.50384,       1.714559,       1.793242,       -3.918497,       0.073397,       -2.364616
-11.574092,       -10.897383,       -4.33365,       -5.176667,       -10.123676,       -10.63153,       -3.911045,       -11.989903,       -9.652991,       -3.50384,       -3.129915,       -4.208227,       -4.881799,       -11.75446,       -4.092578,       -11.141498
-5.810389,       -3.364163,       -5.897853,       0.935969,       -6.621256,       -5.691283,       0.048082,       -4.020507,       -4.401443,       1.714559,       -4.208227,       3.234178,       -0.400088,       -3.986483,       -2.160196,       -3.107504
-3.557335,       -3.459864,       -4.122225,       1.613907,       -2.576959,       -4.379609,       3.012979,       -3.55291,       -4.311961,       1.793242,       -4.881799,       -0.400088,       4.529418,       -2.986046,       1.187372,       -3.142846
-11.462098,       -8.64353,       -9.918803,       -4.323857,       -8.85846,       -6.361211,       -3.733348,       -4.463888,       -8.342869,       -3.918497,       -11.75446,       -3.986483,       -2.986046,       -4.722336,       -3.668651,       -5.899187
-4.785443,       -5.97921,       -5.198027,       -0.471425,       -5.370962,       -5.278637,       1.573204,       -5.826072,       -7.551727,       0.073397,       -4.092578,       -2.160196,       1.187372,       -3.668651,       3.198405,       -4.223053
-9.886641,       -7.284022,       -10.361101,       -2.841779,       -7.587123,       -4.183096,       -2.517183,       -4.78967,       -8.955747,       -2.364616,       -11.141498,       -3.107504,       -3.142846,       -5.899187,       -4.223053,       -0.628755
                    };
            return _data;
        }
    };
//    H: 3.5055
//    E: -2.4291


// ----------------------------------------------------------------------------
// Ribosum90_45 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.260122    0.219217    0.297313    0.223348
	struct Ribosum90_45 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum90_45>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.950575,       -1.312756,       -0.901275,       -0.946423
-1.312756,       0.983461,       -1.679481,       -0.613608
-0.901275,       -1.679481,       0.847285,       -1.099809
-0.946423,       -0.613608,       -1.099809,       1.367707
                    };
            return _data;
        }
    };
//    H: 0.5467
//    E: -0.0897

// ----------------------------------------------------------------------------
// Ribosum90_45N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum90_45N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum90_45N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.950575,       -1.312756,       -0.901275,       -0.946423,       -1.679481
-1.312756,       0.983461,       -1.679481,       -0.613608,       -1.679481
-0.901275,       -1.679481,       0.847285,       -1.099809,       -1.679481
-0.946423,       -0.613608,       -1.099809,       1.367707,       -1.679481
-1.679481,       -1.679481,       -1.679481,       -1.679481,       -1.679481
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum90_45d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum90_45d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum90_45d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.951267,       -8.132573,       -8.778791,       -4.715861,       -9.702383,       -13.062905,       -3.775797,       -12.170161,       -7.180587,       -5.129061,       -9.244866,       -6.20341,       -2.505415,       -11.28002,       -3.656213,       -8.9151
-8.132573,       -2.137865,       -9.256272,       -1.611843,       -10.21187,       -8.734449,       -5.301423,       -10.331873,       -7.780899,       -2.763811,       -10.026676,       -4.58374,       -5.248567,       -8.791862,       -6.965654,       -8.147419
-8.778791,       -9.256272,       -1.365903,       -5.630846,       -9.71582,       -14.707462,       -2.530978,       -9.401394,       -9.302815,       -5.892207,       -4.540755,       -7.055791,       -2.835404,       -8.014132,       -5.760753,       -10.072693
-4.715861,       -1.611843,       -5.630846,       4.196857,       -5.475874,       -2.568416,       2.073816,       -4.034448,       -3.905124,       2.904655,       -4.706757,       0.759688,       1.909957,       -4.206113,       -0.370024,       -2.385864
-9.702383,       -10.21187,       -9.71582,       -5.475874,       -6.041297,       -11.235203,       -3.003383,       -8.240284,       -7.828893,       -5.259797,       -11.104488,       -6.113931,       -2.814346,       -7.558602,       -6.09407,       -8.822803
-13.062905,       -8.734449,       -14.707462,       -2.568416,       -11.235203,       -3.862289,       -4.997511,       -6.821497,       -12.248588,       -3.527957,       -12.142672,       -6.716103,       -6.068482,       -8.438706,       -8.013208,       -6.376444
-3.775797,       -5.301423,       -2.530978,       2.073816,       -3.003383,       -4.997511,       5.198057,       -4.330591,       -5.748015,       2.826422,       -4.633743,       0.286395,       2.987343,       -4.325758,       1.257166,       -3.001902
-12.170161,       -10.331873,       -9.401394,       -4.034448,       -8.240284,       -6.821497,       -4.330591,       -2.767184,       -7.841523,       -2.21239,       -9.120139,       -4.451634,       -4.424459,       -4.604209,       -6.415573,       -5.348392
-7.180587,       -7.780899,       -9.302815,       -3.905124,       -7.828893,       -12.248588,       -5.748015,       -7.841523,       -1.664245,       -2.653791,       -9.258158,       -6.394796,       -4.626893,       -7.162881,       -7.756973,       -10.284322
-5.129061,       -2.763811,       -5.892207,       2.904655,       -5.259797,       -3.527957,       2.826422,       -2.21239,       -2.653791,       5.491963,       -4.554063,       1.440289,       1.976455,       -3.968917,       0.342433,       -2.859795
-9.244866,       -10.026676,       -4.540755,       -4.706757,       -11.104488,       -12.142672,       -4.633743,       -9.120139,       -9.258158,       -4.554063,       -2.119391,       -5.686127,       -6.122507,       -10.668472,       -4.267842,       -5.120089
-6.20341,       -4.58374,       -7.055791,       0.759688,       -6.113931,       -6.716103,       0.286395,       -4.451634,       -6.394796,       1.440289,       -5.686127,       3.29619,       0.080231,       -4.725747,       -1.339637,       -2.666583
-2.505415,       -5.248567,       -2.835404,       1.909957,       -2.814346,       -6.068482,       2.987343,       -4.424459,       -4.626893,       1.976455,       -6.122507,       0.080231,       4.70665,       -3.491286,       1.065333,       -1.617624
-11.28002,       -8.791862,       -8.014132,       -4.206113,       -7.558602,       -8.438706,       -4.325758,       -4.604209,       -7.162881,       -3.968917,       -10.668472,       -4.725747,       -3.491286,       -3.994846,       -4.305674,       -6.157681
-3.656213,       -6.965654,       -5.760753,       -0.370024,       -6.09407,       -8.013208,       1.257166,       -6.415573,       -7.756973,       0.342433,       -4.267842,       -1.339637,       1.065333,       -4.305674,       3.174326,       -3.67901
-8.9151,       -8.147419,       -10.072693,       -2.385864,       -8.822803,       -6.376444,       -3.001902,       -5.348392,       -10.284322,       -2.859795,       -5.120089,       -2.666583,       -1.617624,       -6.157681,       -3.67901,       -0.748205
                    };
            return _data;
        }
    };
//    H: 3.4475
//    E: -2.5664


// ----------------------------------------------------------------------------
// Ribosum85_80 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.260519    0.215056    0.291651    0.232774
	struct Ribosum85_80 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum85_80>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.290452,       -2.49427,       -2.182482,       -2.118713
-2.49427,       1.430028,       -2.880684,       -1.463693
-2.182482,       -2.880684,       1.223905,       -2.409368
-2.118713,       -1.463693,       -2.409368,       1.767624
                    };
            return _data;
        }
    };
//    H: 1.1624
//    E: -0.4301

// ----------------------------------------------------------------------------
// Ribosum85_80N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum85_80N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum85_80N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.290452,       -2.49427,       -2.182482,       -2.118713,       -2.880684
-2.49427,       1.430028,       -2.880684,       -1.463693,       -2.880684
-2.182482,       -2.880684,       1.223905,       -2.409368,       -2.880684
-2.118713,       -1.463693,       -2.409368,       1.767624,       -2.880684
-2.880684,       -2.880684,       -2.880684,       -2.880684,       -2.880684
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum85_80d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum85_80d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum85_80d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.175785,       -8.615728,       -8.446697,       -4.801774,       -9.513265,       -13.227579,       -5.893355,       -13.892544,       -6.27072,       -5.773296,       -8.888773,       -6.319186,       -4.443507,       -14.161596,       -6.293561,       -9.619531
-8.615728,       -0.845504,       -8.602927,       -2.746768,       -10.100671,       -8.771398,       -5.579132,       -12.221683,       -11.640766,       -3.884698,       -11.516361,       -6.018974,       -5.881199,       -8.903408,       -7.452184,       -8.547272
-8.446697,       -8.602927,       -0.685252,       -5.360841,       -11.976237,       -16.390605,       -4.330969,       -9.097014,       -8.971974,       -6.220149,       -4.738215,       -7.01104,       -7.084561,       -9.76882,       -6.103656,       -10.9886
-4.801774,       -2.746768,       -5.360841,       4.890353,       -6.405481,       -7.865956,       0.574781,       -6.24348,       -6.721465,       1.974023,       -6.860494,       0.34771,       0.593368,       -5.923952,       -1.639048,       -2.954973
-9.513265,       -10.100671,       -11.976237,       -6.405481,       -2.999139,       -10.75191,       -3.319933,       -8.063824,       -8.087103,       -6.749466,       -11.853405,       -8.414059,       -2.453453,       -7.85342,       -6.790522,       -7.54335
-13.227579,       -8.771398,       -16.390605,       -7.865956,       -10.75191,       -1.716826,       -5.690589,       -6.996597,       -13.219861,       -3.630402,       -14.962016,       -8.117927,       -7.95575,       -7.626639,       -8.664803,       -6.005806
-5.893355,       -5.579132,       -4.330969,       0.574781,       -3.319933,       -5.690589,       5.701374,       -4.891746,       -6.485267,       1.109664,       -4.843015,       -1.306422,       1.972564,       -5.334641,       0.881059,       -4.587348
-13.892544,       -12.221683,       -9.097014,       -6.24348,       -8.063824,       -6.996597,       -4.891746,       -1.043801,       -6.901861,       -7.094895,       -13.135737,       -6.80364,       -6.152092,       -4.522374,       -7.989156,       -6.153667
-6.27072,       -11.640766,       -8.971974,       -6.721465,       -8.087103,       -13.219861,       -6.485267,       -6.901861,       -0.725603,       -5.377614,       -9.743294,       -6.838871,       -6.536404,       -7.909259,       -7.617342,       -15.76418
-5.773296,       -3.884698,       -6.220149,       1.974023,       -6.749466,       -3.630402,       1.109664,       -7.094895,       -5.377614,       5.867708,       -5.020924,       0.750079,       0.493666,       -4.583922,       -1.154927,       -4.741214
-8.888773,       -11.516361,       -4.738215,       -6.860494,       -11.853405,       -14.962016,       -4.843015,       -13.135737,       -9.743294,       -5.020924,       -1.804834,       -6.153792,       -6.434431,       -11.848213,       -3.97764,       -10.97887
-6.319186,       -6.018974,       -7.01104,       0.34771,       -8.414059,       -8.117927,       -1.306422,       -6.80364,       -6.838871,       0.750079,       -6.153792,       3.630751,       -1.626621,       -5.370144,       -2.736508,       -4.794896
-4.443507,       -5.881199,       -7.084561,       0.593368,       -2.453453,       -7.95575,       1.972564,       -6.152092,       -6.536404,       0.493666,       -6.434431,       -1.626621,       5.161648,       -4.091515,       0.512488,       -3.863363
-14.161596,       -8.903408,       -9.76882,       -5.923952,       -7.85342,       -7.626639,       -5.334641,       -4.522374,       -7.909259,       -4.583922,       -11.848213,       -5.370144,       -4.091515,       -2.25611,       -5.747993,       -4.587897
-6.293561,       -7.452184,       -6.103656,       -1.639048,       -6.790522,       -8.664803,       0.881059,       -7.989156,       -7.617342,       -1.154927,       -3.97764,       -2.736508,       0.512488,       -5.747993,       3.63962,       -4.645311
-9.619531,       -8.547272,       -10.9886,       -2.954973,       -7.54335,       -6.005806,       -4.587348,       -6.153667,       -15.76418,       -4.741214,       -10.97887,       -4.794896,       -3.863363,       -4.587897,       -4.645311,       0.138692
                    };
            return _data;
        }
    };
//    H: 4.2243
//    E: -2.9818


// ----------------------------------------------------------------------------
// Ribosum70_95 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.291295    0.190884    0.250393    0.267428
	struct Ribosum70_95 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum70_95>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.169775,       -5.774675,       -5.30539,       -5.255226
-5.774675,       2.100363,       -5.863514,       -4.146761
-5.30539,       -5.863514,       1.678032,       -5.678643
-5.255226,       -4.146761,       -5.678643,       1.75572
                    };
            return _data;
        }
    };
//    H: 1.8162
//    E: -1.4982

// ----------------------------------------------------------------------------
// Ribosum70_95N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum70_95N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum70_95N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.169775,       -5.774675,       -5.30539,       -5.255226,       -5.863514
-5.774675,       2.100363,       -5.863514,       -4.146761,       -5.863514
-5.30539,       -5.863514,       1.678032,       -5.678643,       -5.863514
-5.255226,       -4.146761,       -5.678643,       1.75572,       -5.863514
-5.863514,       -5.863514,       -5.863514,       -5.863514,       -5.863514
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum70_95d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum70_95d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum70_95d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-0.965161,       -8.96414,       -9.573963,       -8.855208,       -999.0,       -999.0,       -12.349546,       -13.543069,       -9.004274,       -9.376379,       -10.699538,       -12.682761,       -9.64998,       -999.0,       -11.647273,       -999.0
-8.96414,       0.223549,       -10.756611,       -5.52573,       -15.056619,       -9.853998,       -12.478983,       -999.0,       -999.0,       -3.116929,       -12.22983,       -9.64125,       -12.905539,       -9.467883,       -12.154858,       -13.097808
-9.573963,       -10.756611,       -0.646617,       -8.920802,       -12.640761,       -999.0,       -5.250261,       -999.0,       -10.723624,       -11.087665,       -10.08262,       -13.206055,       -9.215947,       -12.517428,       -6.803994,       -14.451883
-8.855208,       -5.52573,       -8.920802,       4.981039,       -11.400904,       -12.886659,       -4.465218,       -7.823074,       -14.349603,       -2.252041,       -9.977862,       -2.567653,       -4.188073,       -9.523326,       -6.751193,       -7.079688
-999.0,       -15.056619,       -12.640761,       -11.400904,       -0.777925,       -10.626005,       -5.576751,       -13.501884,       -14.016714,       -11.845589,       -10.636991,       -13.739821,       -6.142761,       -10.611358,       -10.216868,       -12.834774
-999.0,       -9.853998,       -999.0,       -12.886659,       -10.626005,       0.263614,       -6.851258,       -6.243131,       -13.253371,       -4.027309,       -15.44195,       -11.37424,       -10.411553,       -10.502673,       -12.038243,       -999.0
-12.349546,       -12.478983,       -5.250261,       -4.465218,       -5.576751,       -6.851258,       6.392337,       -6.773876,       -10.237584,       -3.247265,       -5.521694,       -5.436172,       -2.257699,       -10.073462,       -1.282319,       -9.482597
-13.543069,       -999.0,       -999.0,       -7.823074,       -13.501884,       -6.243131,       -6.773876,       -0.953636,       -12.739821,       -7.035015,       -14.106498,       -8.470055,       -6.539348,       -10.375871,       -9.923899,       -9.333992
-9.004274,       -999.0,       -10.723624,       -14.349603,       -14.016714,       -13.253371,       -10.237584,       -12.739821,       -0.397137,       -5.916847,       -10.656297,       -7.845255,       -7.580833,       -999.0,       -12.168203,       -999.0
-9.376379,       -3.116929,       -11.087665,       -2.252041,       -11.845589,       -4.027309,       -3.247265,       -7.035015,       -5.916847,       6.589701,       -4.159005,       -1.427298,       -4.44091,       -6.014253,       -5.109881,       -9.069236
-10.699538,       -12.22983,       -10.08262,       -9.977862,       -10.636991,       -15.44195,       -5.521694,       -14.106498,       -10.656297,       -4.159005,       -0.83237,       -7.318272,       -16.538182,       -999.0,       -6.876566,       -15.592947
-12.682761,       -9.64125,       -13.206055,       -2.567653,       -13.739821,       -11.37424,       -5.436172,       -8.470055,       -7.845255,       -1.427298,       -7.318272,       3.988391,       -7.001829,       -11.501011,       -7.28251,       -8.822356
-9.64998,       -12.905539,       -9.215947,       -4.188073,       -6.142761,       -10.411553,       -2.257699,       -6.539348,       -7.580833,       -4.44091,       -16.538182,       -7.001829,       5.093921,       -5.333169,       -2.945946,       -6.65061
-999.0,       -9.467883,       -12.517428,       -9.523326,       -10.611358,       -10.502673,       -10.073462,       -10.375871,       -999.0,       -6.014253,       -999.0,       -11.501011,       -5.333169,       -0.307892,       -6.638005,       -6.937198
-11.647273,       -12.154858,       -6.803994,       -6.751193,       -10.216868,       -12.038243,       -1.282319,       -9.923899,       -12.168203,       -5.109881,       -6.876566,       -7.28251,       -2.945946,       -6.638005,       3.963976,       -6.616457
-999.0,       -13.097808,       -14.451883,       -7.079688,       -12.834774,       -999.0,       -9.482597,       -9.333992,       -999.0,       -9.069236,       -15.592947,       -8.822356,       -6.65061,       -6.937198,       -6.616457,       0.431565
                    };
            return _data;
        }
    };
//    H: 5.1855
//    E: -49.9374


// ----------------------------------------------------------------------------
// Ribosum80_50 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.262685    0.217771    0.294829    0.224715
	struct Ribosum80_50 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum80_50>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.942721,       -1.287492,       -0.953967,       -0.91038
-1.287492,       1.007439,       -1.793406,       -0.641069
-0.953967,       -1.793406,       0.885948,       -1.169474
-0.91038,       -0.641069,       -1.169474,       1.368705
                    };
            return _data;
        }
    };
//    H: 0.5628
//    E: -0.0973

// ----------------------------------------------------------------------------
// Ribosum80_50N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum80_50N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum80_50N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.942721,       -1.287492,       -0.953967,       -0.91038,       -1.793406
-1.287492,       1.007439,       -1.793406,       -0.641069,       -1.793406
-0.953967,       -1.793406,       0.885948,       -1.169474,       -1.793406
-0.91038,       -0.641069,       -1.169474,       1.368705,       -1.793406
-1.793406,       -1.793406,       -1.793406,       -1.793406,       -1.793406
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum80_50d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum80_50d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum80_50d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.958263,       -5.946627,       -8.89658,       -4.458154,       -9.65826,       -12.965036,       -3.730845,       -11.916612,       -7.07653,       -5.288587,       -8.405048,       -5.742646,       -3.477969,       -12.189586,       -4.987304,       -8.301031
-5.946627,       -1.62628,       -9.347804,       -1.773153,       -9.265219,       -7.512731,       -5.065157,       -9.334779,       -8.060397,       -3.606306,       -10.398505,       -3.753267,       -4.204483,       -8.280987,       -6.329343,       -7.619968
-8.89658,       -9.347804,       -1.412694,       -4.783207,       -10.001703,       -13.451691,       -2.893723,       -10.8336,       -7.678553,       -5.108599,       -4.625131,       -6.551711,       -3.116869,       -9.236279,       -5.496176,       -10.12761
-4.458154,       -1.773153,       -4.783207,       4.223205,       -5.128159,       -3.793741,       2.008657,       -3.926199,       -3.965769,       2.976565,       -4.934271,       0.86811,       1.848918,       -3.961826,       -0.258334,       -2.587541
-9.65826,       -9.265219,       -10.001703,       -5.128159,       -5.229551,       -9.306903,       -2.841502,       -7.893954,       -7.549047,       -4.619568,       -10.006201,       -6.003811,       -2.689289,       -7.091493,       -5.505913,       -8.478808
-12.965036,       -7.512731,       -13.451691,       -3.793741,       -9.306903,       -3.564773,       -4.060187,       -5.086074,       -10.88333,       -2.934704,       -11.350488,       -5.897795,       -4.794807,       -6.829989,       -6.550233,       -4.764322
-3.730845,       -5.065157,       -2.893723,       2.008657,       -2.841502,       -4.060187,       5.256245,       -4.580477,       -4.631604,       2.62066,       -4.428061,       0.164582,       2.989848,       -4.539963,       1.436077,       -2.900381
-11.916612,       -9.334779,       -10.8336,       -3.926199,       -7.893954,       -5.086074,       -4.580477,       -2.850627,       -7.842423,       -3.533018,       -11.629108,       -4.469441,       -4.183099,       -4.629932,       -6.141786,       -5.306565
-7.07653,       -8.060397,       -7.678553,       -3.965769,       -7.549047,       -10.88333,       -4.631604,       -7.842423,       -1.434414,       -3.105066,       -8.057027,       -5.281658,       -4.383301,       -7.251966,       -6.73047,       -10.467677
-5.288587,       -3.606306,       -5.108599,       2.976565,       -4.619568,       -2.934704,       2.62066,       -3.533018,       -3.105066,       5.540767,       -3.724905,       1.562463,       2.02425,       -4.192766,       0.322302,       -2.724173
-8.405048,       -10.398505,       -4.625131,       -4.934271,       -10.006201,       -11.350488,       -4.428061,       -11.629108,       -8.057027,       -3.724905,       -2.229457,       -4.989684,       -5.209182,       -10.854629,       -4.273768,       -8.261241
-5.742646,       -3.753267,       -6.551711,       0.86811,       -6.003811,       -5.897795,       0.164582,       -4.469441,       -5.281658,       1.562463,       -4.989684,       3.232201,       -0.119762,       -4.797198,       -1.638291,       -3.336164
-3.477969,       -4.204483,       -3.116869,       1.848918,       -2.689289,       -4.794807,       2.989848,       -4.183099,       -4.383301,       2.02425,       -5.209182,       -0.119762,       4.666514,       -3.304658,       1.256106,       -2.32715
-12.189586,       -8.280987,       -9.236279,       -3.961826,       -7.091493,       -6.829989,       -4.539963,       -4.629932,       -7.251966,       -4.192766,       -10.854629,       -4.797198,       -3.304658,       -4.366312,       -4.203081,       -6.383312
-4.987304,       -6.329343,       -5.496176,       -0.258334,       -5.505913,       -6.550233,       1.436077,       -6.141786,       -6.73047,       0.322302,       -4.273768,       -1.638291,       1.256106,       -4.203081,       3.152892,       -3.426234
-8.301031,       -7.619968,       -10.12761,       -2.587541,       -8.478808,       -4.764322,       -2.900381,       -5.306565,       -10.467677,       -2.724173,       -8.261241,       -3.336164,       -2.32715,       -6.383312,       -3.426234,       -0.716037
                    };
            return _data;
        }
    };
//    H: 3.4654
//    E: -2.4738


// ----------------------------------------------------------------------------
// Ribosum45_70 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.256204    0.220405    0.300665    0.222726
	struct Ribosum45_70 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum45_70>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.320778,       -2.232413,       -1.832763,       -1.791281
-2.232413,       1.268588,       -2.829806,       -1.21436
-1.832763,       -2.829806,       1.117385,       -2.102307
-1.791281,       -1.21436,       -2.102307,       1.746877
                    };
            return _data;
        }
    };
//    H: 1.0579
//    E: -0.3557

// ----------------------------------------------------------------------------
// Ribosum45_70N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum45_70N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum45_70N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.320778,       -2.232413,       -1.832763,       -1.791281,       -2.829806
-2.232413,       1.268588,       -2.829806,       -1.21436,       -2.829806
-1.832763,       -2.829806,       1.117385,       -2.102307,       -2.829806
-1.791281,       -1.21436,       -2.102307,       1.746877,       -2.829806
-2.829806,       -2.829806,       -2.829806,       -2.829806,       -2.829806
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum45_70d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum45_70d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum45_70d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.714929,       -8.181625,       -8.044796,       -4.748711,       -10.028235,       -14.292346,       -5.248001,       -12.103329,       -5.987669,       -4.742498,       -9.964339,       -6.377158,       -4.756813,       -12.103329,       -6.340863,       -8.495583
-8.181625,       -1.737466,       -9.213933,       -2.107994,       -10.011575,       -9.204563,       -5.927524,       -11.183427,       -10.247034,       -3.817838,       -12.654202,       -5.97896,       -6.091205,       -8.841312,       -7.723004,       -7.985778
-8.044796,       -9.213933,       -0.601984,       -6.013698,       -10.699431,       -14.982637,       -4.934873,       -8.755168,       -9.297385,       -6.446439,       -5.500049,       -6.943409,       -6.694972,       -8.158248,       -5.728817,       -10.526021
-4.748711,       -2.107994,       -6.013698,       4.665747,       -6.250818,       -7.15589,       1.387977,       -5.85424,       -6.359432,       2.500311,       -6.341514,       0.40917,       1.325091,       -5.609118,       -0.78454,       -3.106508
-10.028235,       -10.011575,       -10.699431,       -6.250818,       -5.458737,       -11.5095,       -3.926915,       -7.542547,       -8.683336,       -6.252884,       -11.668253,       -8.550276,       -2.635356,       -7.346478,       -6.285676,       -8.235903
-14.292346,       -9.204563,       -14.982637,       -7.15589,       -11.5095,       -2.606709,       -5.401433,       -6.201518,       -13.843086,       -4.138265,       -12.318679,       -8.290259,       -7.465771,       -8.490261,       -9.008501,       -6.32453
-5.248001,       -5.927524,       -4.934873,       1.387977,       -3.926915,       -5.401433,       5.471307,       -4.917487,       -6.677052,       1.692163,       -4.512635,       -0.672083,       2.492904,       -4.640508,       1.123838,       -4.05785
-12.103329,       -11.183427,       -8.755168,       -5.85424,       -7.542547,       -6.201518,       -4.917487,       -1.691499,       -6.444207,       -6.317532,       -13.440704,       -6.550203,       -4.323024,       -3.9881,       -8.00425,       -4.659102
-5.987669,       -10.247034,       -9.297385,       -6.359432,       -8.683336,       -13.843086,       -6.677052,       -6.444207,       -0.916551,       -5.515245,       -9.743083,       -6.725526,       -6.100166,       -6.247877,       -7.668746,       -11.774451
-4.742498,       -3.817838,       -6.446439,       2.500311,       -6.252884,       -4.138265,       1.692163,       -6.317532,       -5.515245,       5.672161,       -4.92457,       0.98485,       1.198358,       -4.964388,       -0.274275,       -4.481781
-9.964339,       -12.654202,       -5.500049,       -6.341514,       -11.668253,       -12.318679,       -4.512635,       -13.440704,       -9.743083,       -4.92457,       -2.099431,       -5.86102,       -6.352595,       -11.853567,       -4.119263,       -11.766969
-6.377158,       -5.97896,       -6.943409,       0.40917,       -8.550276,       -8.290259,       -0.672083,       -6.550203,       -6.725526,       0.98485,       -5.86102,       3.591529,       -0.945833,       -5.508836,       -2.160683,       -5.120925
-4.756813,       -6.091205,       -6.694972,       1.325091,       -2.635356,       -7.465771,       2.492904,       -4.323024,       -6.100166,       1.198358,       -6.352595,       -0.945833,       5.087089,       -2.984346,       0.943652,       -3.791517
-12.103329,       -8.841312,       -8.158248,       -5.609118,       -7.346478,       -8.490261,       -4.640508,       -3.9881,       -6.247877,       -4.964388,       -11.853567,       -5.508836,       -2.984346,       -3.302729,       -5.109314,       -5.086124
-6.340863,       -7.723004,       -5.728817,       -0.78454,       -6.285676,       -9.008501,       1.123838,       -8.00425,       -7.668746,       -0.274275,       -4.119263,       -2.160683,       0.943652,       -5.109314,       3.473315,       -4.584011
-8.495583,       -7.985778,       -10.526021,       -3.106508,       -8.235903,       -6.32453,       -4.05785,       -4.659102,       -11.774451,       -4.481781,       -11.766969,       -5.120925,       -3.791517,       -5.086124,       -4.584011,       0.159015
                    };
            return _data;
        }
    };
//    H: 3.9321
//    E: -2.9055


// ----------------------------------------------------------------------------
// Ribosum90_80 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.258807    0.214850    0.289801    0.236541
	struct Ribosum90_80 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum90_80>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.295463,       -2.504355,       -2.232513,       -2.19583
-2.504355,       1.444128,       -2.905005,       -1.383972
-2.232513,       -2.905005,       1.230293,       -2.407132
-2.19583,       -1.383972,       -2.407132,       1.755192
                    };
            return _data;
        }
    };
//    H: 1.1667
//    E: -0.4354

// ----------------------------------------------------------------------------
// Ribosum90_80N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum90_80N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum90_80N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.295463,       -2.504355,       -2.232513,       -2.19583,       -2.905005
-2.504355,       1.444128,       -2.905005,       -1.383972,       -2.905005
-2.232513,       -2.905005,       1.230293,       -2.407132,       -2.905005
-2.19583,       -1.383972,       -2.407132,       1.755192,       -2.905005
-2.905005,       -2.905005,       -2.905005,       -2.905005,       -2.905005
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum90_80d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum90_80d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum90_80d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-0.975971,       -9.340387,       -8.380273,       -4.774979,       -9.769467,       -11.455178,       -5.604071,       -12.265198,       -5.972045,       -5.146048,       -10.238854,       -6.300879,       -4.667025,       -11.804108,       -6.574532,       -8.605062
-9.340387,       -0.77426,       -9.020028,       -2.623028,       -10.404677,       -7.692686,       -5.803684,       -11.254721,       -9.224338,       -3.601281,       -12.265365,       -5.487644,       -6.02974,       -7.778922,       -7.628059,       -7.044837
-8.380273,       -9.020028,       -0.653628,       -5.064458,       -9.924008,       -14.877096,       -4.159963,       -9.821381,       -9.02235,       -6.273039,       -4.555138,       -6.866309,       -6.929749,       -9.267001,       -5.72621,       -11.770558
-4.774979,       -2.623028,       -5.064458,       4.878251,       -6.857593,       -7.126543,       0.677535,       -5.211069,       -6.608878,       1.932324,       -6.572681,       0.297526,       0.478561,       -5.941522,       -1.76482,       -2.921168
-9.769467,       -10.404677,       -9.924008,       -6.857593,       -3.723558,       -10.422433,       -3.12934,       -7.725518,       -8.453838,       -6.279085,       -11.923835,       -8.256682,       -2.526326,       -8.269089,       -6.32845,       -7.25144
-11.455178,       -7.692686,       -14.877096,       -7.126543,       -10.422433,       -1.496911,       -4.917022,       -6.597987,       -12.803297,       -3.617053,       -14.128501,       -8.419555,       -7.589349,       -7.394974,       -8.885075,       -5.869008
-5.604071,       -5.803684,       -4.159963,       0.677535,       -3.12934,       -4.917022,       5.710956,       -4.647621,       -7.038494,       1.106804,       -4.789017,       -1.239063,       1.986308,       -5.255736,       0.924329,       -4.255071
-12.265198,       -11.254721,       -9.821381,       -5.211069,       -7.725518,       -6.597987,       -4.647621,       -0.967068,       -8.692453,       -6.781409,       -12.952357,       -6.432611,       -5.784314,       -4.681348,       -7.849372,       -5.76518
-5.972045,       -9.224338,       -9.02235,       -6.608878,       -8.453838,       -12.803297,       -7.038494,       -8.692453,       -0.709554,       -5.619763,       -8.847762,       -6.322458,       -5.694006,       -9.215115,       -7.660502,       -13.005638
-5.146048,       -3.601281,       -6.273039,       1.932324,       -6.279085,       -3.617053,       1.106804,       -6.781409,       -5.619763,       5.866572,       -5.166606,       0.759559,       0.42545,       -4.677562,       -1.179667,       -4.593175
-10.238854,       -12.265365,       -4.555138,       -6.572681,       -11.923835,       -14.128501,       -4.789017,       -12.952357,       -8.847762,       -5.166606,       -1.92187,       -6.065813,       -6.659335,       -10.880499,       -4.084641,       -11.124391
-6.300879,       -5.487644,       -6.866309,       0.297526,       -8.256682,       -8.419555,       -1.239063,       -6.432611,       -6.322458,       0.759559,       -6.065813,       3.656164,       -1.71934,       -5.32236,       -2.631767,       -4.774275
-4.667025,       -6.02974,       -6.929749,       0.478561,       -2.526326,       -7.589349,       1.986308,       -5.784314,       -5.694006,       0.42545,       -6.659335,       -1.71934,       5.15115,       -4.063415,       0.396459,       -4.088163
-11.804108,       -7.778922,       -9.267001,       -5.941522,       -8.269089,       -7.394974,       -5.255736,       -4.681348,       -9.215115,       -4.677562,       -10.880499,       -5.32236,       -4.063415,       -2.73543,       -5.709138,       -4.477779
-6.574532,       -7.628059,       -5.72621,       -1.76482,       -6.32845,       -8.885075,       0.924329,       -7.849372,       -7.660502,       -1.179667,       -4.084641,       -2.631767,       0.396459,       -5.709138,       3.617595,       -4.743935
-8.605062,       -7.044837,       -11.770558,       -2.921168,       -7.25144,       -5.869008,       -4.255071,       -5.76518,       -13.005638,       -4.593175,       -11.124391,       -4.774275,       -4.088163,       -4.477779,       -4.743935,       0.188159
                    };
            return _data;
        }
    };
//    H: 4.2093
//    E: -2.8920


// ----------------------------------------------------------------------------
// Ribosum45_45 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.258033    0.219772    0.297715    0.224480
	struct Ribosum45_45 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum45_45>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.979813,       -1.354418,       -0.929967,       -1.018977
-1.354418,       1.004012,       -1.70623,       -0.620121
-0.929967,       -1.70623,       0.856804,       -1.120194
-1.018977,       -0.620121,       -1.120194,       1.389705
                    };
            return _data;
        }
    };
//    H: 0.5678
//    E: -0.0981

// ----------------------------------------------------------------------------
// Ribosum45_45N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum45_45N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum45_45N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.979813,       -1.354418,       -0.929967,       -1.018977,       -1.70623
-1.354418,       1.004012,       -1.70623,       -0.620121,       -1.70623
-0.929967,       -1.70623,       0.856804,       -1.120194,       -1.70623
-1.018977,       -0.620121,       -1.120194,       1.389705,       -1.70623
-1.70623,       -1.70623,       -1.70623,       -1.70623,       -1.70623
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum45_45d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum45_45d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum45_45d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.597843,       -8.448198,       -8.814229,       -5.08226,       -10.060371,       -13.459775,       -3.875472,       -12.108345,       -6.613537,       -5.22977,       -9.674524,       -6.537533,       -2.487212,       -12.27896,       -3.545592,       -8.833457
-8.448198,       -1.857252,       -9.599208,       -1.651225,       -10.546508,       -8.878763,       -5.473597,       -10.681854,       -7.17692,       -2.715372,       -10.390426,       -4.931089,       -5.61071,       -8.89228,       -7.178101,       -8.383054
-8.814229,       -9.599208,       -1.31674,       -6.065278,       -10.649521,       -15.165062,       -2.57556,       -9.368109,       -9.397132,       -6.297129,       -4.22369,       -7.116979,       -2.825671,       -8.014472,       -5.826417,       -9.793199
-5.08226,       -1.651225,       -6.065278,       4.262084,       -5.776269,       -2.382231,       2.023234,       -4.176132,       -3.78249,       2.872243,       -4.933734,       0.743572,       1.874413,       -4.556015,       -0.396932,       -2.458169
-10.060371,       -10.546508,       -10.649521,       -5.776269,       -6.206968,       -11.701126,       -3.246396,       -8.326184,       -7.769548,       -5.405439,       -11.48712,       -6.204532,       -2.908152,       -8.020687,       -6.201089,       -8.845395
-13.459775,       -8.878763,       -15.165062,       -2.382231,       -11.701126,       -3.458182,       -5.087787,       -6.843155,       -12.902592,       -3.761203,       -12.076861,       -7.121639,       -6.489105,       -8.955242,       -8.317665,       -6.646248
-3.875472,       -5.473597,       -2.57556,       2.023234,       -3.246396,       -5.087787,       5.219344,       -4.382516,       -6.025692,       2.790636,       -4.720514,       0.241136,       2.921961,       -4.34079,       1.187393,       -3.008471
-12.108345,       -10.681854,       -9.368109,       -4.176132,       -8.326184,       -6.843155,       -4.382516,       -2.553416,       -7.120935,       -2.208595,       -9.167431,       -4.402741,       -4.365549,       -4.653833,       -6.523302,       -5.426223
-6.613537,       -7.17692,       -9.397132,       -3.78249,       -7.769548,       -12.902592,       -6.025692,       -7.120935,       -1.613138,       -2.579099,       -9.984868,       -6.187513,       -4.883478,       -6.949921,       -7.675553,       -10.163877
-5.22977,       -2.715372,       -6.297129,       2.872243,       -5.405439,       -3.761203,       2.790636,       -2.208595,       -2.579099,       5.485888,       -4.798298,       1.419419,       1.877964,       -4.187478,       0.325437,       -3.047927
-9.674524,       -10.390426,       -4.22369,       -4.933734,       -11.48712,       -12.076861,       -4.720514,       -9.167431,       -9.984868,       -4.798298,       -2.307611,       -5.533716,       -6.344891,       -10.553175,       -4.342521,       -5.019293
-6.537533,       -4.931089,       -7.116979,       0.743572,       -6.204532,       -7.121639,       0.241136,       -4.402741,       -6.187513,       1.419419,       -5.533716,       3.324528,       0.057293,       -4.604987,       -1.268071,       -2.570822
-2.487212,       -5.61071,       -2.825671,       1.874413,       -2.908152,       -6.489105,       2.921961,       -4.365549,       -4.883478,       1.877964,       -6.344891,       0.057293,       4.733486,       -3.523005,       1.045609,       -1.584109
-12.27896,       -8.89228,       -8.014472,       -4.556015,       -8.020687,       -8.955242,       -4.34079,       -4.653833,       -6.949921,       -4.187478,       -10.553175,       -4.604987,       -3.523005,       -4.112645,       -4.218185,       -5.893054
-3.545592,       -7.178101,       -5.826417,       -0.396932,       -6.201089,       -8.317665,       1.187393,       -6.523302,       -7.675553,       0.325437,       -4.342521,       -1.268071,       1.045609,       -4.218185,       3.194474,       -3.6708
-8.833457,       -8.383054,       -9.793199,       -2.458169,       -8.845395,       -6.646248,       -3.008471,       -5.426223,       -10.163877,       -3.047927,       -5.019293,       -2.570822,       -1.584109,       -5.893054,       -3.6708,       -0.699347
                    };
            return _data;
        }
    };
//    H: 3.4675
//    E: -2.6072


// ----------------------------------------------------------------------------
// Ribosum55_60 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.256422    0.220609    0.300607    0.222361
	struct Ribosum55_60 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum55_60>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.296512,       -2.116033,       -1.730813,       -1.675325
-2.116033,       1.240264,       -2.707284,       -1.155903
-1.730813,       -2.707284,       1.094317,       -1.994427
-1.675325,       -1.155903,       -1.994427,       1.720319
                    };
            return _data;
        }
    };
//    H: 1.0076
//    E: -0.3229

// ----------------------------------------------------------------------------
// Ribosum55_60N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum55_60N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum55_60N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.296512,       -2.116033,       -1.730813,       -1.675325,       -2.707284
-2.116033,       1.240264,       -2.707284,       -1.155903,       -2.707284
-1.730813,       -2.707284,       1.094317,       -1.994427,       -2.707284
-1.675325,       -1.155903,       -1.994427,       1.720319,       -2.707284
-2.707284,       -2.707284,       -2.707284,       -2.707284,       -2.707284
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum55_60d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum55_60d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum55_60d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.823787,       -7.979797,       -8.135359,       -4.679348,       -9.616439,       -14.353122,       -5.070906,       -11.932688,       -6.103024,       -4.762505,       -9.666422,       -6.334913,       -4.631012,       -11.990944,       -6.235047,       -8.605696
-7.979797,       -1.781803,       -9.2478,       -2.083089,       -10.001078,       -9.220711,       -5.846747,       -10.975078,       -10.2446,       -3.804911,       -12.319207,       -5.196629,       -5.844475,       -8.59084,       -7.383931,       -7.991082
-8.135359,       -9.2478,       -0.646096,       -5.858503,       -10.601063,       -14.724498,       -4.803332,       -8.893019,       -9.064328,       -6.300644,       -5.509521,       -6.917504,       -5.947009,       -8.286122,       -5.773467,       -10.589889
-4.679348,       -2.083089,       -5.858503,       4.628749,       -6.089355,       -6.917085,       1.48035,       -5.624372,       -6.025077,       2.550668,       -6.178448,       0.448489,       1.392849,       -5.450343,       -0.712296,       -3.065822
-9.616439,       -10.001078,       -10.601063,       -6.089355,       -5.515625,       -11.29479,       -3.890463,       -7.595263,       -8.617114,       -6.035866,       -11.364122,       -8.283752,       -2.641198,       -7.360963,       -6.246224,       -8.317092
-14.353122,       -9.220711,       -14.724498,       -6.917085,       -11.29479,       -2.742462,       -5.310012,       -6.174163,       -13.663616,       -4.073009,       -12.370276,       -8.05832,       -7.259967,       -8.36252,       -8.795976,       -6.045147
-5.070906,       -5.846747,       -4.803332,       1.48035,       -3.890463,       -5.310012,       5.441093,       -4.915511,       -6.495353,       1.841931,       -4.541707,       -0.537039,       2.54999,       -4.630051,       1.16332,       -3.829073
-11.932688,       -10.975078,       -8.893019,       -5.624372,       -7.595263,       -6.174163,       -4.915511,       -1.796103,       -6.58214,       -6.151907,       -13.462768,       -6.062923,       -4.345114,       -3.911725,       -7.766071,       -4.669924
-6.103024,       -10.2446,       -9.064328,       -6.025077,       -8.617114,       -13.663616,       -6.495353,       -6.58214,       -0.926211,       -5.266103,       -9.582204,       -6.558983,       -6.058523,       -6.351487,       -7.726734,       -11.749398
-4.762505,       -3.804911,       -6.300644,       2.550668,       -6.035866,       -4.073009,       1.841931,       -6.151907,       -5.266103,       5.651993,       -4.725325,       1.061995,       1.317401,       -4.847727,       -0.215199,       -4.243166
-9.666422,       -12.319207,       -5.509521,       -6.178448,       -11.364122,       -12.370276,       -4.541707,       -13.462768,       -9.582204,       -4.725325,       -2.107827,       -5.773053,       -6.241098,       -11.837407,       -4.175909,       -11.747199
-6.334913,       -5.196629,       -6.917504,       0.448489,       -8.283752,       -8.05832,       -0.537039,       -6.062923,       -6.558983,       1.061995,       -5.773053,       3.560054,       -0.839389,       -5.291519,       -2.135597,       -4.969875
-4.631012,       -5.844475,       -5.947009,       1.392849,       -2.641198,       -7.259967,       2.54999,       -4.345114,       -6.058523,       1.317401,       -6.241098,       -0.839389,       5.054085,       -3.015521,       0.9886,       -3.65066
-11.990944,       -8.59084,       -8.286122,       -5.450343,       -7.360963,       -8.36252,       -4.630051,       -3.911725,       -6.351487,       -4.847727,       -11.837407,       -5.291519,       -3.015521,       -3.36507,       -4.962211,       -5.136651
-6.235047,       -7.383931,       -5.773467,       -0.712296,       -6.246224,       -8.795976,       1.16332,       -7.766071,       -7.726734,       -0.215199,       -4.175909,       -2.135597,       0.9886,       -4.962211,       3.446348,       -4.372372
-8.605696,       -7.991082,       -10.589889,       -3.065822,       -8.317092,       -6.045147,       -3.829073,       -4.669924,       -11.749398,       -4.243166,       -11.747199,       -4.969875,       -3.65066,       -5.136651,       -4.372372,       0.089403
                    };
            return _data;
        }
    };
//    H: 3.8788
//    E: -2.8591


// ----------------------------------------------------------------------------
// Ribosum55_75 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.254754    0.220511    0.298116    0.226619
	struct Ribosum55_75 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum55_75>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.340016,       -2.354997,       -2.028472,       -1.973945
-2.354997,       1.323564,       -2.884865,       -1.270651
-2.028472,       -2.884865,       1.154413,       -2.274461
-1.973945,       -1.270651,       -2.274461,       1.778159
                    };
            return _data;
        }
    };
//    H: 1.1188
//    E: -0.3970

// ----------------------------------------------------------------------------
// Ribosum55_75N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum55_75N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum55_75N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.340016,       -2.354997,       -2.028472,       -1.973945,       -2.884865
-2.354997,       1.323564,       -2.884865,       -1.270651,       -2.884865
-2.028472,       -2.884865,       1.154413,       -2.274461,       -2.884865
-1.973945,       -1.270651,       -2.274461,       1.778159,       -2.884865
-2.884865,       -2.884865,       -2.884865,       -2.884865,       -2.884865
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum55_75d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum55_75d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum55_75d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.256212,       -8.350032,       -8.180741,       -5.05758,       -10.336428,       -13.752927,       -5.56971,       -11.877088,       -5.761305,       -4.736529,       -10.348281,       -6.479624,       -4.755041,       -13.122771,       -6.219897,       -8.226571
-8.350032,       -1.318166,       -9.014799,       -2.196944,       -10.131318,       -8.705512,       -5.716843,       -11.192236,       -10.510784,       -3.789397,       -12.676781,       -6.026469,       -6.20317,       -8.819199,       -7.563538,       -7.859686
-8.180741,       -9.014799,       -0.575285,       -6.029814,       -11.086316,       -14.739431,       -4.788724,       -8.844623,       -9.37555,       -6.517783,       -5.216423,       -7.011023,       -6.726023,       -8.114807,       -5.505943,       -10.66299
-5.05758,       -2.196944,       -6.029814,       4.794804,       -6.538126,       -7.405052,       1.125177,       -5.901311,       -7.09139,       2.280332,       -6.785272,       0.346691,       1.004898,       -5.82306,       -1.136455,       -2.953756
-10.336428,       -10.131318,       -11.086316,       -6.538126,       -5.006807,       -11.248143,       -3.755272,       -7.580818,       -8.673889,       -6.184537,       -11.535851,       -8.535027,       -2.588864,       -7.694247,       -6.307313,       -7.919352
-13.752927,       -8.705512,       -14.739431,       -7.405052,       -11.248143,       -2.064487,       -5.173726,       -6.517608,       -13.470942,       -4.024825,       -12.465628,       -8.209251,       -7.500051,       -8.534649,       -8.940247,       -6.377775
-5.56971,       -5.716843,       -4.788724,       1.125177,       -3.755272,       -5.173726,       5.540746,       -4.942752,       -6.915886,       1.525388,       -4.440411,       -0.951716,       2.275162,       -4.718954,       1.05324,       -3.966046
-11.877088,       -11.192236,       -8.844623,       -5.901311,       -7.580818,       -6.517608,       -4.942752,       -1.397683,       -6.401393,       -6.64862,       -13.017965,       -6.793395,       -4.625959,       -4.355433,       -7.925904,       -4.659737
-5.761305,       -10.510784,       -9.37555,       -7.09139,       -8.673889,       -13.470942,       -6.915886,       -6.401393,       -0.830987,       -5.605675,       -9.833787,       -6.647816,       -5.825599,       -6.24521,       -7.647816,       -11.614142
-4.736529,       -3.789397,       -6.517783,       2.280332,       -6.184537,       -4.024825,       1.525388,       -6.64862,       -5.605675,       5.715203,       -5.203053,       0.917737,       0.887188,       -4.828153,       -0.515116,       -4.494587
-10.348281,       -12.676781,       -5.216423,       -6.785272,       -11.535851,       -12.465628,       -4.440411,       -13.017965,       -9.833787,       -5.203053,       -2.157247,       -6.07999,       -6.63846,       -11.833872,       -4.18165,       -11.72968
-6.479624,       -6.026469,       -7.011023,       0.346691,       -8.535027,       -8.209251,       -0.951716,       -6.793395,       -6.647816,       0.917737,       -6.07999,       3.626823,       -1.32139,       -5.233767,       -2.329878,       -5.022246
-4.755041,       -6.20317,       -6.726023,       1.004898,       -2.588864,       -7.500051,       2.275162,       -4.625959,       -5.825599,       0.887188,       -6.63846,       -1.32139,       5.132773,       -3.102227,       0.716593,       -3.900278
-13.122771,       -8.819199,       -8.114807,       -5.82306,       -7.694247,       -8.534649,       -4.718954,       -4.355433,       -6.24521,       -4.828153,       -11.833872,       -5.233767,       -3.102227,       -3.167171,       -5.413674,       -4.777631
-6.219897,       -7.563538,       -5.505943,       -1.136455,       -6.307313,       -8.940247,       1.05324,       -7.925904,       -7.647816,       -0.515116,       -4.18165,       -2.329878,       0.716593,       -5.413674,       3.543742,       -4.486342
-8.226571,       -7.859686,       -10.66299,       -2.953756,       -7.919352,       -6.377775,       -3.966046,       -4.659737,       -11.614142,       -4.494587,       -11.72968,       -5.022246,       -3.900278,       -4.777631,       -4.486342,       0.169066
                    };
            return _data;
        }
    };
//    H: 4.0368
//    E: -2.9127


// ----------------------------------------------------------------------------
// Ribosum100_45 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.257937    0.219828    0.297756    0.224479
	struct Ribosum100_45 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum100_45>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.979924,       -1.353442,       -0.929668,       -1.020058
-1.353442,       1.003862,       -1.703337,       -0.6196
-0.929668,       -1.703337,       0.856496,       -1.119704
-1.020058,       -0.6196,       -1.119704,       1.389751
                    };
            return _data;
        }
    };
//    H: 0.5675
//    E: -0.0979

// ----------------------------------------------------------------------------
// Ribosum100_45N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum100_45N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum100_45N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.979924,       -1.353442,       -0.929668,       -1.020058,       -1.703337
-1.353442,       1.003862,       -1.703337,       -0.6196,       -1.703337
-0.929668,       -1.703337,       0.856496,       -1.119704,       -1.703337
-1.020058,       -0.6196,       -1.119704,       1.389751,       -1.703337
-1.703337,       -1.703337,       -1.703337,       -1.703337,       -1.703337
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum100_45d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum100_45d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum100_45d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.587899,       -8.458592,       -8.810812,       -5.088089,       -10.045289,       -13.446125,       -3.873207,       -12.094083,       -6.613132,       -5.227304,       -9.683692,       -6.521248,       -2.483025,       -12.253421,       -3.545078,       -8.852354
-8.458592,       -1.846815,       -9.587535,       -1.649627,       -10.544356,       -8.860155,       -5.481568,       -10.676846,       -7.164101,       -2.71442,       -10.380432,       -4.926418,       -5.613454,       -8.871867,       -7.166997,       -8.379313
-8.810812,       -9.587535,       -1.318851,       -6.061853,       -10.640449,       -15.13259,       -2.575222,       -9.3549,       -9.384077,       -6.29143,       -4.220292,       -7.117949,       -2.824705,       -8.007613,       -5.823471,       -9.78007
-5.088089,       -1.649627,       -6.061853,       4.263387,       -5.782822,       -2.381979,       2.023725,       -4.177333,       -3.783005,       2.871325,       -4.931284,       0.744426,       1.874645,       -4.548029,       -0.39723,       -2.453383
-10.045289,       -10.544356,       -10.640449,       -5.782822,       -6.196852,       -11.690593,       -3.244899,       -8.316669,       -7.778716,       -5.402477,       -11.477405,       -6.204876,       -2.905198,       -8.021308,       -6.214516,       -8.837371
-13.446125,       -8.860155,       -15.13259,       -2.381979,       -11.690593,       -3.456622,       -5.078284,       -6.857889,       -12.908259,       -3.75937,       -12.078083,       -7.108704,       -6.482119,       -8.942336,       -8.31036,       -6.631771
-3.873207,       -5.481568,       -2.575222,       2.023725,       -3.244899,       -5.078284,       5.218216,       -4.389106,       -6.029013,       2.791218,       -4.718536,       0.242243,       2.920623,       -4.349886,       1.186311,       -3.004941
-12.094083,       -10.676846,       -9.3549,       -4.177333,       -8.316669,       -6.857889,       -4.389106,       -2.550595,       -7.133055,       -2.208536,       -9.1489,       -4.410281,       -4.366015,       -4.660109,       -6.513804,       -5.415848
-6.613132,       -7.164101,       -9.384077,       -3.783005,       -7.778716,       -12.908259,       -6.029013,       -7.133055,       -1.615152,       -2.577655,       -9.992283,       -6.183571,       -4.870552,       -6.972116,       -7.666446,       -10.147743
-5.227304,       -2.71442,       -6.29143,       2.871325,       -5.402477,       -3.75937,       2.791218,       -2.208536,       -2.577655,       5.484415,       -4.791854,       1.420217,       1.877841,       -4.178657,       0.323492,       -3.046273
-9.683692,       -10.380432,       -4.220292,       -4.931284,       -11.477405,       -12.078083,       -4.718536,       -9.1489,       -9.992283,       -4.791854,       -2.306206,       -5.531778,       -6.33789,       -10.566929,       -4.341909,       -5.018111
-6.521248,       -4.926418,       -7.117949,       0.744426,       -6.204876,       -7.108704,       0.242243,       -4.410281,       -6.183571,       1.420217,       -5.531778,       3.324288,       0.05794,       -4.61077,       -1.266778,       -2.56593
-2.483025,       -5.613454,       -2.824705,       1.874645,       -2.905198,       -6.482119,       2.920623,       -4.366015,       -4.870552,       1.877841,       -6.33789,       0.05794,       4.734009,       -3.528083,       1.045284,       -1.580638
-12.253421,       -8.871867,       -8.007613,       -4.548029,       -8.021308,       -8.942336,       -4.349886,       -4.660109,       -6.972116,       -4.178657,       -10.566929,       -4.61077,       -3.528083,       -4.128922,       -4.221359,       -5.890467
-3.545078,       -7.166997,       -5.823471,       -0.39723,       -6.214516,       -8.31036,       1.186311,       -6.513804,       -7.666446,       0.323492,       -4.341909,       -1.266778,       1.045284,       -4.221359,       3.194774,       -3.663674
-8.852354,       -8.379313,       -9.78007,       -2.453383,       -8.837371,       -6.631771,       -3.004941,       -5.415848,       -10.147743,       -3.046273,       -5.018111,       -2.56593,       -1.580638,       -5.890467,       -3.663674,       -0.699242
                    };
            return _data;
        }
    };
//    H: 3.4667
//    E: -2.6057


// ----------------------------------------------------------------------------
// Ribosum55_70 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.256304    0.220299    0.300529    0.222867
	struct Ribosum55_70 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum55_70>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.319468,       -2.232661,       -1.832887,       -1.789298
-2.232661,       1.26948,       -2.829591,       -1.214952
-1.832887,       -2.829591,       1.118101,       -2.102761
-1.789298,       -1.214952,       -2.102761,       1.746124
                    };
            return _data;
        }
    };
//    H: 1.0575
//    E: -0.3556

// ----------------------------------------------------------------------------
// Ribosum55_70N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum55_70N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum55_70N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.319468,       -2.232661,       -1.832887,       -1.789298,       -2.829591
-2.232661,       1.26948,       -2.829591,       -1.214952,       -2.829591
-1.832887,       -2.829591,       1.118101,       -2.102761,       -2.829591
-1.789298,       -1.214952,       -2.102761,       1.746124,       -2.829591
-2.829591,       -2.829591,       -2.829591,       -2.829591,       -2.829591
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum55_70d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum55_70d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum55_70d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.716286,       -8.18337,       -8.046583,       -4.744339,       -10.02998,       -14.292835,       -5.248533,       -12.105428,       -5.989457,       -4.74303,       -9.964914,       -6.3793,       -4.744667,       -12.105428,       -6.343005,       -8.499292
-8.18337,       -1.737955,       -9.214465,       -2.110093,       -10.012065,       -9.203797,       -5.926801,       -11.184271,       -10.247566,       -3.817115,       -12.653521,       -5.979846,       -6.070643,       -8.842156,       -7.723891,       -7.988232
-8.046583,       -9.214465,       -0.602559,       -6.000059,       -10.699963,       -14.981914,       -4.934192,       -8.756054,       -9.29796,       -6.445758,       -5.499411,       -6.944338,       -6.697113,       -8.159134,       -5.729746,       -10.528517
-4.744339,       -2.110093,       -6.000059,       4.66543,       -6.252917,       -7.156733,       1.387091,       -5.856694,       -6.361574,       2.499526,       -6.342443,       0.407737,       1.322441,       -5.592882,       -0.78655,       -3.10729
-10.02998,       -10.012065,       -10.699963,       -6.252917,       -5.459227,       -11.508734,       -3.926192,       -7.472553,       -8.683868,       -6.25216,       -11.667572,       -8.551162,       -2.635376,       -7.347321,       -6.286563,       -8.238357
-14.292835,       -9.203797,       -14.981914,       -7.156733,       -11.508734,       -2.604688,       -5.399454,       -6.201106,       -13.842362,       -4.136286,       -12.316743,       -8.28989,       -7.466615,       -8.489849,       -9.008131,       -6.325728
-5.248533,       -5.926801,       -4.934192,       1.387091,       -3.926192,       -5.399454,       5.473254,       -4.917118,       -6.676371,       1.6941,       -4.510742,       -0.671757,       2.492321,       -4.640139,       1.124276,       -4.059091
-12.105428,       -11.184271,       -8.756054,       -5.856694,       -7.472553,       -6.201106,       -4.917118,       -1.692696,       -6.445094,       -6.317162,       -13.440377,       -6.551443,       -4.317785,       -3.989298,       -8.005491,       -4.66191
-5.989457,       -10.247566,       -9.29796,       -6.361574,       -8.683868,       -13.842362,       -6.676371,       -6.445094,       -0.917126,       -5.514565,       -9.742445,       -6.726455,       -6.102308,       -6.248763,       -7.669674,       -11.776947
-4.74303,       -3.817115,       -6.445758,       2.499526,       -6.25216,       -4.136286,       1.6941,       -6.317162,       -5.514565,       5.674184,       -4.922677,       0.985422,       1.197472,       -4.964019,       -0.273948,       -4.483022
-9.964914,       -12.653521,       -5.499411,       -6.342443,       -11.667572,       -12.316743,       -4.510742,       -13.440377,       -9.742445,       -4.922677,       -2.09758,       -5.860736,       -6.353524,       -11.85324,       -4.118979,       -11.768253
-6.3793,       -5.979846,       -6.944338,       0.407737,       -8.551162,       -8.28989,       -0.671757,       -6.551443,       -6.726455,       0.985422,       -5.860736,       3.590686,       -0.947785,       -5.510076,       -2.161966,       -5.101334
-4.744667,       -6.070643,       -6.697113,       1.322441,       -2.635376,       -7.466615,       2.492321,       -4.317785,       -6.102308,       1.197472,       -6.353524,       -0.947785,       5.086264,       -2.986799,       0.941744,       -3.790309
-12.105428,       -8.842156,       -8.159134,       -5.592882,       -7.347321,       -8.489849,       -4.640139,       -3.989298,       -6.248763,       -4.964019,       -11.85324,       -5.510076,       -2.986799,       -3.303927,       -5.099263,       -5.088932
-6.343005,       -7.723891,       -5.729746,       -0.78655,       -6.286563,       -9.008131,       1.124276,       -8.005491,       -7.669674,       -0.273948,       -4.118979,       -2.161966,       0.941744,       -5.099263,       3.472205,       -4.586861
-8.499292,       -7.988232,       -10.528517,       -3.10729,       -8.238357,       -6.325728,       -4.059091,       -4.66191,       -11.776947,       -4.483022,       -11.768253,       -5.101334,       -3.790309,       -5.088932,       -4.586861,       0.154598
                    };
            return _data;
        }
    };
//    H: 3.9327
//    E: -2.9050


// ----------------------------------------------------------------------------
// Ribosum65_80 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.258841    0.212158    0.282064    0.246937
	struct Ribosum65_80 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum65_80>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.282551,       -2.659507,       -2.438345,       -2.436952
-2.659507,       1.52863,       -2.998604,       -1.388975
-2.438345,       -2.998604,       1.284678,       -2.593844
-2.436952,       -1.388975,       -2.593844,       1.744645
                    };
            return _data;
        }
    };
//    H: 1.2183
//    E: -0.4824

// ----------------------------------------------------------------------------
// Ribosum65_80N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum65_80N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum65_80N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.282551,       -2.659507,       -2.438345,       -2.436952,       -2.998604
-2.659507,       1.52863,       -2.998604,       -1.388975,       -2.998604
-2.438345,       -2.998604,       1.284678,       -2.593844,       -2.998604
-2.436952,       -1.388975,       -2.593844,       1.744645,       -2.998604
-2.998604,       -2.998604,       -2.998604,       -2.998604,       -2.998604
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum65_80d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum65_80d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum65_80d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-0.559828,       -8.621395,       -7.913388,       -5.257433,       -9.665215,       -12.805828,       -5.967689,       -12.020461,       -6.072375,       -4.974224,       -9.980975,       -6.623733,       -4.850368,       -12.406497,       -7.192695,       -8.167052
-8.621395,       -0.311542,       -8.946905,       -2.356247,       -10.495956,       -7.609034,       -5.401865,       -11.137993,       -10.869116,       -3.371183,       -11.767128,       -5.718549,       -6.466431,       -8.500462,       -7.649867,       -7.5954
-7.913388,       -8.946905,       -0.576835,       -5.908912,       -10.584721,       -13.991493,       -4.636538,       -11.091959,       -8.492132,       -6.871884,       -4.698677,       -7.019843,       -7.419021,       -9.829395,       -5.767721,       -11.204396
-5.257433,       -2.356247,       -5.908912,       4.945383,       -7.058369,       -7.802157,       0.275012,       -5.67818,       -7.883563,       1.687185,       -7.098606,       0.183284,       -0.257807,       -5.982767,       -2.330635,       -2.80328
-9.665215,       -10.495956,       -10.584721,       -7.058369,       -3.534479,       -10.660644,       -3.245292,       -8.442436,       -8.768785,       -6.045972,       -9.590331,       -8.16032,       -2.348352,       -8.958889,       -6.227637,       -7.337168
-12.805828,       -7.609034,       -13.991493,       -7.802157,       -10.660644,       -0.794072,       -4.789385,       -6.68158,       -13.963933,       -3.757038,       -12.221441,       -8.139573,       -6.976617,       -8.149622,       -8.898159,       -5.834769
-5.967689,       -5.401865,       -4.636538,       0.275012,       -3.245292,       -4.789385,       5.828068,       -4.650405,       -7.291336,       1.043301,       -4.621715,       -1.336213,       1.694836,       -5.346804,       0.885391,       -4.057968
-12.020461,       -11.137993,       -11.091959,       -5.67818,       -8.442436,       -6.68158,       -4.650405,       -0.791154,       -9.234204,       -6.715704,       -11.803511,       -6.452157,       -5.570844,       -5.362289,       -7.641451,       -5.80182
-6.072375,       -10.869116,       -8.492132,       -7.883563,       -8.768785,       -13.963933,       -7.291336,       -9.234204,       -0.558238,       -5.72395,       -9.373646,       -6.11145,       -6.513929,       -8.752739,       -8.261985,       -13.417367
-4.974224,       -3.371183,       -6.871884,       1.687185,       -6.045972,       -3.757038,       1.043301,       -6.715704,       -5.72395,       5.937933,       -4.7531,       0.80964,       -0.029004,       -4.269049,       -1.238888,       -4.27311
-9.980975,       -11.767128,       -4.698677,       -7.098606,       -9.590331,       -12.221441,       -4.621715,       -11.803511,       -9.373646,       -4.7531,       -2.295315,       -5.672209,       -6.79864,       -11.738921,       -4.214237,       -11.840733
-6.623733,       -5.718549,       -7.019843,       0.183284,       -8.16032,       -8.139573,       -1.336213,       -6.452157,       -6.11145,       0.80964,       -5.672209,       3.689147,       -2.285799,       -4.369486,       -2.910513,       -4.882399
-4.850368,       -6.466431,       -7.419021,       -0.257807,       -2.348352,       -6.976617,       1.694836,       -5.570844,       -6.513929,       -0.029004,       -6.79864,       -2.285799,       5.115961,       -4.344657,       0.064479,       -4.194897
-12.406497,       -8.500462,       -9.829395,       -5.982767,       -8.958889,       -8.149622,       -5.346804,       -5.362289,       -8.752739,       -4.269049,       -11.738921,       -4.369486,       -4.344657,       -2.51225,       -6.240039,       -4.236926
-7.192695,       -7.649867,       -5.767721,       -2.330635,       -6.227637,       -8.898159,       0.885391,       -7.641451,       -8.261985,       -1.238888,       -4.214237,       -2.910513,       0.064479,       -6.240039,       3.62973,       -4.962622
-8.167052,       -7.5954,       -11.204396,       -2.80328,       -7.337168,       -5.834769,       -4.057968,       -5.80182,       -13.417367,       -4.27311,       -11.840733,       -4.882399,       -4.194897,       -4.236926,       -4.962622,       0.116562
                    };
            return _data;
        }
    };
//    H: 4.3056
//    E: -2.9242


// ----------------------------------------------------------------------------
// Ribosum95_75 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.256403    0.219541    0.297784    0.226272
	struct Ribosum95_75 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum95_75>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.319936,       -2.310603,       -1.980405,       -1.9073
-2.310603,       1.319652,       -2.843751,       -1.273465
-1.980405,       -2.843751,       1.152523,       -2.212497
-1.9073,       -1.273465,       -2.212497,       1.761538
                    };
            return _data;
        }
    };
//    H: 1.0968
//    E: -0.3817

// ----------------------------------------------------------------------------
// Ribosum95_75N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum95_75N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum95_75N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.319936,       -2.310603,       -1.980405,       -1.9073,       -2.843751
-2.310603,       1.319652,       -2.843751,       -1.273465,       -2.843751
-1.980405,       -2.843751,       1.152523,       -2.212497,       -2.843751
-1.9073,       -1.273465,       -2.212497,       1.761538,       -2.843751
-2.843751,       -2.843751,       -2.843751,       -2.843751,       -2.843751
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum95_75d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum95_75d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum95_75d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.442928,       -8.715155,       -8.734446,       -4.906521,       -10.103088,       -13.360103,       -5.326943,       -11.579352,       -6.083216,       -4.722525,       -10.321057,       -6.431217,       -4.620718,       -12.655344,       -6.119643,       -8.477506
-8.715155,       -1.425838,       -8.652269,       -2.304238,       -9.881466,       -8.629304,       -5.658786,       -11.118824,       -10.237887,       -3.707499,       -12.501049,       -5.853288,       -5.982329,       -8.913567,       -7.414445,       -7.570121
-8.734446,       -8.652269,       -0.59859,       -5.758496,       -10.916357,       -14.58825,       -4.611005,       -8.863957,       -9.776563,       -6.291613,       -5.111895,       -7.023984,       -6.590847,       -8.009896,       -5.43732,       -10.376417
-4.906521,       -2.304238,       -5.758496,       4.769037,       -6.462121,       -7.168554,       1.164429,       -5.670652,       -6.817046,       2.303032,       -6.482977,       0.386081,       1.0979,       -5.723774,       -1.141186,       -2.991071
-10.103088,       -9.881466,       -10.916357,       -6.462121,       -4.98583,       -11.021803,       -3.631029,       -7.622833,       -8.565305,       -6.232825,       -11.706839,       -8.391454,       -2.612662,       -7.520756,       -6.181328,       -7.928152
-13.360103,       -8.629304,       -14.58825,       -7.168554,       -11.021803,       -2.184409,       -5.174605,       -6.653985,       -13.252044,       -3.923281,       -11.957941,       -8.014842,       -7.423341,       -7.777703,       -8.73477,       -6.346657
-5.326943,       -5.658786,       -4.611005,       1.164429,       -3.631029,       -5.174605,       5.542858,       -4.851687,       -6.634483,       1.525338,       -4.470314,       -0.947698,       2.319914,       -4.67286,       1.067588,       -3.968979
-11.579352,       -11.118824,       -8.863957,       -5.670652,       -7.622833,       -6.653985,       -4.851687,       -1.422592,       -6.872515,       -6.42341,       -12.874133,       -6.683981,       -4.664716,       -4.133561,       -7.675507,       -4.63443
-6.083216,       -10.237887,       -9.776563,       -6.817046,       -8.565305,       -13.252044,       -6.634483,       -6.872515,       -0.869336,       -5.445117,       -9.256233,       -6.499209,       -5.851153,       -6.514507,       -7.412794,       -11.422035
-4.722525,       -3.707499,       -6.291613,       2.303032,       -6.232825,       -3.923281,       1.525338,       -6.42341,       -5.445117,       5.730676,       -5.087092,       0.91761,       0.938822,       -4.791661,       -0.588164,       -4.508472
-10.321057,       -12.501049,       -5.111895,       -6.482977,       -11.706839,       -11.957941,       -4.470314,       -12.874133,       -9.256233,       -5.087092,       -2.048591,       -6.040912,       -6.459586,       -11.273646,       -4.088928,       -10.94085
-6.431217,       -5.853288,       -7.023984,       0.386081,       -8.391454,       -8.014842,       -0.947698,       -6.683981,       -6.499209,       0.91761,       -6.040912,       3.612448,       -1.220607,       -5.297401,       -2.382869,       -4.930597
-4.620718,       -5.982329,       -6.590847,       1.0979,       -2.612662,       -7.423341,       2.319914,       -4.664716,       -5.851153,       0.938822,       -6.459586,       -1.220607,       5.121292,       -3.147867,       0.747553,       -3.839319
-12.655344,       -8.913567,       -8.009896,       -5.723774,       -7.520756,       -7.777703,       -4.67286,       -4.133561,       -6.514507,       -4.791661,       -11.273646,       -5.297401,       -3.147867,       -3.046907,       -5.261936,       -4.889768
-6.119643,       -7.414445,       -5.43732,       -1.141186,       -6.181328,       -8.73477,       1.067588,       -7.675507,       -7.412794,       -0.588164,       -4.088928,       -2.382869,       0.747553,       -5.261936,       3.53737,       -4.504014
-8.477506,       -7.570121,       -10.376417,       -2.991071,       -7.928152,       -6.346657,       -3.968979,       -4.63443,       -11.422035,       -4.508472,       -10.94085,       -4.930597,       -3.839319,       -4.889768,       -4.504014,       0.165608
                    };
            return _data;
        }
    };
//    H: 4.0269
//    E: -2.8701


// ----------------------------------------------------------------------------
// Ribosum55_35 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.258941    0.218920    0.296599    0.225540
	struct Ribosum55_35 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum55_35>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.963061,       -1.341466,       -0.919562,       -0.985044
-1.341466,       1.000792,       -1.699253,       -0.612014
-0.919562,       -1.699253,       0.854045,       -1.109052
-0.985044,       -0.612014,       -1.109052,       1.376566
                    };
            return _data;
        }
    };
//    H: 0.5577
//    E: -0.0942

// ----------------------------------------------------------------------------
// Ribosum55_35N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum55_35N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum55_35N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.963061,       -1.341466,       -0.919562,       -0.985044,       -1.699253
-1.341466,       1.000792,       -1.699253,       -0.612014,       -1.699253
-0.919562,       -1.699253,       0.854045,       -1.109052,       -1.699253
-0.985044,       -0.612014,       -1.109052,       1.376566,       -1.699253
-1.699253,       -1.699253,       -1.699253,       -1.699253,       -1.699253
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum55_35d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum55_35d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum55_35d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.62841,       -8.469144,       -8.834725,       -5.081035,       -10.080663,       -13.468162,       -3.872763,       -12.129692,       -6.634942,       -5.146095,       -9.685586,       -6.501287,       -2.497475,       -12.299043,       -3.557136,       -8.866536
-8.469144,       -1.866401,       -9.608961,       -1.665591,       -10.55729,       -8.868916,       -5.420783,       -10.691159,       -7.185665,       -2.693172,       -10.389817,       -4.933444,       -5.569785,       -8.901777,       -7.181424,       -8.400638
-8.834725,       -9.608961,       -1.327883,       -6.074436,       -10.658727,       -15.165361,       -2.56892,       -9.374385,       -9.406571,       -6.293652,       -4.223295,       -7.129056,       -2.829144,       -8.021957,       -5.836656,       -9.786978
-5.081035,       -1.665591,       -6.074436,       4.23951,       -5.777039,       -2.378574,       2.031618,       -4.17847,       -3.799329,       2.877965,       -4.933456,       0.739455,       1.880675,       -4.553437,       -0.383889,       -2.477786
-10.080663,       -10.55729,       -10.658727,       -5.777039,       -6.217656,       -11.700406,       -3.238227,       -8.274944,       -7.756967,       -5.395756,       -11.485655,       -6.205384,       -2.919729,       -8.033201,       -6.197104,       -8.869873
-13.468162,       -8.868916,       -15.165361,       -2.378574,       -11.700406,       -3.447623,       -5.064803,       -6.844967,       -12.88605,       -3.745304,       -12.052254,       -7.113086,       -6.478135,       -8.957086,       -8.30845,       -6.660439
-3.872763,       -5.420783,       -2.56892,       2.031618,       -3.238227,       -5.064803,       5.233483,       -4.377766,       -6.022151,       2.811689,       -4.700126,       0.253714,       2.930441,       -4.333355,       1.193853,       -3.017111
-12.129692,       -10.691159,       -9.374385,       -4.17847,       -8.274944,       -6.844967,       -4.377766,       -2.567657,       -7.133285,       -2.202178,       -9.152217,       -4.408261,       -4.332925,       -4.667911,       -6.485913,       -5.452164
-6.634942,       -7.185665,       -9.406571,       -3.799329,       -7.756967,       -12.88605,       -6.022151,       -7.133285,       -1.62429,       -2.567651,       -9.897864,       -6.197484,       -4.887126,       -6.962401,       -7.686211,       -10.173257
-5.146095,       -2.693172,       -6.293652,       2.877965,       -5.395756,       -3.745304,       2.811689,       -2.202178,       -2.567651,       5.500861,       -4.771045,       1.427335,       1.897792,       -4.166337,       0.331989,       -3.041702
-9.685586,       -10.389817,       -4.223295,       -4.933456,       -11.485655,       -12.052254,       -4.700126,       -9.152217,       -9.897864,       -4.771045,       -2.29705,       -5.53405,       -6.328384,       -10.552343,       -4.340169,       -5.026589
-6.501287,       -4.933444,       -7.129056,       0.739455,       -6.205384,       -7.113086,       0.253714,       -4.408261,       -6.197484,       1.427335,       -5.53405,       3.315793,       0.069174,       -4.608091,       -1.266092,       -2.591051
-2.497475,       -5.569785,       -2.829144,       1.880675,       -2.919729,       -6.478135,       2.930441,       -4.332925,       -4.887126,       1.897792,       -6.328384,       0.069174,       4.711882,       -3.529565,       1.037746,       -1.600713
-12.299043,       -8.901777,       -8.021957,       -4.553437,       -8.033201,       -8.957086,       -4.333355,       -4.667911,       -6.962401,       -4.166337,       -10.552343,       -4.608091,       -3.529565,       -4.126815,       -4.198914,       -5.919622
-3.557136,       -7.181424,       -5.836656,       -0.383889,       -6.197104,       -8.30845,       1.193853,       -6.485913,       -7.686211,       0.331989,       -4.340169,       -1.266092,       1.037746,       -4.198914,       3.184074,       -3.665114
-8.866536,       -8.400638,       -9.786978,       -2.477786,       -8.869873,       -6.660439,       -3.017111,       -5.452164,       -10.173257,       -3.041702,       -5.026589,       -2.591051,       -1.600713,       -5.919622,       -3.665114,       -0.735764
                    };
            return _data;
        }
    };
//    H: 3.4653
//    E: -2.6050


// ----------------------------------------------------------------------------
// Ribosum80_55 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.261476    0.218545    0.295682    0.224297
	struct Ribosum80_55 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum80_55>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.054913,       -1.482559,       -1.163728,       -1.059546
-1.482559,       1.084611,       -2.066975,       -0.778308
-1.163728,       -2.066975,       0.96067,       -1.417053
-1.059546,       -0.778308,       -1.417053,       1.482631
                    };
            return _data;
        }
    };
//    H: 0.6863
//    E: -0.1517

// ----------------------------------------------------------------------------
// Ribosum80_55N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum80_55N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum80_55N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.054913,       -1.482559,       -1.163728,       -1.059546,       -2.066975
-1.482559,       1.084611,       -2.066975,       -0.778308,       -2.066975
-1.163728,       -2.066975,       0.96067,       -1.417053,       -2.066975
-1.059546,       -0.778308,       -1.417053,       1.482631,       -2.066975
-2.066975,       -2.066975,       -2.066975,       -2.066975,       -2.066975
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum80_55d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum80_55d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum80_55d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.566834,       -5.577246,       -8.603826,       -4.555045,       -9.310048,       -13.872543,       -4.307133,       -11.785043,       -6.750919,       -5.195265,       -8.61565,       -5.567168,       -3.834603,       -12.257414,       -6.07756,       -7.989104
-5.577246,       -1.587419,       -9.11051,       -1.846452,       -8.91843,       -7.209579,       -5.336944,       -9.000768,       -9.202672,       -3.921683,       -10.923287,       -3.733507,       -4.466582,       -8.136739,       -6.652261,       -7.261738
-8.603826,       -9.11051,       -1.131987,       -4.628118,       -9.827805,       -13.351326,       -3.839161,       -10.599086,       -7.354864,       -5.269744,       -4.697397,       -6.518524,       -3.94396,       -9.085717,       -5.607709,       -10.860829
-4.555045,       -1.846452,       -4.628118,       4.358853,       -5.145406,       -5.211738,       1.810258,       -4.589661,       -4.282831,       2.864431,       -5.144677,       0.800595,       1.685928,       -4.406376,       -0.34034,       -2.658656
-9.310048,       -8.91843,       -9.827805,       -5.145406,       -4.887035,       -8.99424,       -3.093261,       -8.615655,       -7.50041,       -5.307251,       -9.705169,       -6.743603,       -2.494079,       -7.286534,       -5.41433,       -8.325221
-13.872543,       -7.209579,       -13.351326,       -5.211738,       -8.99424,       -3.222475,       -4.720313,       -4.737436,       -10.879265,       -2.959382,       -11.756511,       -6.670017,       -5.343519,       -6.599808,       -6.521958,       -4.412077
-4.307133,       -5.336944,       -3.839161,       1.810258,       -3.093261,       -4.720313,       5.342487,       -4.676935,       -5.384563,       2.296131,       -4.465431,       -0.033057,       2.864425,       -4.641405,       1.426102,       -3.100651
-11.785043,       -9.000768,       -10.599086,       -4.589661,       -8.615655,       -4.737436,       -4.676935,       -2.498597,       -7.577353,       -5.346015,       -12.602117,       -4.556385,       -4.151017,       -4.281194,       -6.13513,       -4.945487
-6.750919,       -9.202672,       -7.354864,       -4.282831,       -7.50041,       -10.879265,       -5.384563,       -7.577353,       -1.083594,       -3.796278,       -7.757467,       -5.22695,       -4.823017,       -6.913883,       -7.089719,       -10.315975
-5.195265,       -3.921683,       -5.269744,       2.864431,       -5.307251,       -2.959382,       2.296131,       -5.346015,       -3.796278,       5.605553,       -3.762804,       1.473475,       1.789313,       -4.391117,       0.093984,       -2.996374
-8.61565,       -10.923287,       -4.697397,       -5.144677,       -9.705169,       -11.756511,       -4.465431,       -12.602117,       -7.757467,       -3.762804,       -2.262824,       -4.925622,       -5.14514,       -11.372401,       -4.329331,       -11.259313
-5.567168,       -3.733507,       -6.518524,       0.800595,       -6.743603,       -6.670017,       -0.033057,       -4.556385,       -5.22695,       1.473475,       -4.925622,       3.31909,       -0.365511,       -4.735901,       -2.007195,       -3.748288
-3.834603,       -4.466582,       -3.94396,       1.685928,       -2.494079,       -5.343519,       2.864425,       -4.151017,       -4.823017,       1.789313,       -5.14514,       -0.365511,       4.783176,       -3.159827,       1.278904,       -3.003534
-12.257414,       -8.136739,       -9.085717,       -4.406376,       -7.286534,       -6.599808,       -4.641405,       -4.281194,       -6.913883,       -4.391117,       -11.372401,       -4.735901,       -3.159827,       -4.054391,       -4.484345,       -6.043253
-6.07756,       -6.652261,       -5.607709,       -0.34034,       -5.41433,       -6.521958,       1.426102,       -6.13513,       -7.089719,       0.093984,       -4.329331,       -2.007195,       1.278904,       -4.484345,       3.257128,       -3.788308
-7.989104,       -7.261738,       -10.860829,       -2.658656,       -8.325221,       -4.412077,       -3.100651,       -4.945487,       -10.315975,       -2.996374,       -11.259313,       -3.748288,       -3.003534,       -6.043253,       -3.788308,       -0.417025
                    };
            return _data;
        }
    };
//    H: 3.6005
//    E: -2.5469


// ----------------------------------------------------------------------------
// Ribosum70_85 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.259973    0.212331    0.281571    0.246126
	struct Ribosum70_85 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum70_85>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.3504,       -3.435831,       -3.163311,       -3.075563
-3.435831,       1.678248,       -3.782839,       -2.005927
-3.163311,       -3.782839,       1.367323,       -3.36172
-3.075563,       -2.005927,       -3.36172,       1.8381
                    };
            return _data;
        }
    };
//    H: 1.4662
//    E: -0.7277

// ----------------------------------------------------------------------------
// Ribosum70_85N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum70_85N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum70_85N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.3504,       -3.435831,       -3.163311,       -3.075563,       -3.782839
-3.435831,       1.678248,       -3.782839,       -2.005927,       -3.782839
-3.163311,       -3.782839,       1.367323,       -3.36172,       -3.782839
-3.075563,       -2.005927,       -3.36172,       1.8381,       -3.782839
-3.782839,       -3.782839,       -3.782839,       -3.782839,       -3.782839
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum70_85d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum70_85d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum70_85d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-0.528703,       -8.624881,       -7.531244,       -5.269331,       -10.178217,       -14.655632,       -6.772966,       -12.654148,       -6.097798,       -5.259527,       -9.650837,       -7.528902,       -5.825619,       -13.146568,       -7.782907,       -9.509798
-8.624881,       -0.059389,       -9.366203,       -3.605302,       -10.981761,       -8.196924,       -6.51095,       -11.439282,       -11.678101,       -3.616559,       -11.761888,       -6.500368,       -7.878459,       -9.232336,       -9.392704,       -9.269152
-7.531244,       -9.366203,       -0.518987,       -6.73554,       -11.395353,       -13.302746,       -5.558247,       -12.416879,       -7.876427,       -7.052112,       -6.314139,       -7.004963,       -7.854916,       -12.173865,       -6.289584,       -10.609315
-5.269331,       -3.605302,       -6.73554,       5.078631,       -8.27111,       -8.362788,       -0.814726,       -5.933043,       -8.947585,       1.017106,       -7.435594,       -0.599535,       -1.238659,       -6.892868,       -3.314442,       -3.604315
-10.178217,       -10.981761,       -11.395353,       -8.27111,       -2.006037,       -11.105712,       -3.981239,       -9.459429,       -9.64567,       -6.940602,       -8.719557,       -8.721722,       -2.990813,       -11.7813,       -6.421223,       -9.682542
-14.655632,       -8.196924,       -13.302746,       -8.362788,       -11.105712,       -0.763002,       -5.108405,       -6.33932,       -14.139177,       -4.138917,       -12.202371,       -8.568511,       -7.18842,       -9.539881,       -7.822017,       -5.390582
-6.772966,       -6.51095,       -5.558247,       -0.814726,       -3.981239,       -5.108405,       5.904389,       -4.956329,       -8.046161,       -0.016589,       -5.031485,       -1.90867,       0.939694,       -6.602085,       0.637284,       -4.888189
-12.654148,       -11.439282,       -12.416879,       -5.933043,       -9.459429,       -6.33932,       -4.956329,       -0.828712,       -13.097999,       -6.827696,       -11.994054,       -6.406713,       -6.605012,       -6.319613,       -8.206776,       -6.372727
-6.097798,       -11.678101,       -7.876427,       -8.947585,       -9.64567,       -14.139177,       -8.046161,       -13.097999,       -0.507173,       -5.879408,       -9.079133,       -5.986728,       -6.759452,       -13.752085,       -9.139319,       -13.665155
-5.259527,       -3.616559,       -7.052112,       1.017106,       -6.940602,       -4.138917,       -0.016589,       -6.827696,       -5.879408,       6.024304,       -4.784177,       0.517795,       -1.21057,       -4.412572,       -2.233691,       -5.305305
-9.650837,       -11.761888,       -6.314139,       -7.435594,       -8.719557,       -12.202371,       -5.031485,       -11.994054,       -9.079133,       -4.784177,       -1.914296,       -5.783536,       -7.420563,       -11.639376,       -4.989056,       -12.511972
-7.528902,       -6.500368,       -7.004963,       -0.599535,       -8.721722,       -8.568511,       -1.90867,       -6.406713,       -5.986728,       0.517795,       -5.783536,       3.825906,       -3.420057,       -4.888016,       -3.257574,       -5.174408
-5.825619,       -7.878459,       -7.854916,       -1.238659,       -2.990813,       -7.18842,       0.939694,       -6.605012,       -6.759452,       -1.21057,       -7.420563,       -3.420057,       5.228446,       -5.147113,       -0.561409,       -4.605534
-13.146568,       -9.232336,       -12.173865,       -6.892868,       -11.7813,       -9.539881,       -6.602085,       -6.319613,       -13.752085,       -4.412572,       -11.639376,       -4.888016,       -5.147113,       -1.597429,       -6.458014,       -5.01985
-7.782907,       -9.392704,       -6.289584,       -3.314442,       -6.421223,       -7.822017,       0.637284,       -8.206776,       -9.139319,       -2.233691,       -4.989056,       -3.257574,       -0.561409,       -6.458014,       3.783778,       -5.630842
-9.509798,       -9.269152,       -10.609315,       -3.604315,       -9.682542,       -5.390582,       -4.888189,       -6.372727,       -13.665155,       -5.305305,       -12.511972,       -5.174408,       -4.605534,       -5.01985,       -5.630842,       0.436099
                    };
            return _data;
        }
    };
//    H: 4.6220
//    E: -3.2056


// ----------------------------------------------------------------------------
// Ribosum90_50 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.258529    0.220366    0.299866    0.221239
	struct Ribosum90_50 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum90_50>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.110323,       -1.590594,       -1.19926,       -1.190794
-1.590594,       1.09004,       -2.056194,       -0.829306
-1.19926,       -2.056194,       0.95372,       -1.39614
-1.190794,       -0.829306,       -1.39614,       1.529796
                    };
            return _data;
        }
    };
//    H: 0.7220
//    E: -0.1660

// ----------------------------------------------------------------------------
// Ribosum90_50N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum90_50N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum90_50N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.110323,       -1.590594,       -1.19926,       -1.190794,       -2.056194
-1.590594,       1.09004,       -2.056194,       -0.829306,       -2.056194
-1.19926,       -2.056194,       0.95372,       -1.39614,       -2.056194
-1.190794,       -0.829306,       -1.39614,       1.529796,       -2.056194
-2.056194,       -2.056194,       -2.056194,       -2.056194,       -2.056194
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum90_50d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum90_50d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum90_50d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.520245,       -7.747752,       -8.506962,       -4.568047,       -9.314582,       -13.223935,       -3.904117,       -12.288575,       -6.943136,       -4.932918,       -9.07054,       -6.012486,       -3.278574,       -11.020368,       -4.535849,       -9.281267
-7.747752,       -2.038369,       -9.259676,       -1.892437,       -9.901246,       -9.171071,       -5.544088,       -10.413934,       -8.663202,       -3.284335,       -10.724093,       -4.364231,       -5.370275,       -8.619943,       -7.027226,       -7.95164
-8.506962,       -9.259676,       -0.979043,       -5.419912,       -9.732645,       -14.528258,       -3.305378,       -9.47729,       -8.996171,       -5.974783,       -4.978136,       -6.925664,       -3.541151,       -8.442357,       -5.779927,       -10.485918
-4.568047,       -1.892437,       -5.419912,       4.397595,       -5.698334,       -3.745772,       1.840955,       -4.497113,       -4.54178,       2.763338,       -5.313556,       0.657047,       1.744747,       -4.675183,       -0.510696,       -2.782337
-9.314582,       -9.901246,       -9.732645,       -5.698334,       -5.660711,       -10.971924,       -3.201357,       -7.859952,       -8.214664,       -5.51184,       -10.795847,       -6.747511,       -2.734199,       -7.188448,       -6.004577,       -8.460269
-13.223935,       -9.171071,       -14.528258,       -3.745772,       -10.971924,       -3.491615,       -4.891285,       -6.434661,       -12.660306,       -3.730608,       -12.432104,       -6.922975,       -6.225797,       -8.073879,       -8.093759,       -5.984663
-3.904117,       -5.544088,       -3.305378,       1.840955,       -3.201357,       -4.891285,       5.300108,       -4.597141,       -5.877811,       2.425289,       -4.685808,       -0.049107,       2.824279,       -4.579092,       1.254971,       -3.269453
-12.288575,       -10.413934,       -9.47729,       -4.497113,       -7.859952,       -6.434661,       -4.597141,       -2.359067,       -7.593099,       -3.255615,       -10.172544,       -5.189734,       -4.544633,       -4.210543,       -6.910032,       -4.929795
-6.943136,       -8.663202,       -8.996171,       -4.54178,       -8.214664,       -12.660306,       -5.877811,       -7.593099,       -1.278872,       -3.423164,       -9.13102,       -6.304948,       -5.017374,       -6.884789,       -7.650409,       -10.990843
-4.932918,       -3.284335,       -5.974783,       2.763338,       -5.51184,       -3.730608,       2.425289,       -3.255615,       -3.423164,       5.564203,       -4.438263,       1.303515,       1.742219,       -4.387716,       0.082898,       -3.380018
-9.07054,       -10.724093,       -4.978136,       -5.313556,       -10.795847,       -12.432104,       -4.685808,       -10.172544,       -9.13102,       -4.438263,       -2.037897,       -5.686702,       -5.976564,       -11.10196,       -4.342845,       -6.660649
-6.012486,       -4.364231,       -6.925664,       0.657047,       -6.747511,       -6.922975,       -0.049107,       -5.189734,       -6.304948,       1.303515,       -5.686702,       3.40945,       -0.276026,       -5.009187,       -1.753053,       -3.340677
-3.278574,       -5.370275,       -3.541151,       1.744747,       -2.734199,       -6.225797,       2.824279,       -4.544633,       -5.017374,       1.742219,       -5.976564,       -0.276026,       4.875868,       -3.256231,       1.060345,       -2.353373
-11.020368,       -8.619943,       -8.442357,       -4.675183,       -7.188448,       -8.073879,       -4.579092,       -4.210543,       -6.884789,       -4.387716,       -11.10196,       -5.009187,       -3.256231,       -3.603781,       -4.425594,       -5.746623
-4.535849,       -7.027226,       -5.779927,       -0.510696,       -6.004577,       -8.093759,       1.254971,       -6.910032,       -7.650409,       0.082898,       -4.342845,       -1.753053,       1.060345,       -4.425594,       3.309173,       -3.851099
-9.281267,       -7.95164,       -10.485918,       -2.782337,       -8.460269,       -5.984663,       -3.269453,       -4.929795,       -10.990843,       -3.380018,       -6.660649,       -3.340677,       -2.353373,       -5.746623,       -3.851099,       -0.30233
                    };
            return _data;
        }
    };
//    H: 3.6271
//    E: -2.6342


// ----------------------------------------------------------------------------
// Ribosum85_85 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.256257    0.218275    0.296364    0.229103
	struct Ribosum85_85 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum85_85>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.453496,       -3.588294,       -3.192274,       -3.106611
-3.588294,       1.561715,       -4.155538,       -2.291809
-3.192274,       -4.155538,       1.309292,       -3.434315
-3.106611,       -2.291809,       -3.434315,       1.945727
                    };
            return _data;
        }
    };
//    H: 1.5317
//    E: -0.7895

// ----------------------------------------------------------------------------
// Ribosum85_85N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum85_85N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum85_85N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.453496,       -3.588294,       -3.192274,       -3.106611,       -4.155538
-3.588294,       1.561715,       -4.155538,       -2.291809,       -4.155538
-3.192274,       -4.155538,       1.309292,       -3.434315,       -4.155538
-3.106611,       -2.291809,       -3.434315,       1.945727,       -4.155538
-4.155538,       -4.155538,       -4.155538,       -4.155538,       -4.155538
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum85_85d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum85_85d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum85_85d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.177812,       -8.956503,       -8.682964,       -5.562406,       -9.901618,       -13.031099,       -7.330102,       -14.297325,       -6.067185,       -6.569221,       -10.342496,       -7.583619,       -5.73984,       -12.556685,       -8.018795,       -10.71613
-8.956503,       -0.413384,       -9.616423,       -4.100383,       -12.193283,       -8.895078,       -7.044067,       -11.796016,       -12.815884,       -4.283392,       -13.100365,       -7.082605,       -7.044543,       -8.436632,       -10.172788,       -8.730091
-8.682964,       -9.616423,       -0.439951,       -7.104843,       -12.084671,       -14.777698,       -6.011456,       -11.824725,       -8.549749,       -7.382358,       -7.249543,       -7.812777,       -7.513757,       -11.320445,       -6.520881,       -9.218365
-5.562406,       -4.100383,       -7.104843,       5.145947,       -7.753371,       -8.29858,       -0.767413,       -5.637015,       -8.620876,       1.058024,       -7.557994,       -0.439569,       -0.761305,       -7.081558,       -2.845998,       -3.990903
-9.901618,       -12.193283,       -12.084671,       -7.753371,       -2.004629,       -10.600084,       -4.16248,       -8.571539,       -8.346877,       -7.557489,       -10.508943,       -9.660202,       -3.626587,       -9.850046,       -6.756387,       -9.280777
-13.031099,       -8.895078,       -14.777698,       -8.29858,       -10.600084,       -1.904514,       -5.611305,       -6.933367,       -11.94572,       -4.873023,       -13.911476,       -8.192139,       -7.9586,       -8.525011,       -8.677363,       -6.501658
-7.330102,       -7.044067,       -6.011456,       -0.767413,       -4.16248,       -5.611305,       5.779779,       -5.409349,       -8.226257,       -0.42711,       -5.765804,       -2.111883,       1.03733,       -7.125386,       0.485343,       -5.61016
-14.297325,       -11.796016,       -11.824725,       -5.637015,       -8.571539,       -6.933367,       -5.409349,       -0.711365,       -14.837125,       -7.073909,       -13.060111,       -6.347802,       -7.169592,       -5.683447,       -8.258749,       -6.734213
-6.067185,       -12.815884,       -8.549749,       -8.620876,       -8.346877,       -11.94572,       -8.226257,       -14.837125,       -0.664804,       -6.247972,       -9.239506,       -6.580688,       -6.967231,       -11.746524,       -9.246721,       -15.12656
-6.569221,       -4.283392,       -7.382358,       1.058024,       -7.557489,       -4.873023,       -0.42711,       -7.073909,       -6.247972,       5.909351,       -5.477023,       0.19585,       -1.245032,       -5.173008,       -2.393343,       -5.835355
-10.342496,       -13.100365,       -7.249543,       -7.557994,       -10.508943,       -13.911476,       -5.765804,       -13.060111,       -9.239506,       -5.477023,       -1.69517,       -6.011952,       -8.209674,       -11.808944,       -6.00415,       -13.134431
-7.583619,       -7.082605,       -7.812777,       -0.439569,       -9.660202,       -8.192139,       -2.111883,       -6.347802,       -6.580688,       0.19585,       -6.011952,       3.818165,       -3.029134,       -6.196286,       -3.237379,       -5.381889
-5.73984,       -7.044543,       -7.513757,       -0.761305,       -3.626587,       -7.9586,       1.03733,       -7.169592,       -6.967231,       -1.245032,       -8.209674,       -3.029134,       5.391036,       -5.475872,       -0.289324,       -4.418579
-12.556685,       -8.436632,       -11.320445,       -7.081558,       -9.850046,       -8.525011,       -7.125386,       -5.683447,       -11.746524,       -5.173008,       -11.808944,       -6.196286,       -5.475872,       -1.412519,       -6.440692,       -5.731906
-8.018795,       -10.172788,       -6.520881,       -2.845998,       -6.756387,       -8.677363,       0.485343,       -8.258749,       -9.246721,       -2.393343,       -6.00415,       -3.237379,       -0.289324,       -6.440692,       3.841803,       -5.488799
-10.71613,       -8.730091,       -9.218365,       -3.990903,       -9.280777,       -6.501658,       -5.61016,       -6.734213,       -15.12656,       -5.835355,       -13.134431,       -5.381889,       -4.418579,       -5.731906,       -5.488799,       0.391192
                    };
            return _data;
        }
    };
//    H: 4.6707
//    E: -3.3541


// ----------------------------------------------------------------------------
// Ribosum85_40 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.262729    0.217467    0.295656    0.224147
	struct Ribosum85_40 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum85_40>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.897981,       -1.241937,       -0.847266,       -0.846581
-1.241937,       0.953392,       -1.644401,       -0.587066
-0.847266,       -1.644401,       0.826264,       -1.042691
-0.846581,       -0.587066,       -1.042691,       1.322361
                    };
            return _data;
        }
    };
//    H: 0.5083
//    E: -0.0753

// ----------------------------------------------------------------------------
// Ribosum85_40N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum85_40N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum85_40N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.897981,       -1.241937,       -0.847266,       -0.846581,       -1.644401
-1.241937,       0.953392,       -1.644401,       -0.587066,       -1.644401
-0.847266,       -1.644401,       0.826264,       -1.042691,       -1.644401
-0.846581,       -0.587066,       -1.042691,       1.322361,       -1.644401
-1.644401,       -1.644401,       -1.644401,       -1.644401,       -1.644401
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum85_40d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum85_40d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum85_40d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-3.322176,       -7.471182,       -8.63687,       -4.552652,       -9.542267,       -12.907035,       -3.698399,       -12.497432,       -7.480525,       -5.246044,       -8.735376,       -6.014226,       -2.641243,       -11.698864,       -3.780394,       -8.633364
-7.471182,       -2.082522,       -9.405483,       -1.634554,       -10.013721,       -8.788775,       -5.078107,       -10.059963,       -7.552817,       -2.859245,       -10.113675,       -4.456086,       -4.795126,       -8.838915,       -6.733207,       -8.240171
-8.63687,       -9.405483,       -1.488888,       -5.33025,       -10.422315,       -14.404653,       -2.520773,       -9.174434,       -8.791955,       -5.619935,       -4.553011,       -6.824962,       -2.838676,       -8.109101,       -5.844158,       -9.721688
-4.552652,       -1.634554,       -5.33025,       4.105084,       -5.260515,       -2.73906,       2.144361,       -3.958893,       -3.73987,       2.984285,       -4.556081,       0.786968,       1.954509,       -4.155379,       -0.256158,       -2.408467
-9.542267,       -10.013721,       -10.422315,       -5.260515,       -5.854103,       -10.622768,       -2.825904,       -8.773077,       -7.273174,       -5.039292,       -11.28062,       -6.064262,       -2.645282,       -7.655118,       -5.836096,       -9.045141
-12.907035,       -8.788775,       -14.404653,       -2.73906,       -10.622768,       -4.294726,       -4.838239,       -6.351639,       -11.333581,       -3.345961,       -11.369675,       -6.749585,       -5.781619,       -8.028167,       -7.678234,       -6.041977
-3.698399,       -5.078107,       -2.520773,       2.144361,       -2.825904,       -4.838239,       5.190434,       -4.487131,       -5.318577,       2.901257,       -4.556092,       0.345264,       3.051804,       -4.345772,       1.332899,       -3.017751
-12.497432,       -10.059963,       -9.174434,       -3.958893,       -8.773077,       -6.351639,       -4.487131,       -3.087867,       -8.260958,       -2.280574,       -9.349039,       -4.481714,       -4.506413,       -4.612656,       -6.443519,       -5.971555
-7.480525,       -7.552817,       -8.791955,       -3.73987,       -7.273174,       -11.333581,       -5.318577,       -8.260958,       -1.760479,       -2.589527,       -8.653607,       -6.12323,       -4.668368,       -7.283787,       -7.591501,       -10.219622
-5.246044,       -2.859245,       -5.619935,       2.984285,       -5.039292,       -3.345961,       2.901257,       -2.280574,       -2.589527,       5.498039,       -4.184419,       1.504453,       2.114609,       -3.811795,       0.434317,       -2.712003
-8.735376,       -10.113675,       -4.553011,       -4.556081,       -11.28062,       -11.369675,       -4.556092,       -9.349039,       -8.653607,       -4.184419,       -2.075505,       -5.473436,       -5.780213,       -10.400548,       -4.361206,       -5.415704
-6.014226,       -4.456086,       -6.824962,       0.786968,       -6.064262,       -6.749585,       0.345264,       -4.481714,       -6.12323,       1.504453,       -5.473436,       3.236423,       0.111987,       -4.723027,       -1.30335,       -2.802898
-2.641243,       -4.795126,       -2.838676,       1.954509,       -2.645282,       -5.781619,       3.051804,       -4.506413,       -4.668368,       2.114609,       -5.780213,       0.111987,       4.619351,       -3.395918,       1.116473,       -1.69287
-11.698864,       -8.838915,       -8.109101,       -4.155379,       -7.655118,       -8.028167,       -4.345772,       -4.612656,       -7.283787,       -3.811795,       -10.400548,       -4.723027,       -3.395918,       -3.997758,       -4.220086,       -6.799838
-3.780394,       -6.733207,       -5.844158,       -0.256158,       -5.836096,       -7.678234,       1.332899,       -6.443519,       -7.591501,       0.434317,       -4.361206,       -1.30335,       1.116473,       -4.220086,       3.116458,       -3.645727
-8.633364,       -8.240171,       -9.721688,       -2.408467,       -9.045141,       -6.041977,       -3.017751,       -5.971555,       -10.219622,       -2.712003,       -5.415704,       -2.802898,       -1.69287,       -6.799838,       -3.645727,       -0.901867
                    };
            return _data;
        }
    };
//    H: 3.4082
//    E: -2.5283


// ----------------------------------------------------------------------------
// Ribosum65_60 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.256202    0.219617    0.295914    0.228266
	struct Ribosum65_60 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum65_60>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.17498,       -1.815564,       -1.453916,       -1.525742
-1.815564,       1.212563,       -2.335378,       -0.849285
-1.453916,       -2.335378,       1.074429,       -1.723635
-1.525742,       -0.849285,       -1.723635,       1.592686
                    };
            return _data;
        }
    };
//    H: 0.8503
//    E: -0.2341

// ----------------------------------------------------------------------------
// Ribosum65_60N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum65_60N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum65_60N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.17498,       -1.815564,       -1.453916,       -1.525742,       -2.335378
-1.815564,       1.212563,       -2.335378,       -0.849285,       -2.335378
-1.453916,       -2.335378,       1.074429,       -1.723635,       -2.335378
-1.525742,       -0.849285,       -1.723635,       1.592686,       -2.335378
-2.335378,       -2.335378,       -2.335378,       -2.335378,       -2.335378
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum65_60d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum65_60d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum65_60d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.366719,       -4.638793,       -8.458597,       -4.821006,       -9.632666,       -12.767947,       -4.649111,       -11.344662,       -6.471394,       -4.882354,       -10.031923,       -5.068486,       -4.152598,       -12.102975,       -6.497374,       -8.405678
-4.638793,       -1.037624,       -9.309151,       -1.892197,       -9.802161,       -8.698772,       -5.489164,       -10.058935,       -9.703515,       -3.613976,       -11.929589,       -5.089558,       -5.627333,       -8.27605,       -7.363716,       -6.903354
-8.458597,       -9.309151,       -0.879427,       -4.807122,       -10.818914,       -14.662372,       -4.442553,       -9.394159,       -7.415271,       -6.094423,       -4.614245,       -6.990253,       -5.799732,       -8.770415,       -5.750816,       -10.6051
-4.821006,       -1.892197,       -4.807122,       4.650782,       -5.670163,       -4.230296,       1.518384,       -5.338013,       -4.087108,       2.629499,       -5.402711,       0.554352,       1.354408,       -4.924832,       -0.733811,       -2.622257
-9.632666,       -9.802161,       -10.818914,       -5.670163,       -4.984751,       -6.989025,       -2.934323,       -7.889743,       -8.46139,       -5.244591,       -9.570164,       -6.320291,       -2.329532,       -7.598158,       -5.656412,       -8.057276
-12.767947,       -8.698772,       -14.662372,       -4.230296,       -6.989025,       -2.061579,       -4.015479,       -4.263496,       -11.730022,       -3.095516,       -10.460179,       -6.88006,       -4.016492,       -7.833858,       -5.212883,       -3.656236
-4.649111,       -5.489164,       -4.442553,       1.518384,       -2.934323,       -4.015479,       5.433742,       -4.684164,       -6.587217,       1.931328,       -4.355177,       -0.473318,       2.534382,       -4.57319,       1.20714,       -3.55313
-11.344662,       -10.058935,       -9.394159,       -5.338013,       -7.889743,       -4.263496,       -4.684164,       -1.664363,       -7.120476,       -5.665287,       -12.800984,       -5.744211,       -3.987436,       -4.327059,       -5.518678,       -4.504214
-6.471394,       -9.703515,       -7.415271,       -4.087108,       -8.46139,       -11.730022,       -6.587217,       -7.120476,       -0.963024,       -3.747725,       -9.353568,       -6.184019,       -5.698615,       -6.889591,       -7.864726,       -11.666964
-4.882354,       -3.613976,       -6.094423,       2.629499,       -5.244591,       -3.095516,       1.931328,       -5.665287,       -3.747725,       5.634987,       -3.882933,       1.278603,       1.311722,       -4.420097,       -0.262148,       -3.100577
-10.031923,       -11.929589,       -4.614245,       -5.402711,       -9.570164,       -10.460179,       -4.355177,       -12.800984,       -9.353568,       -3.882933,       -2.285524,       -5.427375,       -5.141254,       -11.164161,       -4.104632,       -11.613209
-5.068486,       -5.089558,       -6.990253,       0.554352,       -6.320291,       -6.88006,       -0.473318,       -5.744211,       -6.184019,       1.278603,       -5.427375,       3.460403,       -0.787726,       -5.096478,       -2.161683,       -4.243301
-4.152598,       -5.627333,       -5.799732,       1.354408,       -2.329532,       -4.016492,       2.534382,       -3.987436,       -5.698615,       1.311722,       -5.141254,       -0.787726,       4.979184,       -3.1397,       1.011131,       -3.341702
-12.102975,       -8.27605,       -8.770415,       -4.924832,       -7.598158,       -7.833858,       -4.57319,       -4.327059,       -6.889591,       -4.420097,       -11.164161,       -5.096478,       -3.1397,       -3.690066,       -5.323838,       -5.030279
-6.497374,       -7.363716,       -5.750816,       -0.733811,       -5.656412,       -5.212883,       1.20714,       -5.518678,       -7.864726,       -0.262148,       -4.104632,       -2.161683,       1.011131,       -5.323838,       3.403361,       -4.092637
-8.405678,       -6.903354,       -10.6051,       -2.622257,       -8.057276,       -3.656236,       -3.55313,       -4.504214,       -11.666964,       -3.100577,       -11.613209,       -4.243301,       -3.341702,       -5.030279,       -4.092637,       -0.234044
                    };
            return _data;
        }
    };
//    H: 3.7673
//    E: -2.6153


// ----------------------------------------------------------------------------
// Ribosum85_45 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.261954    0.218143    0.296610    0.223294
	struct Ribosum85_45 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum85_45>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.914619,       -1.260593,       -0.86099,       -0.870371
-1.260593,       0.958099,       -1.654344,       -0.597436
-0.86099,       -1.654344,       0.830269,       -1.056024
-0.870371,       -0.597436,       -1.056024,       1.337072
                    };
            return _data;
        }
    };
//    H: 0.5190
//    E: -0.0792

// ----------------------------------------------------------------------------
// Ribosum85_45N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum85_45N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum85_45N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.914619,       -1.260593,       -0.86099,       -0.870371,       -1.654344
-1.260593,       0.958099,       -1.654344,       -0.597436,       -1.654344
-0.86099,       -1.654344,       0.830269,       -1.056024,       -1.654344
-0.870371,       -0.597436,       -1.056024,       1.337072,       -1.654344
-1.654344,       -1.654344,       -1.654344,       -1.654344,       -1.654344
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum85_45d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum85_45d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum85_45d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-3.281828,       -7.440197,       -8.612885,       -4.58101,       -9.512296,       -12.897598,       -3.697281,       -12.464721,       -7.450796,       -5.254451,       -8.712813,       -6.081839,       -2.634968,       -11.673138,       -3.79242,       -8.598819
-7.440197,       -2.066139,       -9.385657,       -1.627316,       -9.990774,       -8.80683,       -5.121925,       -10.037785,       -7.540755,       -2.89794,       -10.100528,       -4.452651,       -4.801505,       -8.818602,       -6.72923,       -8.219913
-8.612885,       -9.385657,       -1.466349,       -5.315106,       -10.406152,       -14.390617,       -2.531416,       -9.17607,       -8.77748,       -5.614949,       -4.543655,       -6.805052,       -2.83272,       -8.097389,       -5.831877,       -9.914962
-4.58101,       -1.627316,       -5.315106,       4.126445,       -5.264428,       -2.767156,       2.130289,       -3.959661,       -3.723173,       2.974726,       -4.562247,       0.786661,       1.944669,       -4.161299,       -0.262553,       -2.412233
-9.512296,       -9.990774,       -10.406152,       -5.264428,       -5.831203,       -10.608818,       -2.830285,       -8.750551,       -7.291115,       -5.051601,       -11.274673,       -6.086046,       -2.63652,       -7.630931,       -5.838944,       -9.01221
-12.897598,       -8.80683,       -14.390617,       -2.767156,       -10.608818,       -4.289254,       -4.863817,       -6.336228,       -11.365741,       -3.354832,       -11.452166,       -6.752735,       -5.791733,       -8.012717,       -7.689714,       -6.01673
-3.697281,       -5.121925,       -2.531416,       2.130289,       -2.830285,       -4.863817,       5.183801,       -4.495636,       -5.315268,       2.879711,       -4.57908,       0.32856,       3.040014,       -4.359136,       1.327804,       -3.015407
-12.464721,       -10.037785,       -9.17607,       -3.959661,       -8.750551,       -6.336228,       -4.495636,       -3.062481,       -8.242586,       -2.289372,       -9.468671,       -4.480648,       -4.615693,       -4.588178,       -6.534872,       -5.93971
-7.450796,       -7.540755,       -8.77748,       -3.723173,       -7.291115,       -11.365741,       -5.315268,       -8.242586,       -1.737911,       -2.612922,       -8.964634,       -6.114467,       -4.673793,       -7.2604,       -7.575655,       -10.294282
-5.254451,       -2.89794,       -5.614949,       2.974726,       -5.051601,       -3.354832,       2.879711,       -2.289372,       -2.612922,       5.489245,       -4.213726,       1.494954,       2.090632,       -3.871137,       0.422815,       -2.736466
-8.712813,       -10.100528,       -4.543655,       -4.562247,       -11.274673,       -11.452166,       -4.57908,       -9.468671,       -8.964634,       -4.213726,       -2.072842,       -5.464314,       -5.805148,       -10.410224,       -4.357831,       -5.406181
-6.081839,       -4.452651,       -6.805052,       0.786661,       -6.086046,       -6.752735,       0.32856,       -4.480648,       -6.114467,       1.494954,       -5.464314,       3.24561,       0.095537,       -4.7271,       -1.319817,       -2.790039
-2.634968,       -4.801505,       -2.83272,       1.944669,       -2.63652,       -5.791733,       3.040014,       -4.615693,       -4.673793,       2.090632,       -5.805148,       0.095537,       4.64163,       -3.390245,       1.119106,       -1.696122
-11.673138,       -8.818602,       -8.097389,       -4.161299,       -7.630931,       -8.012717,       -4.359136,       -4.588178,       -7.2604,       -3.871137,       -10.410224,       -4.7271,       -3.390245,       -3.972648,       -4.258079,       -6.76518
-3.79242,       -6.72923,       -5.831877,       -0.262553,       -5.838944,       -7.689714,       1.327804,       -6.534872,       -7.575655,       0.422815,       -4.357831,       -1.319817,       1.119106,       -4.258079,       3.1287,       -3.681231
-8.598819,       -8.219913,       -9.914962,       -2.412233,       -9.01221,       -6.01673,       -3.015407,       -5.93971,       -10.294282,       -2.736466,       -5.406181,       -2.790039,       -1.696122,       -6.76518,       -3.681231,       -0.865665
                    };
            return _data;
        }
    };
//    H: 3.4143
//    E: -2.5328


// ----------------------------------------------------------------------------
// Ribosum60_25 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.300353    0.181319    0.249267    0.269062
	struct Ribosum60_25 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum60_25>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.283885,       -0.793613,       -0.439357,       -0.456163
-0.793613,       0.821023,       -1.558382,       -0.220837
-0.439357,       -1.558382,       0.761436,       -0.676687
-0.456163,       -0.220837,       -0.676687,       0.816852
                    };
            return _data;
        }
    };
//    H: 0.2388
//    E: 0.0097

// ----------------------------------------------------------------------------
// Ribosum60_25N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum60_25N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum60_25N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.283885,       -0.793613,       -0.439357,       -0.456163,       -1.558382
-0.793613,       0.821023,       -1.558382,       -0.220837,       -1.558382
-0.439357,       -1.558382,       0.761436,       -0.676687,       -1.558382
-0.456163,       -0.220837,       -0.676687,       0.816852,       -1.558382
-1.558382,       -1.558382,       -1.558382,       -1.558382,       -1.558382
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum60_25d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum60_25d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum60_25d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-5.098423,       -10.410262,       -10.86065,       -3.807574,       -12.027087,       -13.083378,       -4.950185,       -14.175085,       -8.660866,       -4.210729,       -11.170401,       -6.568258,       -3.387089,       -14.193279,       -4.796691,       -11.438357
-10.410262,       -3.356161,       -11.130318,       -2.245472,       -12.076255,       -9.482785,       -3.401646,       -12.076115,       -8.715214,       -1.44077,       -11.115864,       -5.906482,       -4.025393,       -10.099027,       -4.317795,       -10.391328
-10.86065,       -11.130318,       -2.888766,       -6.416353,       -12.19874,       -16.219464,       -2.496755,       -10.954915,       -10.967633,       -6.07049,       -5.318626,       -8.414721,       -2.041555,       -9.581118,       -7.241147,       -11.538968
-3.807574,       -2.245472,       -6.416353,       3.345098,       -5.636015,       -2.535078,       2.803694,       -5.047671,       -5.156818,       3.565792,       -5.647438,       0.905562,       2.014856,       -4.774656,       0.244376,       -3.601215
-12.027087,       -12.076255,       -12.19874,       -5.636015,       -7.443604,       -12.73346,       -3.314088,       -9.834727,       -9.296981,       -5.396198,       -12.338107,       -6.825868,       -3.459383,       -9.497736,       -7.455966,       -10.955783
-13.083378,       -9.482785,       -16.219464,       -2.535078,       -12.73346,       -3.994766,       -3.150918,       -7.918538,       -13.940153,       -3.733751,       -12.641494,       -7.509645,       -5.797408,       -10.030657,       -9.006671,       -8.260438
-4.950185,       -3.401646,       -2.496755,       2.803694,       -3.314088,       -3.150918,       5.644812,       -4.571116,       -6.180119,       3.460857,       -4.713099,       1.126177,       3.611527,       -3.87306,       1.522088,       -3.463257
-14.175085,       -12.076115,       -10.954915,       -5.047671,       -9.834727,       -7.918538,       -4.571116,       -4.166638,       -8.713816,       -3.225781,       -10.174948,       -5.376022,       -3.13059,       -6.250514,       -8.08621,       -7.564037
-8.660866,       -8.715214,       -10.967633,       -5.156818,       -9.296981,       -13.940153,       -6.180119,       -8.713816,       -3.185352,       -2.383807,       -10.894128,       -6.295235,       -3.337329,       -8.542931,       -8.650446,       -12.280216
-4.210729,       -1.44077,       -6.07049,       3.565792,       -5.396198,       -3.733751,       3.460857,       -3.225781,       -2.383807,       6.018004,       -3.441664,       1.806678,       2.895583,       -2.778582,       0.683813,       -4.08739
-11.170401,       -11.115864,       -5.318626,       -5.647438,       -12.338107,       -12.641494,       -4.713099,       -10.174948,       -10.894128,       -3.441664,       -2.925066,       -5.696797,       -6.259717,       -11.632263,       -5.403568,       -6.667922
-6.568258,       -5.906482,       -8.414721,       0.905562,       -6.825868,       -7.509645,       1.126177,       -5.376022,       -6.295235,       1.806678,       -5.696797,       2.760271,       0.506662,       -4.304427,       -1.563311,       -4.306997
-3.387089,       -4.025393,       -2.041555,       2.014856,       -3.459383,       -5.797408,       3.611527,       -3.13059,       -3.337329,       2.895583,       -6.259717,       0.506662,       3.846218,       -3.0389,       0.844261,       -2.182242
-14.193279,       -10.099027,       -9.581118,       -4.774656,       -9.497736,       -10.030657,       -3.87306,       -6.250514,       -8.542931,       -2.778582,       -11.632263,       -4.304427,       -3.0389,       -5.611467,       -3.233538,       -7.924958
-4.796691,       -4.317795,       -7.241147,       0.244376,       -7.455966,       -9.006671,       1.522088,       -8.08621,       -8.650446,       0.683813,       -5.403568,       -1.563311,       0.844261,       -3.233538,       2.547683,       -3.287404
-11.438357,       -10.391328,       -11.538968,       -3.601215,       -10.955783,       -8.260438,       -3.463257,       -7.564037,       -12.280216,       -4.08739,       -6.667922,       -4.306997,       -2.182242,       -7.924958,       -3.287404,       -2.305659
                    };
            return _data;
        }
    };
//    H: 3.3079
//    E: -2.8738


// ----------------------------------------------------------------------------
// Ribosum100_25 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.258308    0.219504    0.297310    0.224878
	struct Ribosum100_25 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum100_25>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.971671,       -1.343217,       -0.921788,       -1.005464
-1.343217,       1.001064,       -1.699044,       -0.613591
-0.921788,       -1.699044,       0.854147,       -1.111982
-1.005464,       -0.613591,       -1.111982,       1.382532
                    };
            return _data;
        }
    };
//    H: 0.5617
//    E: -0.0957

// ----------------------------------------------------------------------------
// Ribosum100_25N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum100_25N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum100_25N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.971671,       -1.343217,       -0.921788,       -1.005464,       -1.699044
-1.343217,       1.001064,       -1.699044,       -0.613591,       -1.699044
-0.921788,       -1.699044,       0.854147,       -1.111982,       -1.699044
-1.005464,       -0.613591,       -1.111982,       1.382532,       -1.699044
-1.699044,       -1.699044,       -1.699044,       -1.699044,       -1.699044
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum100_25d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum100_25d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum100_25d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.604645,       -8.470563,       -8.822189,       -5.075545,       -10.056671,       -13.442368,       -3.871417,       -12.105264,       -6.625421,       -5.21995,       -9.69168,       -6.49639,       -2.48501,       -12.263343,       -3.546296,       -8.867475
-8.470563,       -1.85357,       -9.59462,       -1.654552,       -10.552723,       -8.854252,       -5.438003,       -10.682421,       -7.17025,       -2.695725,       -10.383497,       -4.924699,       -5.590836,       -8.87773,       -7.166265,       -8.385429
-8.822189,       -9.59462,       -1.327118,       -6.067763,       -10.646974,       -15.13672,       -2.572185,       -9.357424,       -9.390651,       -6.29082,       -4.223349,       -7.125769,       -2.822798,       -8.011171,       -5.829573,       -9.76204
-5.075545,       -1.654552,       -6.067763,       4.252767,       -5.774248,       -2.374419,       2.030624,       -4.179064,       -3.792122,       2.87608,       -4.930131,       0.745252,       1.87854,       -4.540962,       -0.392702,       -2.456123
-10.056671,       -10.552723,       -10.646974,       -5.774248,       -6.205123,       -11.693921,       -3.240493,       -8.325364,       -7.764439,       -5.395295,       -11.479506,       -6.201344,       -2.907659,       -8.030163,       -6.206307,       -8.850458
-13.442368,       -8.854252,       -15.13672,       -2.374419,       -11.693921,       -3.456602,       -5.067212,       -6.862516,       -12.895778,       -3.754027,       -12.063889,       -7.102632,       -6.465319,       -8.946997,       -8.303615,       -6.641057
-3.871417,       -5.438003,       -2.572185,       2.030624,       -3.240493,       -5.067212,       5.222069,       -4.386954,       -6.029141,       2.801056,       -4.707853,       0.251253,       2.926758,       -4.345131,       1.189462,       -3.008435
-12.105264,       -10.682421,       -9.357424,       -4.179064,       -8.325364,       -6.862516,       -4.386954,       -2.559931,       -7.141504,       -2.20469,       -9.136017,       -4.410597,       -4.327115,       -4.669281,       -6.470759,       -5.429174
-6.625421,       -7.17025,       -9.390651,       -3.792122,       -7.764439,       -12.895778,       -6.029141,       -7.141504,       -1.623429,       -2.569771,       -9.906732,       -6.189448,       -4.869013,       -6.980707,       -7.672941,       -10.145796
-5.21995,       -2.695725,       -6.29082,       2.87608,       -5.395295,       -3.754027,       2.801056,       -2.20469,       -2.569771,       5.489061,       -4.774241,       1.424712,       1.889057,       -4.161804,       0.327564,       -3.034762
-9.69168,       -10.383497,       -4.223349,       -4.930131,       -11.479506,       -12.063889,       -4.707853,       -9.136017,       -9.906732,       -4.774241,       -2.305253,       -5.534224,       -6.32065,       -10.568347,       -4.34161,       -5.019912
-6.49639,       -4.924699,       -7.125769,       0.745252,       -6.201344,       -7.102632,       0.251253,       -4.410597,       -6.189448,       1.424712,       -5.534224,       3.320225,       0.064069,       -4.611892,       -1.261343,       -2.575165
-2.48501,       -5.590836,       -2.822798,       1.87854,       -2.907659,       -6.465319,       2.926758,       -4.327115,       -4.869013,       1.889057,       -6.32065,       0.064069,       4.723641,       -3.529918,       1.043982,       -1.581614
-12.263343,       -8.87773,       -8.011171,       -4.540962,       -8.030163,       -8.946997,       -4.345131,       -4.669281,       -6.980707,       -4.161804,       -10.568347,       -4.611892,       -3.529918,       -4.138184,       -4.199517,       -5.904415
-3.546296,       -7.166265,       -5.829573,       -0.392702,       -6.206307,       -8.303615,       1.189462,       -6.470759,       -7.672941,       0.327564,       -4.34161,       -1.261343,       1.043982,       -4.199517,       3.189382,       -3.644739
-8.867475,       -8.385429,       -9.76204,       -2.456123,       -8.850458,       -6.641057,       -3.008435,       -5.429174,       -10.145796,       -3.034762,       -5.019912,       -2.575165,       -1.581614,       -5.904415,       -3.644739,       -0.715714
                    };
            return _data;
        }
    };
//    H: 3.4639
//    E: -2.6040


// ----------------------------------------------------------------------------
// Ribosum45_80 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.255051    0.217153    0.290602    0.237194
	struct Ribosum45_80 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum45_80>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.35427,       -2.705193,       -2.445162,       -2.422928
-2.705193,       1.464897,       -3.161729,       -1.448115
-2.445162,       -3.161729,       1.240467,       -2.620187
-2.422928,       -1.448115,       -2.620187,       1.805203
                    };
            return _data;
        }
    };
//    H: 1.2510
//    E: -0.5038

// ----------------------------------------------------------------------------
// Ribosum45_80N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum45_80N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum45_80N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.35427,       -2.705193,       -2.445162,       -2.422928,       -3.161729
-2.705193,       1.464897,       -3.161729,       -1.448115,       -3.161729
-2.445162,       -3.161729,       1.240467,       -2.620187,       -3.161729
-2.422928,       -1.448115,       -2.620187,       1.805203,       -3.161729
-3.161729,       -3.161729,       -3.161729,       -3.161729,       -3.161729
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum45_80d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum45_80d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum45_80d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-0.728643,       -8.755288,       -8.168322,       -5.212229,       -9.826979,       -13.087183,       -6.058507,       -12.18597,       -5.644444,       -5.05411,       -10.057324,       -6.633372,       -4.858201,       -12.536467,       -7.099028,       -8.221433
-8.755288,       -0.603757,       -9.087979,       -2.462136,       -10.704977,       -7.952069,       -5.656127,       -11.353301,       -10.57143,       -3.690755,       -12.060409,       -5.894792,       -6.484262,       -8.62538,       -7.773635,       -7.735475
-8.168322,       -9.087979,       -0.526735,       -6.00154,       -10.314272,       -14.294807,       -4.776953,       -10.739833,       -8.735133,       -6.839953,       -5.006193,       -6.869246,       -7.268202,       -9.37305,       -5.783994,       -11.279192
-5.212229,       -2.462136,       -6.00154,       4.957013,       -7.048895,       -7.817891,       0.404538,       -5.680426,       -7.826489,       1.805408,       -7.055478,       0.190804,       0.097234,       -6.113882,       -2.052132,       -2.82695
-9.826979,       -10.704977,       -10.314272,       -7.048895,       -3.934324,       -10.9495,       -3.483671,       -8.823264,       -8.380435,       -6.359602,       -11.213789,       -8.283995,       -2.493953,       -9.782922,       -6.315052,       -7.481823
-13.087183,       -7.952069,       -14.294807,       -7.817891,       -10.9495,       -1.313388,       -4.890236,       -7.39989,       -13.860404,       -4.052486,       -12.563236,       -8.393916,       -7.850435,       -8.403666,       -9.025587,       -6.050432
-6.058507,       -5.656127,       -4.776953,       0.404538,       -3.483671,       -4.890236,       5.721511,       -4.822643,       -7.470039,       0.980449,       -4.783758,       -1.353197,       1.812708,       -5.314898,       0.872181,       -4.100238
-12.18597,       -11.353301,       -10.739833,       -5.680426,       -8.823264,       -7.39989,       -4.822643,       -0.950093,       -8.734527,       -6.938572,       -12.091954,       -6.515319,       -5.640259,       -4.948425,       -7.704325,       -5.904121
-5.644444,       -10.57143,       -8.735133,       -7.826489,       -8.380435,       -13.860404,       -7.470039,       -8.734527,       -0.641853,       -5.899542,       -9.74874,       -6.196304,       -6.406184,       -8.229137,       -8.402695,       -13.47357
-5.05411,       -3.690755,       -6.839953,       1.805408,       -6.359602,       -4.052486,       0.980449,       -6.938572,       -5.899542,       5.847059,       -5.131777,       0.722245,       0.110361,       -4.525135,       -1.224752,       -4.437115
-10.057324,       -12.060409,       -5.006193,       -7.055478,       -11.213789,       -12.563236,       -4.783758,       -12.091954,       -9.74874,       -5.131777,       -2.223614,       -5.773623,       -7.082744,       -11.748412,       -4.404356,       -11.787359
-6.633372,       -5.894792,       -6.869246,       0.190804,       -8.283995,       -8.393916,       -1.353197,       -6.515319,       -6.196304,       0.722245,       -5.773623,       3.704432,       -2.067413,       -4.581544,       -2.760701,       -5.024782
-4.858201,       -6.484262,       -7.268202,       0.097234,       -2.493953,       -7.850435,       1.812708,       -5.640259,       -6.406184,       0.110361,       -7.082744,       -2.067413,       5.182294,       -4.226524,       0.184508,       -4.121802
-12.536467,       -8.62538,       -9.37305,       -6.113882,       -9.782922,       -8.403666,       -5.314898,       -4.948425,       -8.229137,       -4.525135,       -11.748412,       -4.581544,       -4.226524,       -2.465441,       -6.000397,       -4.322994
-7.099028,       -7.773635,       -5.783994,       -2.052132,       -6.315052,       -9.025587,       0.872181,       -7.704325,       -8.402695,       -1.224752,       -4.404356,       -2.760701,       0.184508,       -6.000397,       3.655619,       -4.92846
-8.221433,       -7.735475,       -11.279192,       -2.82695,       -7.481823,       -6.050432,       -4.100238,       -5.904121,       -13.47357,       -4.437115,       -11.787359,       -5.024782,       -4.121802,       -4.322994,       -4.92846,       0.202042
                    };
            return _data;
        }
    };
//    H: 4.2840
//    E: -2.9775


// ----------------------------------------------------------------------------
// Ribosum95 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.259590    0.218935    0.296865    0.224609
	struct Ribosum95 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum95>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.287041,       -2.128932,       -1.725609,       -1.676047
-2.128932,       1.24784,       -2.741396,       -1.180593
-1.725609,       -2.741396,       1.100515,       -1.981781
-1.676047,       -1.180593,       -1.981781,       1.715053
                    };
            return _data;
        }
    };
//    H: 0.5525
//    E: -0.0920

// ----------------------------------------------------------------------------
// Ribosum95N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum95N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum95N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.287041,       -2.128932,       -1.725609,       -1.676047,       -2.741396
-2.128932,       1.24784,       -2.741396,       -1.180593,       -2.741396
-1.725609,       -2.741396,       1.100515,       -1.981781,       -2.741396
-1.676047,       -1.180593,       -1.981781,       1.715053,       -2.741396
-2.741396,       -2.741396,       -2.741396,       -2.741396,       -2.741396
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum95d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum95d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum95d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.049125,       -8.140916,       -8.564523,       -4.642317,       -9.494304,       -13.963556,       -4.973187,       -11.904117,       -6.445345,       -4.7655,       -9.689188,       -6.211986,       -4.510242,       -11.493558,       -6.168048,       -8.921083
-8.140916,       -1.948338,       -8.970537,       -2.120171,       -9.811402,       -9.164189,       -5.813112,       -10.87169,       -10.132513,       -3.753208,       -11.973868,       -4.960172,       -5.654945,       -8.623064,       -7.297499,       -7.851914
-8.564523,       -8.970537,       -0.672402,       -5.664705,       -10.238004,       -14.36653,       -4.698553,       -9.130974,       -9.332369,       -6.168817,       -5.536181,       -6.875638,       -5.775041,       -8.211192,       -5.718985,       -10.320024
-4.642317,       -2.120171,       -5.664705,       4.59259,       -5.932776,       -6.807882,       1.537726,       -5.450218,       -5.906939,       2.575737,       -5.900785,       0.472475,       1.486974,       -5.260437,       -0.691808,       -3.092774
-9.494304,       -9.811402,       -10.238004,       -5.932776,       -5.492818,       -11.0191,       -3.825067,       -7.700869,       -8.508083,       -6.046656,       -11.49826,       -8.112884,       -2.652865,       -7.179096,       -6.116595,       -8.314537
-13.963556,       -9.164189,       -14.36653,       -6.807882,       -11.0191,       -2.983277,       -5.383445,       -6.327028,       -13.359485,       -4.015446,       -11.826323,       -7.926334,       -7.224958,       -7.911109,       -8.653037,       -5.921825
-4.973187,       -5.813112,       -4.698553,       1.537726,       -3.825067,       -5.383445,       5.422584,       -4.874525,       -6.284798,       1.91471,       -4.579616,       -0.509474,       2.601876,       -4.611381,       1.189661,       -3.778193
-11.904117,       -10.87169,       -9.130974,       -5.450218,       -7.700869,       -6.327028,       -4.874525,       -1.9094,       -7.116699,       -5.925387,       -13.36296,       -5.926554,       -4.405002,       -3.828091,       -7.610977,       -4.630779
-6.445345,       -10.132513,       -9.332369,       -5.906939,       -8.508083,       -13.359485,       -6.284798,       -7.116699,       -0.973617,       -5.12617,       -9.231235,       -6.409237,       -5.992807,       -6.588393,       -7.55523,       -11.698869
-4.7655,       -3.753208,       -6.168817,       2.575737,       -6.046656,       -4.015446,       1.91471,       -5.925387,       -5.12617,       5.651405,       -4.548577,       1.079603,       1.3915,       -4.794123,       -0.21979,       -4.185096
-9.689188,       -11.973868,       -5.536181,       -5.900785,       -11.49826,       -11.826323,       -4.579616,       -13.36296,       -9.231235,       -4.548577,       -2.010217,       -5.732419,       -6.095941,       -11.3777,       -4.191764,       -11.09968
-6.211986,       -4.960172,       -6.875638,       0.472475,       -8.112884,       -7.926334,       -0.509474,       -5.926554,       -6.409237,       1.079603,       -5.732419,       3.543487,       -0.748799,       -5.214749,       -2.188616,       -4.950433
-4.510242,       -5.654945,       -5.775041,       1.486974,       -2.652865,       -7.224958,       2.601876,       -4.405002,       -5.992807,       1.3915,       -6.095941,       -0.748799,       5.039809,       -3.03849,       1.014024,       -3.511747
-11.493558,       -8.623064,       -8.211192,       -5.260437,       -7.179096,       -7.911109,       -4.611381,       -3.828091,       -6.588393,       -4.794123,       -11.3777,       -5.214749,       -3.03849,       -3.23036,       -4.796025,       -5.265323
-6.168048,       -7.297499,       -5.718985,       -0.691808,       -6.116595,       -8.653037,       1.189661,       -7.610977,       -7.55523,       -0.21979,       -4.191764,       -2.188616,       1.014024,       -4.796025,       3.433409,       -4.326561
-8.921083,       -7.851914,       -10.320024,       -3.092774,       -8.314537,       -5.921825,       -3.778193,       -4.630779,       -11.698869,       -4.185096,       -11.09968,       -4.950433,       -3.511747,       -5.265323,       -4.326561,       0.07487
                    };
            return _data;
        }
    };
//    H: 3.4585
//    E: -2.5897


// ----------------------------------------------------------------------------
// Ribosum95_85 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.253091    0.219341    0.295924    0.231644
	struct Ribosum95_85 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum95_85>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.446723,       -3.270342,       -2.937813,       -2.86001
-3.270342,       1.521467,       -3.78412,       -1.911395
-2.937813,       -3.78412,       1.274585,       -3.140876
-2.86001,       -1.911395,       -3.140876,       1.909782
                    };
            return _data;
        }
    };
//    H: 1.4423
//    E: -0.6833

// ----------------------------------------------------------------------------
// Ribosum95_85N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum95_85N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum95_85N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.446723,       -3.270342,       -2.937813,       -2.86001,       -3.78412
-3.270342,       1.521467,       -3.78412,       -1.911395,       -3.78412
-2.937813,       -3.78412,       1.274585,       -3.140876,       -3.78412
-2.86001,       -1.911395,       -3.140876,       1.909782,       -3.78412
-3.78412,       -3.78412,       -3.78412,       -3.78412,       -3.78412
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum95_85d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum95_85d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum95_85d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-0.872782,       -8.882614,       -8.476347,       -5.048352,       -9.719668,       -13.504111,       -6.347418,       -12.094171,       -5.940095,       -5.356605,       -10.782894,       -6.965513,       -5.168105,       -11.798946,       -6.997089,       -9.278548
-8.882614,       -0.558067,       -8.61603,       -3.447492,       -10.665599,       -8.024202,       -6.56852,       -11.250658,       -10.2124,       -4.006898,       -12.318498,       -6.060049,       -6.912618,       -8.734752,       -9.239432,       -8.59493
-8.476347,       -8.61603,       -0.418552,       -6.283885,       -10.960882,       -13.225282,       -5.337119,       -11.573177,       -8.693135,       -7.583237,       -6.517172,       -6.690869,       -7.496384,       -11.502351,       -5.831901,       -9.580896
-5.048352,       -3.447492,       -6.283885,       5.079456,       -7.649241,       -8.037019,       -0.230273,       -5.30925,       -8.174271,       1.446467,       -7.162539,       -0.28656,       -0.299375,       -6.638554,       -2.512308,       -3.3518
-9.719668,       -10.665599,       -10.960882,       -7.649241,       -3.235244,       -10.63271,       -4.003501,       -8.715663,       -8.663188,       -7.202227,       -12.099288,       -8.805776,       -2.918531,       -10.972815,       -5.969465,       -9.564221
-13.504111,       -8.024202,       -13.225282,       -8.037019,       -10.63271,       -1.667625,       -5.080514,       -7.563868,       -13.180028,       -4.263661,       -12.899714,       -8.636304,       -8.212491,       -8.437995,       -8.477286,       -5.641312
-6.347418,       -6.56852,       -5.337119,       -0.230273,       -4.003501,       -5.080514,       5.731018,       -4.913262,       -7.926792,       0.073398,       -5.218471,       -1.72934,       1.452752,       -6.535218,       0.694156,       -4.837222
-12.094171,       -11.250658,       -11.573177,       -5.30925,       -8.715663,       -7.563868,       -4.913262,       -0.976671,       -13.964625,       -6.873127,       -11.379263,       -6.181354,       -6.493042,       -5.23612,       -7.983121,       -6.209313
-5.940095,       -10.2124,       -8.693135,       -8.174271,       -8.663188,       -13.180028,       -7.926792,       -13.964625,       -0.72504,       -5.983048,       -9.170447,       -5.939615,       -6.857781,       -13.147752,       -9.116019,       -13.606373
-5.356605,       -4.006898,       -7.583237,       1.446467,       -7.202227,       -4.263661,       0.073398,       -6.873127,       -5.983048,       5.859796,       -5.233957,       0.453343,       -0.612627,       -4.693751,       -1.959387,       -5.133681
-10.782894,       -12.318498,       -6.517172,       -7.162539,       -12.099288,       -12.899714,       -5.218471,       -11.379263,       -9.170447,       -5.233957,       -1.93855,       -5.918423,       -7.340823,       -11.59282,       -5.113927,       -11.052956
-6.965513,       -6.060049,       -6.690869,       -0.28656,       -8.805776,       -8.636304,       -1.72934,       -6.181354,       -5.939615,       0.453343,       -5.918423,       3.791804,       -2.563545,       -5.488615,       -2.964729,       -5.134509
-5.168105,       -6.912618,       -7.496384,       -0.299375,       -2.918531,       -8.212491,       1.452752,       -6.493042,       -6.857781,       -0.612627,       -7.340823,       -2.563545,       5.315759,       -5.140825,       -0.071806,       -4.396283
-11.798946,       -8.734752,       -11.502351,       -6.638554,       -10.972815,       -8.437995,       -6.535218,       -5.23612,       -13.147752,       -4.693751,       -11.59282,       -5.488615,       -5.140825,       -1.840073,       -5.702021,       -4.902947
-6.997089,       -9.239432,       -5.831901,       -2.512308,       -5.969465,       -8.477286,       0.694156,       -7.983121,       -9.116019,       -1.959387,       -5.113927,       -2.964729,       -0.071806,       -5.702021,       3.769533,       -5.199198
-9.278548,       -8.59493,       -9.580896,       -3.3518,       -9.564221,       -5.641312,       -4.837222,       -6.209313,       -13.606373,       -5.133681,       -11.052956,       -5.134509,       -4.396283,       -4.902947,       -5.199198,       0.42188
                    };
            return _data;
        }
    };
//    H: 4.4989
//    E: -3.1487


// ----------------------------------------------------------------------------
// Ribosum80_30 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.267735    0.213314    0.288569    0.230382
	struct Ribosum80_30 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum80_30>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.750234,       -1.055907,       -0.72523,       -0.692629
-1.055907,       0.908279,       -1.516723,       -0.472302
-0.72523,       -1.516723,       0.789275,       -0.919001
-0.692629,       -0.472302,       -0.919001,       1.184236
                    };
            return _data;
        }
    };
//    H: 0.4140
//    E: -0.0414

// ----------------------------------------------------------------------------
// Ribosum80_30N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum80_30N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum80_30N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.750234,       -1.055907,       -0.72523,       -0.692629,       -1.516723
-1.055907,       0.908279,       -1.516723,       -0.472302,       -1.516723
-0.72523,       -1.516723,       0.789275,       -0.919001,       -1.516723
-0.692629,       -0.472302,       -0.919001,       1.184236,       -1.516723
-1.516723,       -1.516723,       -1.516723,       -1.516723,       -1.516723
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum80_30d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum80_30d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum80_30d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-3.604396,       -6.502939,       -9.404046,       -4.450515,       -10.192959,       -12.956841,       -3.611143,       -12.295948,       -7.535384,       -5.2674,       -8.516881,       -5.715854,       -3.009318,       -12.468809,       -3.867214,       -8.869203
-6.502939,       -1.767276,       -9.667401,       -1.646893,       -9.705308,       -7.720429,       -4.8016,       -9.712157,       -7.031873,       -2.896043,       -9.841884,       -4.008804,       -3.985185,       -8.556452,       -6.208298,       -8.178175
-9.404046,       -9.667401,       -1.924649,       -4.947836,       -10.335079,       -13.619089,       -2.220556,       -10.828632,       -8.181771,       -4.987535,       -4.453041,       -6.629915,       -2.706803,       -9.186986,       -5.642609,       -8.58368
-4.450515,       -1.646893,       -4.947836,       3.954354,       -4.964573,       -2.724904,       2.27225,       -3.57056,       -3.721189,       3.10977,       -4.524673,       0.870513,       2.008155,       -3.865621,       -0.135244,       -2.470905
-10.192959,       -9.705308,       -10.335079,       -4.964573,       -5.743268,       -9.75918,       -2.600903,       -8.335115,       -6.880505,       -4.399309,       -10.398321,       -5.486137,       -2.845187,       -7.556396,       -5.768073,       -9.034138
-12.956841,       -7.720429,       -13.619089,       -2.724904,       -9.75918,       -3.98282,       -4.068448,       -5.568915,       -10.366322,       -2.842943,       -10.783049,       -5.87005,       -4.795786,       -7.275013,       -6.604541,       -5.30589
-3.611143,       -4.8016,       -2.220556,       2.27225,       -2.600903,       -4.068448,       5.199338,       -4.322918,       -4.5214,       3.026606,       -4.311261,       0.461643,       3.146352,       -4.280005,       1.464505,       -2.658124
-12.295948,       -9.712157,       -10.828632,       -3.57056,       -8.335115,       -5.568915,       -4.322918,       -3.345124,       -8.134138,       -2.436422,       -8.333518,       -4.229534,       -3.967882,       -4.985232,       -5.678373,       -5.895221
-7.535384,       -7.031873,       -8.181771,       -3.721189,       -6.880505,       -10.366322,       -4.5214,       -8.134138,       -1.954172,       -2.431009,       -8.341455,       -5.353608,       -4.106675,       -7.57531,       -6.919421,       -9.433127
-5.2674,       -2.896043,       -4.987535,       3.10977,       -4.399309,       -2.842943,       3.026606,       -2.436422,       -2.431009,       5.516285,       -3.755589,       1.681929,       2.323257,       -3.738212,       0.629367,       -2.479369
-8.516881,       -9.841884,       -4.453041,       -4.524673,       -10.398321,       -10.783049,       -4.311261,       -8.333518,       -8.341455,       -3.755589,       -2.24284,       -5.172575,       -5.305411,       -10.301161,       -4.364705,       -5.960307
-5.715854,       -4.008804,       -6.629915,       0.870513,       -5.486137,       -5.87005,       0.461643,       -4.229534,       -5.353608,       1.681929,       -5.172575,       3.111245,       0.212083,       -4.725227,       -1.196835,       -3.027675
-3.009318,       -3.985185,       -2.706803,       2.008155,       -2.845187,       -4.795786,       3.146352,       -3.967882,       -4.106675,       2.323257,       -5.305411,       0.212083,       4.429725,       -3.412146,       1.203771,       -1.720773
-12.468809,       -8.556452,       -9.186986,       -3.865621,       -7.556396,       -7.275013,       -4.280005,       -4.985232,       -7.57531,       -3.738212,       -10.301161,       -4.725227,       -3.412146,       -4.713932,       -3.946934,       -6.953954
-3.867214,       -6.208298,       -5.642609,       -0.135244,       -5.768073,       -6.604541,       1.464505,       -5.678373,       -6.919421,       0.629367,       -4.364705,       -1.196835,       1.203771,       -3.946934,       2.978015,       -3.152793
-8.869203,       -8.178175,       -8.58368,       -2.470905,       -9.034138,       -5.30589,       -2.658124,       -5.895221,       -9.433127,       -2.479369,       -5.960307,       -3.027675,       -1.720773,       -6.953954,       -3.152793,       -1.291981
                    };
            return _data;
        }
    };
//    H: 3.3113
//    E: -2.4264


// ----------------------------------------------------------------------------
// Ribosum80_75 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.256085    0.219936    0.298189    0.225789
	struct Ribosum80_75 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum80_75>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.287178,       -2.141001,       -1.804589,       -1.739809
-2.141001,       1.289897,       -2.673247,       -1.260341
-1.804589,       -2.673247,       1.121351,       -2.067613
-1.739809,       -1.260341,       -2.067613,       1.738893
                    };
            return _data;
        }
    };
//    H: 1.0300
//    E: -0.3354

// ----------------------------------------------------------------------------
// Ribosum80_75N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum80_75N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum80_75N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.287178,       -2.141001,       -1.804589,       -1.739809,       -2.673247
-2.141001,       1.289897,       -2.673247,       -1.260341,       -2.673247
-1.804589,       -2.673247,       1.121351,       -2.067613,       -2.673247
-1.739809,       -1.260341,       -2.067613,       1.738893,       -2.673247
-2.673247,       -2.673247,       -2.673247,       -2.673247,       -2.673247
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum80_75d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum80_75d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum80_75d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.493935,       -6.588836,       -8.500021,       -4.18278,       -10.042566,       -14.091917,       -5.234852,       -11.921668,       -7.046221,       -5.307709,       -9.355654,       -5.097424,       -4.372992,       -13.799867,       -7.068243,       -6.593389
-6.588836,       -1.164718,       -9.860085,       -2.067186,       -9.746553,       -8.882265,       -6.221344,       -11.482,       -11.846948,       -3.947092,       -11.323873,       -5.495331,       -5.425515,       -8.741805,       -7.150313,       -6.274099
-8.500021,       -9.860085,       -0.826844,       -6.332342,       -9.819573,       -16.077085,       -4.339185,       -10.301193,       -9.679349,       -6.344155,       -4.732347,       -7.651681,       -5.620412,       -8.516861,       -5.466282,       -11.23657
-4.18278,       -2.067186,       -6.332342,       4.755975,       -6.236237,       -7.004119,       1.197294,       -5.620412,       -5.528984,       2.359674,       -6.197956,       0.48956,       0.984262,       -5.181461,       -1.050359,       -2.3287
-10.042566,       -9.746553,       -9.819573,       -6.236237,       -3.545885,       -11.478672,       -3.384932,       -8.191062,       -6.763225,       -6.336659,       -11.282867,       -7.403618,       -2.446434,       -7.219356,       -5.924474,       -8.234853
-14.091917,       -8.882265,       -16.077085,       -7.004119,       -11.478672,       -2.479614,       -5.599787,       -5.202217,       -11.47081,       -3.813375,       -10.906417,       -8.616941,       -6.721962,       -8.847798,       -8.653651,       -4.629062
-5.234852,       -6.221344,       -4.339185,       1.197294,       -3.384932,       -5.599787,       5.517046,       -4.807085,       -6.546967,       1.643471,       -4.47519,       -0.662007,       2.388534,       -5.186156,       1.166761,       -4.009255
-11.921668,       -11.482,       -10.301193,       -5.620412,       -8.191062,       -5.202217,       -4.807085,       -1.641152,       -7.043837,       -6.755622,       -11.846753,       -5.637494,       -4.207099,       -4.544631,       -7.791237,       -5.013842
-7.046221,       -11.846948,       -9.679349,       -5.528984,       -6.763225,       -11.47081,       -6.546967,       -7.043837,       -0.972969,       -5.73763,       -6.26696,       -6.319974,       -6.186459,       -5.977221,       -7.711385,       -11.743427
-5.307709,       -3.947092,       -6.344155,       2.359674,       -6.336659,       -3.813375,       1.643471,       -6.755622,       -5.73763,       5.699463,       -4.244981,       1.049778,       1.066024,       -4.951512,       -0.385619,       -3.992258
-9.355654,       -11.323873,       -4.732347,       -6.197956,       -11.282867,       -10.906417,       -4.47519,       -11.846753,       -6.26696,       -4.244981,       -2.130091,       -5.051495,       -6.121692,       -12.153367,       -4.183017,       -10.720435
-5.097424,       -5.495331,       -7.651681,       0.48956,       -7.403618,       -8.616941,       -0.662007,       -5.637494,       -6.319974,       1.049778,       -5.051495,       3.54034,       -1.076911,       -5.398403,       -2.105035,       -5.261067
-4.372992,       -5.425515,       -5.620412,       0.984262,       -2.446434,       -6.721962,       2.388534,       -4.207099,       -6.186459,       1.066024,       -6.121692,       -1.076911,       5.098306,       -3.268615,       0.756531,       -3.38199
-13.799867,       -8.741805,       -8.516861,       -5.181461,       -7.219356,       -8.847798,       -5.186156,       -4.544631,       -5.977221,       -4.951512,       -12.153367,       -5.398403,       -3.268615,       -3.134001,       -5.352847,       -5.203088
-7.068243,       -7.150313,       -5.466282,       -1.050359,       -5.924474,       -8.653651,       1.166761,       -7.791237,       -7.711385,       -0.385619,       -4.183017,       -2.105035,       0.756531,       -5.352847,       3.494854,       -4.218155
-6.593389,       -6.274099,       -11.23657,       -2.3287,       -8.234853,       -4.629062,       -4.009255,       -5.013842,       -11.743427,       -3.992258,       -10.720435,       -5.261067,       -3.38199,       -5.203088,       -4.218155,       0.051696
                    };
            return _data;
        }
    };
//    H: 3.9588
//    E: -2.7900


// ----------------------------------------------------------------------------
// Ribosum75_85 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.260101    0.211976    0.283693    0.244230
	struct Ribosum75_85 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum75_85>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.358533,       -3.46033,       -3.160019,       -3.083174
-3.46033,       1.671814,       -3.833758,       -2.071715
-3.160019,       -3.833758,       1.365537,       -3.376906
-3.083174,       -2.071715,       -3.376906,       1.846932
                    };
            return _data;
        }
    };
//    H: 1.4757
//    E: -0.7368

// ----------------------------------------------------------------------------
// Ribosum75_85N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum75_85N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum75_85N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.358533,       -3.46033,       -3.160019,       -3.083174,       -3.833758
-3.46033,       1.671814,       -3.833758,       -2.071715,       -3.833758
-3.160019,       -3.833758,       1.365537,       -3.376906,       -3.833758
-3.083174,       -2.071715,       -3.376906,       1.846932,       -3.833758
-3.833758,       -3.833758,       -3.833758,       -3.833758,       -3.833758
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum75_85d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum75_85d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum75_85d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-0.600365,       -8.773382,       -7.691625,       -5.34377,       -10.02657,       -14.805117,       -6.917682,       -12.793158,       -6.214458,       -5.41933,       -9.815831,       -7.672234,       -5.9538,       -13.280024,       -7.926364,       -9.641704
-8.773382,       -0.069791,       -9.510321,       -3.685223,       -11.121216,       -8.281317,       -6.385807,       -11.574164,       -11.811535,       -3.604395,       -11.932485,       -6.584835,       -7.535583,       -9.350518,       -9.49034,       -9.124249
-7.691625,       -9.510321,       -0.50175,       -6.704313,       -11.531164,       -13.459454,       -5.62112,       -12.548225,       -7.424641,       -7.073095,       -6.350658,       -6.982598,       -7.66682,       -12.306522,       -6.433019,       -10.749259
-5.34377,       -3.685223,       -6.704313,       5.088479,       -8.203706,       -7.85964,       -0.813215,       -5.869193,       -9.031737,       1.021625,       -7.316026,       -0.650252,       -1.214304,       -6.934604,       -3.330683,       -3.670327
-10.02657,       -11.121216,       -11.531164,       -8.203706,       -1.952381,       -10.38482,       -3.902797,       -9.581859,       -9.292997,       -6.596887,       -8.899031,       -8.808534,       -3.067469,       -11.9011,       -6.406073,       -9.460649
-14.805117,       -8.281317,       -13.459454,       -7.85964,       -10.38482,       -0.87443,       -5.061743,       -6.476224,       -11.470944,       -4.03961,       -12.368356,       -8.048423,       -7.123411,       -9.368532,       -7.892427,       -5.516308
-6.917682,       -6.385807,       -5.62112,       -0.813215,       -3.902797,       -5.061743,       5.897845,       -5.081118,       -8.088331,       -0.025872,       -5.092237,       -2.011111,       0.962483,       -6.437717,       0.594508,       -4.952702
-12.793158,       -11.574164,       -12.548225,       -5.869193,       -9.581859,       -6.476224,       -5.081118,       -0.809126,       -13.247774,       -6.921318,       -12.152705,       -6.364691,       -6.728033,       -6.406011,       -8.334828,       -6.474694
-6.214458,       -11.811535,       -7.424641,       -9.031737,       -9.292997,       -11.470944,       -8.088331,       -13.247774,       -0.513716,       -5.911167,       -8.575944,       -5.785155,       -6.575443,       -13.882578,       -8.723623,       -13.804494
-5.41933,       -3.604395,       -7.073095,       1.021625,       -6.596887,       -4.03961,       -0.025872,       -6.921318,       -5.911167,       6.011116,       -4.765822,       0.435946,       -1.199821,       -4.36846,       -2.308882,       -5.365468
-9.815831,       -11.932485,       -6.350658,       -7.316026,       -8.899031,       -12.368356,       -5.092237,       -12.152705,       -8.575944,       -4.765822,       -1.739529,       -5.600673,       -7.098335,       -11.79199,       -5.093245,       -12.636237
-7.672234,       -6.584835,       -6.982598,       -0.650252,       -8.808534,       -8.048423,       -2.011111,       -6.364691,       -5.785155,       0.435946,       -5.600673,       3.832194,       -3.516038,       -4.948064,       -3.285985,       -5.144407
-5.9538,       -7.535583,       -7.66682,       -1.214304,       -3.067469,       -7.123411,       0.962483,       -6.728033,       -6.575443,       -1.199821,       -7.098335,       -3.516038,       5.245249,       -5.272253,       -0.541675,       -4.648725
-13.280024,       -9.350518,       -12.306522,       -6.934604,       -11.9011,       -9.368532,       -6.437717,       -6.406011,       -13.882578,       -4.36846,       -11.79199,       -4.948064,       -5.272253,       -1.618135,       -6.427417,       -5.130974
-7.926364,       -9.49034,       -6.433019,       -3.330683,       -6.406073,       -7.892427,       0.594508,       -8.334828,       -8.723623,       -2.308882,       -5.093245,       -3.285985,       -0.541675,       -6.427417,       3.793554,       -5.565084
-9.641704,       -9.124249,       -10.749259,       -3.670327,       -9.460649,       -5.516308,       -4.952702,       -6.474694,       -13.804494,       -5.365468,       -12.636237,       -5.144407,       -4.648725,       -5.130974,       -5.565084,       0.419512
                    };
            return _data;
        }
    };
//    H: 4.6288
//    E: -3.2004


// ----------------------------------------------------------------------------
// Ribosum80_60 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.260366    0.219398    0.297044    0.223191
	struct Ribosum80_60 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum80_60>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.112826,       -1.582043,       -1.277252,       -1.168913
-1.582043,       1.11659,       -2.182643,       -0.868072
-1.277252,       -2.182643,       0.988185,       -1.520522
-1.168913,       -0.868072,       -1.520522,       1.542618
                    };
            return _data;
        }
    };
//    H: 0.7511
//    E: -0.1816

// ----------------------------------------------------------------------------
// Ribosum80_60N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum80_60N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum80_60N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.112826,       -1.582043,       -1.277252,       -1.168913,       -2.182643
-1.582043,       1.11659,       -2.182643,       -0.868072,       -2.182643
-1.277252,       -2.182643,       0.988185,       -1.520522,       -2.182643
-1.168913,       -0.868072,       -1.520522,       1.542618,       -2.182643
-2.182643,       -2.182643,       -2.182643,       -2.182643,       -2.182643
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum80_60d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum80_60d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum80_60d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.478732,       -5.948466,       -8.388616,       -4.467841,       -9.465565,       -14.105258,       -4.519232,       -11.825528,       -6.522827,       -5.228548,       -8.385949,       -5.80435,       -3.844391,       -12.400633,       -6.158825,       -7.738174
-5.948466,       -1.655125,       -9.003574,       -1.867665,       -8.754032,       -7.437593,       -5.454672,       -9.573683,       -9.343313,       -3.962475,       -11.012728,       -4.136676,       -4.580107,       -8.047384,       -6.642259,       -7.34514
-8.388616,       -9.003574,       -1.044348,       -4.944547,       -9.9624,       -13.742507,       -3.965777,       -10.401324,       -7.785569,       -5.381702,       -4.774534,       -6.506666,       -4.385751,       -8.885313,       -5.695107,       -10.890259
-4.467841,       -1.867665,       -4.944547,       4.425062,       -5.175168,       -5.748113,       1.726709,       -4.708066,       -4.491209,       2.793727,       -5.297963,       0.772787,       1.597752,       -4.513949,       -0.399803,       -2.665647
-9.465565,       -8.754032,       -9.9624,       -5.175168,       -4.783044,       -9.412742,       -3.188661,       -8.689378,       -7.438331,       -5.579815,       -10.424449,       -7.191619,       -2.45701,       -7.184571,       -5.410843,       -8.232493
-14.105258,       -7.437593,       -13.742507,       -5.748113,       -9.412742,       -3.124026,       -5.146743,       -4.910036,       -10.95737,       -3.175684,       -11.925405,       -7.410731,       -6.130829,       -6.494214,       -7.370958,       -4.528582
-4.519232,       -5.454672,       -3.965777,       1.726709,       -3.188661,       -5.146743,       5.361971,       -4.72803,       -5.474932,       2.190904,       -4.49358,       -0.131377,       2.794958,       -4.651162,       1.399463,       -3.18326
-11.825528,       -9.573683,       -10.401324,       -4.708066,       -8.689378,       -4.910036,       -4.72803,       -2.344765,       -7.364792,       -5.937095,       -12.681768,       -4.868511,       -4.386307,       -4.09643,       -6.560335,       -4.88386
-6.522827,       -9.343313,       -7.785569,       -4.491209,       -7.438331,       -10.95737,       -5.474932,       -7.364792,       -1.028781,       -4.157995,       -7.607811,       -5.341423,       -4.925105,       -6.699587,       -6.980585,       -10.314363
-5.228548,       -3.962475,       -5.381702,       2.793727,       -5.579815,       -3.175684,       2.190904,       -5.937095,       -4.157995,       5.617649,       -3.952589,       1.39244,       1.694277,       -4.475786,       0.053911,       -3.188391
-8.385949,       -11.012728,       -4.774534,       -5.297963,       -10.424449,       -11.925405,       -4.49358,       -12.681768,       -7.607811,       -3.952589,       -2.222277,       -5.046102,       -5.343885,       -11.576584,       -4.28863,       -11.347232
-5.80435,       -4.136676,       -6.506666,       0.772787,       -7.191619,       -7.410731,       -0.131377,       -4.868511,       -5.341423,       1.39244,       -5.046102,       3.369157,       -0.462993,       -4.941879,       -2.055138,       -3.93971
-3.844391,       -4.580107,       -4.385751,       1.597752,       -2.45701,       -6.130829,       2.794958,       -4.386307,       -4.925105,       1.694277,       -5.343885,       -0.462993,       4.848398,       -3.104871,       1.261143,       -3.078828
-12.400633,       -8.047384,       -8.885313,       -4.513949,       -7.184571,       -6.494214,       -4.651162,       -4.09643,       -6.699587,       -4.475786,       -11.576584,       -4.941879,       -3.104871,       -3.826412,       -4.777387,       -5.874265
-6.158825,       -6.642259,       -5.695107,       -0.399803,       -5.410843,       -7.370958,       1.399463,       -6.560335,       -6.980585,       0.053911,       -4.28863,       -2.055138,       1.261143,       -4.777387,       3.294973,       -4.052067
-7.738174,       -7.34514,       -10.890259,       -2.665647,       -8.232493,       -4.528582,       -3.18326,       -4.88386,       -10.314363,       -3.188391,       -11.347232,       -3.93971,       -3.078828,       -5.874265,       -4.052067,       -0.243687
                    };
            return _data;
        }
    };
//    H: 3.6606
//    E: -2.5967


// ----------------------------------------------------------------------------
// Ribosum70_40 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.278720    0.202982    0.273753    0.244546
	struct Ribosum70_40 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum70_40>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.514492,       -0.850585,       -0.595174,       -0.545407
-0.850585,       0.873093,       -1.347913,       -0.323058
-0.595174,       -1.347913,       0.777726,       -0.798819
-0.545407,       -0.323058,       -0.798819,       0.96773
                    };
            return _data;
        }
    };
//    H: 0.3047
//    E: -0.0053

// ----------------------------------------------------------------------------
// Ribosum70_40N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum70_40N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum70_40N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.514492,       -0.850585,       -0.595174,       -0.545407,       -1.347913
-0.850585,       0.873093,       -1.347913,       -0.323058,       -1.347913
-0.595174,       -1.347913,       0.777726,       -0.798819,       -1.347913
-0.545407,       -0.323058,       -0.798819,       0.96773,       -1.347913
-1.347913,       -1.347913,       -1.347913,       -1.347913,       -1.347913
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum70_40d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum70_40d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum70_40d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-3.61948,       -5.636285,       -10.731925,       -4.074661,       -11.704311,       -12.429969,       -3.845061,       -11.980362,       -9.300832,       -5.064475,       -12.138389,       -5.664027,       -3.510552,       -12.423436,       -3.536207,       -10.730503
-5.636285,       -1.863725,       -8.81055,       -1.76512,       -10.471458,       -6.21126,       -4.098471,       -9.340484,       -7.903341,       -2.551182,       -9.708514,       -3.810558,       -3.275548,       -9.6466,       -5.525841,       -8.578838
-10.731925,       -8.81055,       -2.751477,       -4.447761,       -11.16211,       -12.623966,       -1.875382,       -10.795072,       -7.144354,       -4.209563,       -5.064081,       -6.931339,       -2.515135,       -9.87146,       -5.723722,       -7.821932
-4.074661,       -1.76512,       -4.447761,       3.815538,       -5.432519,       -2.478637,       2.378175,       -3.228007,       -3.453948,       3.275322,       -4.933429,       0.961078,       2.029735,       -4.368664,       -0.086992,       -2.9535
-11.704311,       -10.471458,       -11.16211,       -5.432519,       -5.867332,       -9.482737,       -2.230125,       -8.38187,       -9.157777,       -4.335812,       -11.056501,       -6.379793,       -3.119032,       -8.826841,       -6.053592,       -8.92064
-12.429969,       -6.21126,       -12.623966,       -2.478637,       -9.482737,       -3.829521,       -3.461791,       -4.78536,       -9.189526,       -2.599445,       -10.701593,       -5.420535,       -4.260657,       -7.233863,       -6.022982,       -5.494642
-3.845061,       -4.098471,       -1.875382,       2.378175,       -2.230125,       -3.461791,       5.273717,       -4.135706,       -4.438793,       3.158465,       -3.922368,       0.613736,       3.341084,       -3.81875,       1.597863,       -2.139284
-11.980362,       -9.340484,       -10.795072,       -3.228007,       -8.38187,       -4.78536,       -4.135706,       -3.389951,       -8.580426,       -2.544974,       -6.799368,       -4.267566,       -3.306278,       -5.039786,       -5.194988,       -6.134293
-9.300832,       -7.903341,       -7.144354,       -3.453948,       -9.157777,       -9.189526,       -4.438793,       -8.580426,       -2.294053,       -2.009219,       -10.264292,       -4.739245,       -3.582979,       -8.439844,       -7.738902,       -8.368735
-5.064475,       -2.551182,       -4.209563,       3.275322,       -4.335812,       -2.599445,       3.158465,       -2.544974,       -2.009219,       5.626219,       -3.782482,       1.901785,       2.550791,       -3.460343,       0.827814,       -2.461357
-12.138389,       -9.708514,       -5.064081,       -4.933429,       -11.056501,       -10.701593,       -3.922368,       -6.799368,       -10.264292,       -3.782482,       -2.588624,       -4.805122,       -5.070807,       -9.662461,       -4.295805,       -7.773217
-5.664027,       -3.810558,       -6.931339,       0.961078,       -6.379793,       -5.420535,       0.613736,       -4.267566,       -4.739245,       1.901785,       -4.805122,       2.982922,       0.294576,       -4.661759,       -1.049846,       -3.225106
-3.510552,       -3.275548,       -2.515135,       2.029735,       -3.119032,       -4.260657,       3.341084,       -3.306278,       -3.582979,       2.550791,       -5.070807,       0.294576,       4.157581,       -2.96438,       1.143742,       -1.791042
-12.423436,       -9.6466,       -9.87146,       -4.368664,       -8.826841,       -7.233863,       -3.81875,       -5.039786,       -8.439844,       -3.460343,       -9.662461,       -4.661759,       -2.96438,       -4.919261,       -3.351638,       -7.153551
-3.536207,       -5.525841,       -5.723722,       -0.086992,       -6.053592,       -6.022982,       1.597863,       -5.194988,       -7.738902,       0.827814,       -4.295805,       -1.049846,       1.143742,       -3.351638,       2.796768,       -2.745327
-10.730503,       -8.578838,       -7.821932,       -2.9535,       -8.92064,       -5.494642,       -2.139284,       -6.134293,       -8.368735,       -2.461357,       -7.773217,       -3.225106,       -1.791042,       -7.153551,       -2.745327,       -1.520796
                    };
            return _data;
        }
    };
//    H: 3.2220
//    E: -2.4534


// ----------------------------------------------------------------------------
// Ribosum80_95 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.284233    0.195104    0.268677    0.251986
	struct Ribosum80_95 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum80_95>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.270907,       -5.620194,       -5.146776,       -5.183942
-5.620194,       1.963145,       -5.845429,       -4.297779
-5.146776,       -5.845429,       1.587734,       -5.650039
-5.183942,       -4.297779,       -5.650039,       1.823033
                    };
            return _data;
        }
    };
//    H: 1.8282
//    E: -1.4877

// ----------------------------------------------------------------------------
// Ribosum80_95N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum80_95N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum80_95N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.270907,       -5.620194,       -5.146776,       -5.183942,       -5.845429
-5.620194,       1.963145,       -5.845429,       -4.297779,       -5.845429
-5.146776,       -5.845429,       1.587734,       -5.650039,       -5.845429
-5.183942,       -4.297779,       -5.650039,       1.823033,       -5.845429
-5.845429,       -5.845429,       -5.845429,       -5.845429,       -5.845429
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum80_95d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum80_95d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum80_95d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.402543,       -9.977199,       -10.598953,       -7.343514,       -999.0,       -999.0,       -13.490969,       -14.507452,       -9.944012,       -10.272599,       -11.911387,       -11.111979,       -8.80721,       -999.0,       -12.645463,       -999.0
-9.977199,       -0.127562,       -11.814334,       -5.58891,       -16.138356,       -9.669098,       -13.663232,       -999.0,       -999.0,       -4.25997,       -13.518782,       -10.295964,       -10.099939,       -8.360439,       -13.256326,       -14.011792
-10.598953,       -11.814334,       -0.606772,       -9.193544,       -13.792628,       -999.0,       -6.016102,       -999.0,       -11.807477,       -10.469578,       -11.413019,       -14.331135,       -9.440104,       -13.618896,       -7.741748,       -15.401422
-7.343514,       -5.58891,       -9.193544,       5.090565,       -12.315317,       -13.875177,       -4.994833,       -8.222671,       -15.384116,       -2.38543,       -11.017764,       -1.955507,       -4.593226,       -10.435803,       -6.316516,       -5.677858
-999.0,       -16.138356,       -13.792628,       -12.315317,       -1.109054,       -9.068238,       -4.837471,       -7.25855,       -8.886536,       -10.490748,       -10.721057,       -14.841288,       -5.882146,       -11.642696,       -8.819452,       -13.748757
-999.0,       -9.669098,       -999.0,       -13.875177,       -9.068238,       -0.128212,       -6.577039,       -7.23494,       -14.472193,       -4.502749,       -16.647291,       -12.525048,       -8.082434,       -11.588315,       -11.394565,       -999.0
-13.490969,       -13.663232,       -6.016102,       -4.994833,       -4.837471,       -6.577039,       6.272779,       -7.89169,       -11.512501,       -4.169943,       -5.733304,       -6.071463,       -1.976304,       -8.804514,       -1.586092,       -10.478483
-14.507452,       -999.0,       -999.0,       -8.222671,       -7.25855,       -7.23494,       -7.89169,       -0.531374,       -13.841288,       -8.053004,       -15.34505,       -7.849554,       -7.518299,       -11.28788,       -10.947457,       -9.485384
-9.944012,       -999.0,       -11.807477,       -15.384116,       -8.886536,       -14.472193,       -11.512501,       -13.841288,       -0.409925,       -7.070147,       -10.635391,       -8.592215,       -8.668448,       -999.0,       -13.316956,       -999.0
-10.272599,       -4.25997,       -10.469578,       -2.38543,       -10.490748,       -4.502749,       -4.169943,       -8.053004,       -7.070147,       6.376052,       -5.260935,       -1.437765,       -4.745294,       -6.231037,       -5.510106,       -10.088655
-11.911387,       -13.518782,       -11.413019,       -11.017764,       -10.721057,       -16.647291,       -5.733304,       -15.34505,       -10.635391,       -5.260935,       -0.776912,       -7.177779,       -17.559214,       -999.0,       -8.033006,       -16.714145
-11.111979,       -10.295964,       -14.331135,       -1.955507,       -14.841288,       -12.525048,       -6.071463,       -7.849554,       -8.592215,       -1.437765,       -7.177779,       4.00017,       -7.179558,       -12.552079,       -7.18639,       -8.851582
-8.80721,       -10.099939,       -9.440104,       -4.593226,       -5.882146,       -8.082434,       -1.976304,       -7.518299,       -8.668448,       -4.745294,       -17.559214,       -7.179558,       5.232728,       -5.973246,       -2.227457,       -6.802847
-999.0,       -8.360439,       -13.618896,       -10.435803,       -11.642696,       -11.588315,       -8.804514,       -11.28788,       -999.0,       -6.231037,       -999.0,       -12.552079,       -5.973246,       -0.447145,       -7.331908,       -7.784742
-12.645463,       -13.256326,       -7.741748,       -6.316516,       -8.819452,       -11.394565,       -1.586092,       -10.947457,       -13.316956,       -5.510106,       -8.033006,       -7.18639,       -2.227457,       -7.331908,       3.995913,       -6.733109
-999.0,       -14.011792,       -15.401422,       -5.677858,       -13.748757,       -999.0,       -10.478483,       -9.485384,       -999.0,       -10.088655,       -16.714145,       -8.851582,       -6.802847,       -7.784742,       -6.733109,       0.256477
                    };
            return _data;
        }
    };
//    H: 5.2085
//    E: -48.7245


// ----------------------------------------------------------------------------
// Ribosum75_55 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.272032    0.205986    0.277893    0.244089
	struct Ribosum75_55 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum75_55>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.784495,       -1.223872,       -0.953071,       -0.84117
-1.223872,       1.107919,       -1.756802,       -0.526831
-0.953071,       -1.756802,       0.968566,       -1.196653
-0.84117,       -0.526831,       -1.196653,       1.226679
                    };
            return _data;
        }
    };
//    H: 0.5110
//    E: -0.0778

// ----------------------------------------------------------------------------
// Ribosum75_55N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum75_55N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum75_55N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.784495,       -1.223872,       -0.953071,       -0.84117,       -1.756802
-1.223872,       1.107919,       -1.756802,       -0.526831,       -1.756802
-0.953071,       -1.756802,       0.968566,       -1.196653,       -1.756802
-0.84117,       -0.526831,       -1.196653,       1.226679,       -1.756802
-1.756802,       -1.756802,       -1.756802,       -1.756802,       -1.756802
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum75_55d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum75_55d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum75_55d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.248841,       -4.77318,       -10.370414,       -4.748853,       -9.292555,       -13.330022,       -3.81564,       -10.838724,       -8.74926,       -4.926749,       -11.861734,       -5.453794,       -3.232266,       -11.827115,       -5.089984,       -10.00762
-4.77318,       -0.857601,       -8.161299,       -2.18709,       -8.633256,       -5.586622,       -4.42201,       -8.227886,       -7.937897,       -3.540682,       -10.461235,       -3.38897,       -3.902138,       -8.91717,       -6.28843,       -7.258264
-10.370414,       -8.161299,       -1.409907,       -3.59229,       -9.29204,       -12.022475,       -3.038806,       -10.157114,       -6.148219,       -4.216158,       -3.873943,       -5.539688,       -3.54353,       -10.455566,       -5.391038,       -10.543706
-4.748853,       -2.18709,       -3.59229,       4.268891,       -4.766526,       -4.140133,       1.78225,       -4.057734,       -3.634346,       3.01496,       -4.479088,       0.897302,       1.635873,       -4.177815,       -0.278679,       -2.599693
-9.292555,       -8.633256,       -9.29204,       -4.766526,       -4.414416,       -8.693537,       -2.485354,       -8.080329,       -8.875795,       -4.563376,       -9.616332,       -6.751251,       -2.570432,       -7.909554,       -5.366311,       -7.812704
-13.330022,       -5.586622,       -12.022475,       -4.140133,       -8.693537,       -1.958147,       -3.616624,       -3.864397,       -9.677559,       -2.09863,       -11.002489,       -5.69201,       -4.783879,       -6.799708,       -5.747532,       -4.142411
-3.81564,       -4.42201,       -3.038806,       1.78225,       -2.485354,       -3.616624,       5.502723,       -4.281874,       -4.947755,       2.299681,       -4.08425,       0.060254,       3.001457,       -4.170569,       1.498592,       -2.442129
-10.838724,       -8.227886,       -10.157114,       -4.057734,       -8.080329,       -3.864397,       -4.281874,       -1.893154,       -9.198417,       -4.651613,       -12.186569,       -3.862951,       -3.670728,       -4.878598,       -5.002165,       -5.249423
-8.74926,       -7.937897,       -6.148219,       -3.634346,       -8.875795,       -9.677559,       -4.947755,       -9.198417,       -0.992973,       -2.600576,       -9.539276,       -4.61856,       -3.939926,       -8.728828,       -7.393181,       -9.471571
-4.926749,       -3.540682,       -4.216158,       3.01496,       -4.563376,       -2.09863,       2.299681,       -4.651613,       -2.600576,       5.775664,       -3.343345,       1.77638,       1.847499,       -4.147761,       0.090968,       -2.367302
-11.861734,       -10.461235,       -3.873943,       -4.479088,       -9.616332,       -11.002489,       -4.08425,       -12.186569,       -9.539276,       -3.343345,       -3.032893,       -4.178857,       -4.802007,       -11.044341,       -3.934602,       -11.029462
-5.453794,       -3.38897,       -5.539688,       0.897302,       -6.751251,       -5.69201,       0.060254,       -3.862951,       -4.61856,       1.77638,       -4.178857,       3.171287,       -0.340702,       -4.101839,       -2.070886,       -2.878658
-3.232266,       -3.902138,       -3.54353,       1.635873,       -2.570432,       -4.783879,       3.001457,       -3.670728,       -3.939926,       1.847499,       -4.802007,       -0.340702,       4.49901,       -3.233031,       1.280076,       -2.799736
-11.827115,       -8.91717,       -10.455566,       -4.177815,       -7.909554,       -6.799708,       -4.170569,       -4.878598,       -8.728828,       -4.147761,       -11.044341,       -4.101839,       -3.233031,       -5.257393,       -3.985846,       -6.31164
-5.089984,       -6.28843,       -5.391038,       -0.278679,       -5.366311,       -5.747532,       1.498592,       -5.002165,       -7.393181,       0.090968,       -3.934602,       -2.070886,       1.280076,       -3.985846,       3.167491,       -3.746135
-10.00762,       -7.258264,       -10.543706,       -2.599693,       -7.812704,       -4.142411,       -2.442129,       -5.249423,       -9.471571,       -2.367302,       -11.029462,       -2.878658,       -2.799736,       -6.31164,       -3.746135,       -1.215857
                    };
            return _data;
        }
    };
//    H: 3.4772
//    E: -2.4197


// ----------------------------------------------------------------------------
// Ribosum95_40 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.259451    0.219081    0.297056    0.224412
	struct Ribosum95_40 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum95_40>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.960646,       -1.332215,       -0.916043,       -0.973528
-1.332215,       0.994941,       -1.690531,       -0.619989
-0.916043,       -1.690531,       0.852482,       -1.104765
-0.973528,       -0.619989,       -1.104765,       1.374332
                    };
            return _data;
        }
    };
//    H: 0.5551
//    E: -0.0930

// ----------------------------------------------------------------------------
// Ribosum95_40N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum95_40N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum95_40N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.960646,       -1.332215,       -0.916043,       -0.973528,       -1.690531
-1.332215,       0.994941,       -1.690531,       -0.619989,       -1.690531
-0.916043,       -1.690531,       0.852482,       -1.104765,       -1.690531
-0.973528,       -0.619989,       -1.104765,       1.374332,       -1.690531
-1.690531,       -1.690531,       -1.690531,       -1.690531,       -1.690531
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum95_40d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum95_40d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum95_40d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.831487,       -8.539117,       -9.168296,       -4.957916,       -9.968992,       -13.480223,       -3.826973,       -11.937374,       -6.942731,       -5.186195,       -9.662051,       -6.423717,       -2.488958,       -11.831246,       -3.645382,       -8.885911
-8.539117,       -2.061829,       -9.337377,       -1.622947,       -10.359887,       -8.795369,       -5.35361,       -10.612219,       -7.669019,       -2.704731,       -10.140637,       -4.680644,       -5.410087,       -8.904436,       -7.122467,       -8.296081
-9.168296,       -9.337377,       -1.331927,       -5.885725,       -10.348283,       -14.748927,       -2.561878,       -9.496282,       -9.632756,       -6.115915,       -4.364394,       -7.081438,       -2.84425,       -7.961468,       -5.780405,       -9.532652
-4.957916,       -1.622947,       -5.885725,       4.223435,       -5.613792,       -2.48067,       2.053064,       -4.124775,       -3.857971,       2.887893,       -4.80424,       0.740996,       1.902913,       -4.298961,       -0.378036,       -2.395046
-9.968992,       -10.359887,       -10.348283,       -5.613792,       -6.184192,       -11.362719,       -3.135963,       -8.336903,       -7.985547,       -5.343377,       -11.459961,       -6.093898,       -2.898118,       -7.828195,       -6.099321,       -8.870741
-13.480223,       -8.795369,       -14.748927,       -2.48067,       -11.362719,       -3.693212,       -5.022648,       -6.95436,       -12.695849,       -3.703166,       -11.710074,       -6.989139,       -6.31568,       -8.563334,       -8.233952,       -6.509941
-3.826973,       -5.35361,       -2.561878,       2.053064,       -3.135963,       -5.022648,       5.213956,       -4.329431,       -5.853148,       2.815931,       -4.661594,       0.254753,       2.954542,       -4.274118,       1.22168,       -3.039937
-11.937374,       -10.612219,       -9.496282,       -4.124775,       -8.336903,       -6.95436,       -4.329431,       -2.676765,       -7.600745,       -2.197285,       -9.314399,       -4.452391,       -4.323365,       -4.57763,       -6.417605,       -5.396506
-6.942731,       -7.669019,       -9.632756,       -3.857971,       -7.985547,       -12.695849,       -5.853148,       -7.600745,       -1.651142,       -2.606658,       -9.515143,       -6.237218,       -4.740261,       -7.139285,       -7.630765,       -9.786246
-5.186195,       -2.704731,       -6.115915,       2.887893,       -5.343377,       -3.703166,       2.815931,       -2.197285,       -2.606658,       5.498664,       -4.645449,       1.424726,       1.934197,       -4.064911,       0.313828,       -2.945166
-9.662051,       -10.140637,       -4.364394,       -4.80424,       -11.459961,       -11.710074,       -4.661594,       -9.314399,       -9.515143,       -4.645449,       -2.191393,       -5.524698,       -6.224537,       -10.719295,       -4.283598,       -5.026365
-6.423717,       -4.680644,       -7.081438,       0.740996,       -6.093898,       -6.989139,       0.254753,       -4.452391,       -6.237218,       1.424726,       -5.524698,       3.307115,       0.089239,       -4.568633,       -1.330194,       -2.623344
-2.488958,       -5.410087,       -2.84425,       1.902913,       -2.898118,       -6.31568,       2.954542,       -4.323365,       -4.740261,       1.934197,       -6.224537,       0.089239,       4.71498,       -3.544316,       1.046305,       -1.582196
-11.831246,       -8.904436,       -7.961468,       -4.298961,       -7.828195,       -8.563334,       -4.274118,       -4.57763,       -7.139285,       -4.064911,       -10.719295,       -4.568633,       -3.544316,       -3.989025,       -4.245609,       -6.023394
-3.645382,       -7.122467,       -5.780405,       -0.378036,       -6.099321,       -8.233952,       1.22168,       -6.417605,       -7.630765,       0.313828,       -4.283598,       -1.330194,       1.046305,       -4.245609,       3.181665,       -3.687042
-8.885911,       -8.296081,       -9.532652,       -2.395046,       -8.870741,       -6.509941,       -3.039937,       -5.396506,       -9.786246,       -2.945166,       -5.026365,       -2.623344,       -1.582196,       -6.023394,       -3.687042,       -0.734533
                    };
            return _data;
        }
    };
//    H: 3.4590
//    E: -2.5900


// ----------------------------------------------------------------------------
// Ribosum100_55 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.256194    0.220910    0.300832    0.222064
	struct Ribosum100_55 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum100_55>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.284979,       -2.057678,       -1.678106,       -1.619362
-2.057678,       1.224971,       -2.63627,       -1.122698
-1.678106,       -2.63627,       1.080742,       -1.934515
-1.619362,       -1.122698,       -1.934515,       1.705702
                    };
            return _data;
        }
    };
//    H: 0.9806
//    E: -0.3057

// ----------------------------------------------------------------------------
// Ribosum100_55N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum100_55N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum100_55N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.284979,       -2.057678,       -1.678106,       -1.619362,       -2.63627
-2.057678,       1.224971,       -2.63627,       -1.122698,       -2.63627
-1.678106,       -2.63627,       1.080742,       -1.934515,       -2.63627
-1.619362,       -1.122698,       -1.934515,       1.705702,       -2.63627
-2.63627,       -2.63627,       -2.63627,       -2.63627,       -2.63627
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum100_55d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum100_55d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum100_55d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.85778,       -7.795482,       -8.16788,       -4.716281,       -9.375261,       -14.274122,       -4.86001,       -11.920929,       -6.143031,       -4.776124,       -9.696316,       -6.122991,       -4.608221,       -11.907325,       -6.221353,       -8.689436
-7.795482,       -1.764359,       -9.271005,       -2.066586,       -10.014602,       -9.19211,       -5.797641,       -10.629004,       -10.200803,       -3.812848,       -12.14701,       -4.777762,       -5.811355,       -8.591778,       -7.343397,       -7.882491
-8.16788,       -9.271005,       -0.672001,       -5.709776,       -10.555466,       -14.645811,       -4.738779,       -8.925705,       -8.829969,       -6.281821,       -5.46743,       -6.911984,       -5.41302,       -8.331164,       -5.793672,       -10.604673
-4.716281,       -2.066586,       -5.709776,       4.611374,       -6.023999,       -6.665835,       1.527095,       -5.551689,       -5.832461,       2.577308,       -6.088474,       0.47197,       1.435598,       -5.383375,       -0.676547,       -3.021459
-9.375261,       -10.014602,       -10.555466,       -6.023999,       -5.536054,       -11.163315,       -3.857237,       -7.698888,       -8.552776,       -5.935928,       -10.943476,       -8.055616,       -2.64826,       -7.396508,       -6.23097,       -8.332644
-14.274122,       -9.19211,       -14.645811,       -6.665835,       -11.163315,       -2.79117,       -5.183351,       -6.173564,       -13.598256,       -3.98358,       -12.344421,       -7.737666,       -6.950138,       -8.366141,       -8.410302,       -5.971669
-4.86001,       -5.797641,       -4.738779,       1.527095,       -3.857237,       -5.183351,       5.422495,       -4.931357,       -6.416995,       1.904828,       -4.540042,       -0.470865,       2.574464,       -4.650382,       1.174706,       -3.717702
-11.920929,       -10.629004,       -8.925705,       -5.551689,       -7.698888,       -6.173564,       -4.931357,       -1.841987,       -6.636526,       -5.888891,       -13.43657,       -5.863497,       -4.305566,       -3.958811,       -7.38278,       -4.694276
-6.143031,       -10.200803,       -8.829969,       -5.832461,       -8.552776,       -13.598256,       -6.416995,       -6.636526,       -0.940229,       -5.009354,       -9.604245,       -6.424476,       -6.022169,       -6.419547,       -7.735731,       -11.630242
-4.776124,       -3.812848,       -6.281821,       2.577308,       -5.935928,       -3.98358,       1.904828,       -5.888891,       -5.009354,       5.635532,       -4.611811,       1.102565,       1.378884,       -4.806888,       -0.186105,       -4.070588
-9.696316,       -12.14701,       -5.46743,       -6.088474,       -10.943476,       -12.344421,       -4.540042,       -13.43657,       -9.604245,       -4.611811,       -2.123479,       -5.634005,       -6.133371,       -11.831669,       -4.207587,       -11.726962
-6.122991,       -4.777762,       -6.911984,       0.47197,       -8.055616,       -7.737666,       -0.470865,       -5.863497,       -6.424476,       1.102565,       -5.634005,       3.543041,       -0.778996,       -5.185482,       -2.093974,       -4.866327
-4.608221,       -5.811355,       -5.41302,       1.435598,       -2.64826,       -6.950138,       2.574464,       -4.305566,       -6.022169,       1.378884,       -6.133371,       -0.778996,       5.037776,       -3.054264,       1.007582,       -3.576722
-11.907325,       -8.591778,       -8.331164,       -5.383375,       -7.396508,       -8.366141,       -4.650382,       -3.958811,       -6.419547,       -4.806888,       -11.831669,       -5.185482,       -3.054264,       -3.432645,       -4.940584,       -5.174004
-6.221353,       -7.343397,       -5.793672,       -0.676547,       -6.23097,       -8.410302,       1.174706,       -7.38278,       -7.735731,       -0.186105,       -4.207587,       -2.093974,       1.007582,       -4.940584,       3.435012,       -4.18912
-8.689436,       -7.882491,       -10.604673,       -3.021459,       -8.332644,       -5.971669,       -3.717702,       -4.694276,       -11.630242,       -4.070588,       -11.726962,       -4.866327,       -3.576722,       -5.174004,       -4.18912,       0.047813
                    };
            return _data;
        }
    };
//    H: 3.8480
//    E: -2.8256


// ----------------------------------------------------------------------------
// Ribosum65_75 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.256665    0.217047    0.290876    0.235412
	struct Ribosum65_75 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum65_75>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.282223,       -2.310042,       -2.033265,       -2.015723
-2.310042,       1.375077,       -2.727517,       -1.19744
-2.033265,       -2.727517,       1.186248,       -2.255158
-2.015723,       -1.19744,       -2.255158,       1.728794
                    };
            return _data;
        }
    };
//    H: 1.0889
//    E: -0.3788

// ----------------------------------------------------------------------------
// Ribosum65_75N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum65_75N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum65_75N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.282223,       -2.310042,       -2.033265,       -2.015723,       -2.727517
-2.310042,       1.375077,       -2.727517,       -1.19744,       -2.727517
-2.033265,       -2.727517,       1.186248,       -2.255158,       -2.727517
-2.015723,       -1.19744,       -2.255158,       1.728794,       -2.727517
-2.727517,       -2.727517,       -2.727517,       -2.727517,       -2.727517
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum65_75d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum65_75d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum65_75d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-0.923156,       -8.233117,       -8.184731,       -5.074304,       -10.138409,       -13.325433,       -5.592898,       -11.535826,       -6.059197,       -4.801101,       -10.3123,       -6.525134,       -4.690309,       -12.943174,       -6.433425,       -7.969426
-8.233117,       -0.875145,       -8.844549,       -2.125902,       -9.743494,       -8.221951,       -5.403803,       -10.810685,       -10.71061,       -3.521794,       -12.352101,       -5.792986,       -6.151717,       -8.496275,       -7.482069,       -7.548359
-8.184731,       -8.844549,       -0.628866,       -5.995221,       -11.186889,       -14.58969,       -4.586123,       -9.177703,       -9.278699,       -6.570408,       -4.852164,       -6.886463,       -6.906782,       -8.449825,       -5.269871,       -10.660897
-5.074304,       -2.125902,       -5.995221,       4.825833,       -6.447307,       -7.244863,       0.986779,       -5.826247,       -7.176753,       2.175582,       -6.832976,       0.365975,       0.6965,       -5.726983,       -1.372211,       -2.796278
-10.138409,       -9.743494,       -11.186889,       -6.447307,       -4.464668,       -10.816007,       -3.411385,       -7.712348,       -8.821937,       -5.838118,       -10.555331,       -8.315303,       -2.372858,       -7.784943,       -6.14199,       -7.627173
-13.325433,       -8.221951,       -14.58969,       -7.244863,       -10.816007,       -1.470152,       -5.016738,       -5.962836,       -13.581701,       -3.742129,       -10.762107,       -7.8533,       -7.034906,       -8.148178,       -8.50277,       -5.956552
-5.592898,       -5.403803,       -4.586123,       0.986779,       -3.411385,       -5.016738,       5.629885,       -4.750301,       -6.841722,       1.536401,       -4.400057,       -0.982124,       2.165892,       -4.795577,       1.037174,       -3.797545
-11.535826,       -10.810685,       -9.177703,       -5.826247,       -7.712348,       -5.962836,       -4.750301,       -1.098383,       -6.769538,       -6.505095,       -12.593028,       -6.660557,       -4.710539,       -4.702454,       -7.760202,       -4.385879
-6.059197,       -10.71061,       -9.278699,       -7.176753,       -8.821937,       -13.581701,       -6.841722,       -6.769538,       -0.700295,       -5.496583,       -9.490767,       -6.497978,       -6.003127,       -6.614901,       -7.63697,       -11.835142
-4.801101,       -3.521794,       -6.570408,       2.175582,       -5.838118,       -3.742129,       1.536401,       -6.505095,       -5.496583,       5.785597,       -4.957683,       0.984971,       0.746572,       -4.536326,       -0.608764,       -4.234616
-10.3123,       -12.352101,       -4.852164,       -6.832976,       -10.555331,       -10.762107,       -4.400057,       -12.593028,       -9.490767,       -4.957683,       -2.249826,       -5.988654,       -6.485506,       -11.730001,       -4.028399,       -11.670613
-6.525134,       -5.792986,       -6.886463,       0.365975,       -8.315303,       -7.8533,       -0.982124,       -6.660557,       -6.497978,       0.984971,       -5.988654,       3.607431,       -1.510981,       -4.96233,       -2.44605,       -4.808052
-4.690309,       -6.151717,       -6.906782,       0.6965,       -2.372858,       -7.034906,       2.165892,       -4.710539,       -6.003127,       0.746572,       -6.485506,       -1.510981,       5.089377,       -3.357418,       0.586538,       -3.899753
-12.943174,       -8.496275,       -8.449825,       -5.726983,       -7.784943,       -8.148178,       -4.795577,       -4.702454,       -6.614901,       -4.536326,       -11.730001,       -4.96233,       -3.357418,       -3.215706,       -5.694902,       -4.542122
-6.433425,       -7.482069,       -5.269871,       -1.372211,       -6.14199,       -8.50277,       1.037174,       -7.760202,       -7.63697,       -0.608764,       -4.028399,       -2.44605,       0.586538,       -5.694902,       3.536383,       -4.464665
-7.969426,       -7.548359,       -10.660897,       -2.796278,       -7.627173,       -5.956552,       -3.797545,       -4.385879,       -11.835142,       -4.234616,       -11.670613,       -4.808052,       -3.899753,       -4.542122,       -4.464665,       0.060143
                    };
            return _data;
        }
    };
//    H: 4.0634
//    E: -2.8447


// ----------------------------------------------------------------------------
// Ribosum90_40 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.260514    0.218889    0.296837    0.223759
	struct Ribosum90_40 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum90_40>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.941617,       -1.301791,       -0.892933,       -0.932015
-1.301791,       0.98049,       -1.672996,       -0.607542
-0.892933,       -1.672996,       0.84475,       -1.091891
-0.932015,       -0.607542,       -1.091891,       1.359748
                    };
            return _data;
        }
    };
//    H: 0.5405
//    E: -0.0873

// ----------------------------------------------------------------------------
// Ribosum90_40N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum90_40N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum90_40N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.941617,       -1.301791,       -0.892933,       -0.932015,       -1.672996
-1.301791,       0.98049,       -1.672996,       -0.607542,       -1.672996
-0.892933,       -1.672996,       0.84475,       -1.091891,       -1.672996
-0.932015,       -0.607542,       -1.091891,       1.359748,       -1.672996
-1.672996,       -1.672996,       -1.672996,       -1.672996,       -1.672996
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum90_40d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum90_40d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum90_40d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.972177,       -8.148276,       -8.791773,       -4.702553,       -9.718125,       -13.069951,       -3.776277,       -12.182084,       -7.196477,       -5.1267,       -9.25665,       -6.150642,       -2.50804,       -11.293492,       -3.6474,       -8.928745
-8.148276,       -2.146518,       -9.266277,       -1.614982,       -10.224148,       -8.719885,       -5.273223,       -10.341839,       -7.788389,       -2.744093,       -10.032955,       -4.579648,       -5.240062,       -8.802055,       -6.966146,       -8.156342
-8.791773,       -9.266277,       -1.377843,       -5.63824,       -9.725863,       -14.715259,       -2.525007,       -9.400564,       -9.309859,       -5.892476,       -4.546348,       -7.065862,       -2.836635,       -8.016485,       -5.7678,       -9.991753
-4.702553,       -1.614982,       -5.63824,       4.185443,       -5.471836,       -2.554371,       2.081599,       -4.033799,       -3.914444,       2.909999,       -4.703337,       0.760609,       1.916038,       -4.201708,       -0.366015,       -2.38278
-9.718125,       -10.224148,       -9.725863,       -5.471836,       -6.053334,       -11.242347,       -2.998185,       -8.252639,       -7.808572,       -5.251188,       -11.107627,       -6.105457,       -2.815869,       -7.571364,       -6.08866,       -8.839702
-13.069951,       -8.719885,       -14.715259,       -2.554371,       -11.242347,       -3.865908,       -4.984706,       -6.829857,       -12.227284,       -3.522321,       -12.095426,       -6.709444,       -6.061146,       -8.447139,       -8.004082,       -6.389603
-3.776277,       -5.273223,       -2.525007,       2.081599,       -2.998185,       -4.984706,       5.200851,       -4.326191,       -5.749151,       2.838449,       -4.618483,       0.296649,       2.993925,       -4.319268,       1.260633,       -3.004115
-12.182084,       -10.341839,       -9.400564,       -4.033799,       -8.252639,       -6.829857,       -4.326191,       -2.780404,       -7.852477,       -2.205468,       -9.083927,       -4.449605,       -4.367149,       -4.616948,       -6.376702,       -5.365342
-7.196477,       -7.788389,       -9.309859,       -3.914444,       -7.808572,       -12.227284,       -5.749151,       -7.852477,       -1.676206,       -2.641659,       -9.103235,       -6.399163,       -4.62304,       -7.17515,       -7.765229,       -10.257248
-5.1267,       -2.744093,       -5.892476,       2.909999,       -5.251188,       -3.522321,       2.838449,       -2.205468,       -2.641659,       5.496056,       -4.538097,       1.445735,       1.990012,       -3.94039,       0.348946,       -2.840078
-9.25665,       -10.032955,       -4.546348,       -4.703337,       -11.107627,       -12.095426,       -4.618483,       -9.083927,       -9.103235,       -4.538097,       -2.121235,       -5.690294,       -6.107148,       -10.66514,       -4.265491,       -5.116918
-6.150642,       -4.579648,       -7.065862,       0.760609,       -6.105457,       -6.709444,       0.296649,       -4.449605,       -6.399163,       1.445735,       -5.690294,       3.291127,       0.089157,       -4.725416,       -1.330361,       -2.675022
-2.50804,       -5.240062,       -2.836635,       1.916038,       -2.815869,       -6.061146,       2.993925,       -4.367149,       -4.62304,       1.990012,       -6.107148,       0.089157,       4.69501,       -3.494389,       1.065249,       -1.616379
-11.293492,       -8.802055,       -8.016485,       -4.201708,       -7.571364,       -8.447139,       -4.319268,       -4.616948,       -7.17515,       -3.94039,       -10.66514,       -4.725416,       -3.494389,       -4.00793,       -4.282265,       -6.175548
-3.6474,       -6.966146,       -5.7678,       -0.366015,       -6.08866,       -8.004082,       1.260633,       -6.376702,       -7.765229,       0.348946,       -4.265491,       -1.330361,       1.065249,       -4.282265,       3.167771,       -3.659601
-8.928745,       -8.156342,       -9.991753,       -2.38278,       -8.839702,       -6.389603,       -3.004115,       -5.365342,       -10.257248,       -2.840078,       -5.116918,       -2.675022,       -1.616379,       -6.175548,       -3.659601,       -0.767236
                    };
            return _data;
        }
    };
//    H: 3.4436
//    E: -2.5639


// ----------------------------------------------------------------------------
// Ribosum75 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.279401    0.201370    0.273595    0.245634
	struct Ribosum75 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum75>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.168306,       -5.773415,       -5.340063,       -5.228133
-5.773415,       2.101225,       -5.852539,       -4.254006
-5.340063,       -5.852539,       1.682733,       -5.666938
-5.228133,       -4.254006,       -5.666938,       1.754314
                    };
            return _data;
        }
    };
//    H: 0.3134
//    E: -0.0081

// ----------------------------------------------------------------------------
// Ribosum75N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum75N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum75N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.168306,       -5.773415,       -5.340063,       -5.228133,       -5.852539
-5.773415,       2.101225,       -5.852539,       -4.254006,       -5.852539
-5.340063,       -5.852539,       1.682733,       -5.666938,       -5.852539
-5.228133,       -4.254006,       -5.666938,       1.754314,       -5.852539
-5.852539,       -5.852539,       -5.852539,       -5.852539,       -5.852539
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum75d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum75d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum75d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-3.685706,       -6.120853,       -11.008044,       -4.480832,       -10.593579,       -12.629505,       -3.498322,       -11.904156,       -9.582425,       -4.956207,       -12.343158,       -5.389806,       -3.251248,       -12.611997,       -3.800348,       -10.807604
-6.120853,       -1.657109,       -9.125484,       -1.71322,       -9.786827,       -6.518966,       -4.318332,       -9.402347,       -6.332954,       -2.542516,       -9.168166,       -3.81881,       -3.605729,       -9.780716,       -5.863676,       -8.46355
-11.008044,       -9.125484,       -2.513683,       -4.289136,       -10.269614,       -12.730654,       -1.725443,       -10.45697,       -7.399906,       -4.086219,       -4.263678,       -5.878659,       -2.525398,       -10.207877,       -5.829723,       -8.242006
-4.480832,       -1.71322,       -4.289136,       3.790826,       -4.872486,       -2.333693,       2.398058,       -3.436424,       -3.726139,       3.279788,       -4.282217,       0.92622,       2.011653,       -4.298502,       -0.006078,       -2.749176
-10.593579,       -9.786827,       -10.269614,       -4.872486,       -5.675248,       -9.867157,       -2.245311,       -8.59383,       -6.53726,       -4.172474,       -10.591911,       -5.346428,       -3.092894,       -8.51438,       -6.033208,       -8.929729
-12.629505,       -6.518966,       -12.730654,       -2.333693,       -9.867157,       -3.110023,       -3.356355,       -5.054819,       -9.418373,       -2.46333,       -10.928985,       -5.294034,       -4.395849,       -7.610369,       -6.311159,       -5.352793
-3.498322,       -4.318332,       -1.725443,       2.398058,       -2.245311,       -3.356355,       5.290534,       -3.919955,       -4.234723,       3.199566,       -3.909101,       0.640903,       3.316672,       -4.100143,       1.568735,       -2.211969
-11.904156,       -9.402347,       -10.45697,       -3.436424,       -8.59383,       -5.054819,       -3.919955,       -3.019082,       -8.944223,       -2.37981,       -7.217874,       -4.216295,       -3.510498,       -5.414693,       -5.066193,       -6.469681
-9.582425,       -6.332954,       -7.399906,       -3.726139,       -6.53726,       -9.418373,       -4.234723,       -8.944223,       -2.2402,       -1.962819,       -10.227088,       -4.984798,       -3.63058,       -8.830937,       -7.68279,       -8.80219
-4.956207,       -2.542516,       -4.086219,       3.279788,       -4.172474,       -2.46333,       3.199566,       -2.37981,       -1.962819,       5.633247,       -3.513954,       1.905652,       2.560097,       -3.557802,       0.805648,       -2.389239
-12.343158,       -9.168166,       -4.263678,       -4.282217,       -10.591911,       -10.928985,       -3.909101,       -7.217874,       -10.227088,       -3.513954,       -2.489217,       -4.725936,       -5.050079,       -9.923403,       -4.233183,       -7.183553
-5.389806,       -3.81881,       -5.878659,       0.92622,       -5.346428,       -5.294034,       0.640903,       -4.216295,       -4.984798,       1.905652,       -4.725936,       2.955443,       0.336354,       -4.668552,       -1.082319,       -3.225121
-3.251248,       -3.605729,       -2.525398,       2.011653,       -3.092894,       -4.395849,       3.316672,       -3.510498,       -3.63058,       2.560097,       -5.050079,       0.336354,       4.149026,       -3.253595,       1.195218,       -1.770006
-12.611997,       -9.780716,       -10.207877,       -4.298502,       -8.51438,       -7.610369,       -4.100143,       -5.414693,       -8.830937,       -3.557802,       -9.923403,       -4.668552,       -3.253595,       -5.382994,       -3.602916,       -7.446854
-3.800348,       -5.863676,       -5.829723,       -0.006078,       -6.033208,       -6.311159,       1.568735,       -5.066193,       -7.68279,       0.805648,       -4.233183,       -1.082319,       1.195218,       -3.602916,       2.796576,       -2.823829
-10.807604,       -8.46355,       -8.242006,       -2.749176,       -8.929729,       -5.352793,       -2.211969,       -6.469681,       -8.80219,       -2.389239,       -7.183553,       -3.225121,       -1.770006,       -7.446854,       -2.823829,       -1.993879
                    };
            return _data;
        }
    };
//    H: 3.2082
//    E: -2.4211


// ----------------------------------------------------------------------------
// Ribosum90_55 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.258139    0.220812    0.301158    0.219890
	struct Ribosum90_55 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum90_55>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.240084,       -1.908732,       -1.530454,       -1.462181
-1.908732,       1.182812,       -2.503157,       -1.065523
-1.530454,       -2.503157,       1.049085,       -1.795008
-1.462181,       -1.065523,       -1.795008,       1.66588
                    };
            return _data;
        }
    };
//    H: 0.9113
//    E: -0.2652

// ----------------------------------------------------------------------------
// Ribosum90_55N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum90_55N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum90_55N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.240084,       -1.908732,       -1.530454,       -1.462181,       -2.503157
-1.908732,       1.182812,       -2.503157,       -1.065523,       -2.503157
-1.530454,       -2.503157,       1.049085,       -1.795008,       -2.503157
-1.462181,       -1.065523,       -1.795008,       1.66588,       -2.503157
-2.503157,       -2.503157,       -2.503157,       -2.503157,       -2.503157
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum90_55d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum90_55d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum90_55d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.235844,       -7.482476,       -8.259247,       -4.476699,       -9.044066,       -13.319779,       -4.581755,       -12.135634,       -6.766923,       -4.784541,       -9.069532,       -5.84823,       -4.294296,       -10.834168,       -6.068014,       -9.18684
-7.482476,       -2.034406,       -9.127316,       -2.098777,       -9.674303,       -9.112736,       -5.793466,       -10.315134,       -9.858734,       -3.734319,       -11.544758,       -4.44071,       -5.500195,       -8.538247,       -7.166362,       -7.675992
-8.259247,       -9.127316,       -0.747537,       -5.257548,       -9.606274,       -14.364569,       -4.470002,       -9.33066,       -8.791178,       -5.999447,       -5.507959,       -6.863014,       -5.086787,       -8.469104,       -5.813102,       -10.733968
-4.476699,       -2.098777,       -5.257548,       4.532495,       -5.826785,       -6.448245,       1.633176,       -5.244344,       -5.60409,       2.64316,       -5.671012,       0.546677,       1.577195,       -5.022121,       -0.643706,       -3.01016
-9.044066,       -9.674303,       -9.606274,       -5.826785,       -5.399249,       -10.735319,       -3.672058,       -7.709743,       -8.293196,       -5.926903,       -10.613647,       -7.847196,       -2.615314,       -6.9821,       -5.964646,       -8.390126
-13.319779,       -9.112736,       -14.364569,       -6.448245,       -10.735319,       -3.226402,       -5.283824,       -6.1616,       -12.964347,       -3.825621,       -12.829894,       -7.362209,       -6.628041,       -7.855239,       -8.10887,       -5.719951
-4.581755,       -5.793466,       -4.470002,       1.633176,       -3.672058,       -5.283824,       5.377509,       -4.813036,       -6.204609,       2.045754,       -4.630208,       -0.337653,       2.699385,       -4.805245,       1.260059,       -3.576053
-12.135634,       -10.315134,       -9.33066,       -5.244344,       -7.709743,       -6.1616,       -4.813036,       -2.070578,       -7.419246,       -5.524204,       -13.706614,       -5.659888,       -4.448993,       -3.922949,       -7.288973,       -4.635129
-6.766923,       -9.858734,       -8.791178,       -5.60409,       -8.293196,       -12.964347,       -6.204609,       -7.419246,       -1.018861,       -4.860633,       -8.955413,       -6.305064,       -5.889149,       -6.669468,       -7.74481,       -11.230254
-4.784541,       -3.734319,       -5.999447,       2.64316,       -5.926903,       -3.825621,       2.045754,       -5.524204,       -4.860633,       5.622371,       -4.344791,       1.175836,       1.532321,       -4.619017,       -0.16241,       -3.926332
-9.069532,       -11.544758,       -5.507959,       -5.671012,       -10.613647,       -12.829894,       -4.630208,       -13.706614,       -8.955413,       -4.344791,       -2.007859,       -5.842407,       -5.875257,       -11.421506,       -4.251209,       -11.251337
-5.84823,       -4.44071,       -6.863014,       0.546677,       -7.847196,       -7.362209,       -0.337653,       -5.659888,       -6.305064,       1.175836,       -5.842407,       3.503637,       -0.623006,       -5.249404,       -2.098329,       -4.716462
-4.294296,       -5.500195,       -5.086787,       1.577195,       -2.615314,       -6.628041,       2.699385,       -4.448993,       -5.889149,       1.532321,       -5.875257,       -0.623006,       5.000386,       -3.061867,       1.068665,       -3.389348
-10.834168,       -8.538247,       -8.469104,       -5.022121,       -6.9821,       -7.855239,       -4.805245,       -3.922949,       -6.669468,       -4.619017,       -11.421506,       -5.249404,       -3.061867,       -3.320272,       -4.743131,       -5.459034
-6.068014,       -7.166362,       -5.813102,       -0.643706,       -5.964646,       -8.10887,       1.260059,       -7.288973,       -7.74481,       -0.16241,       -4.251209,       -2.098329,       1.068665,       -4.743131,       3.400597,       -4.091863
-9.18684,       -7.675992,       -10.733968,       -3.01016,       -8.390126,       -5.719951,       -3.576053,       -4.635129,       -11.230254,       -3.926332,       -11.251337,       -4.716462,       -3.389348,       -5.459034,       -4.091863,       0.001217
                    };
            return _data;
        }
    };
//    H: 3.7895
//    E: -2.7667


// ----------------------------------------------------------------------------
// Ribosum60_90 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.281757    0.195826    0.265981    0.256436
	struct Ribosum60_90 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum60_90>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.268379,       -4.512106,       -4.052974,       -3.895344
-4.512106,       1.819582,       -4.665557,       -2.884158
-4.052974,       -4.665557,       1.517497,       -4.299739
-3.895344,       -2.884158,       -4.299739,       1.815215
                    };
            return _data;
        }
    };
//    H: 1.6569
//    E: -1.0387

// ----------------------------------------------------------------------------
// Ribosum60_90N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum60_90N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum60_90N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.268379,       -4.512106,       -4.052974,       -3.895344,       -4.665557
-4.512106,       1.819582,       -4.665557,       -2.884158,       -4.665557
-4.052974,       -4.665557,       1.517497,       -4.299739,       -4.665557
-3.895344,       -2.884158,       -4.299739,       1.815215,       -4.665557
-4.665557,       -4.665557,       -4.665557,       -4.665557,       -4.665557
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum60_90d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum60_90d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum60_90d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.098114,       -8.216035,       -8.752023,       -5.643872,       -11.281702,       -999.0,       -8.063647,       -13.818278,       -6.761976,       -6.681178,       -9.47355,       -8.889343,       -5.787927,       -14.818278,       -8.713136,       -11.747875
-8.216035,       -0.305165,       -9.331844,       -4.979469,       -11.728811,       -8.469746,       -8.088737,       -12.486047,       -15.871002,       -3.126012,       -12.700414,       -7.482488,       -8.929535,       -8.875549,       -10.034713,       -11.010004
-8.752023,       -9.331844,       -0.660525,       -7.900281,       -11.444738,       -14.761163,       -6.267258,       -13.413225,       -9.712841,       -8.525782,       -7.325747,       -9.428712,       -8.804703,       -12.487226,       -6.865156,       -11.509471
-5.643872,       -4.979469,       -7.900281,       4.983109,       -9.27912,       -10.205939,       -1.606716,       -6.688076,       -10.050577,       0.274512,       -7.752738,       -1.170767,       -1.789353,       -8.260364,       -4.01533,       -5.073572
-11.281702,       -11.728811,       -11.444738,       -9.27912,       -2.640125,       -10.444942,       -4.205296,       -9.592962,       -10.461611,       -7.919861,       -10.296024,       -9.658337,       -4.435384,       -11.43542,       -7.690759,       -11.290112
-999.0,       -8.469746,       -14.761163,       -10.205939,       -10.444942,       -1.119312,       -4.975758,       -6.613706,       -13.53877,       -4.606929,       -12.56256,       -9.25608,       -9.064583,       -9.702435,       -9.509836,       -8.107704
-8.063647,       -8.088737,       -6.267258,       -1.606716,       -4.205296,       -4.975758,       6.272259,       -5.280278,       -8.754454,       -0.673319,       -5.319428,       -2.891516,       0.160174,       -7.655687,       0.037848,       -6.256118
-13.818278,       -12.486047,       -13.413225,       -6.688076,       -9.592962,       -6.613706,       -5.280278,       -1.133365,       -13.275721,       -7.276585,       -12.4041,       -6.593679,       -8.61634,       -6.647777,       -8.459752,       -7.995833
-6.761976,       -15.871002,       -9.712841,       -10.050577,       -10.461611,       -13.53877,       -8.754454,       -13.275721,       -0.825479,       -6.366864,       -9.571417,       -7.101425,       -7.865567,       -16.735153,       -11.154537,       -14.802253
-6.681178,       -3.126012,       -8.525782,       0.274512,       -7.919861,       -4.606929,       -0.673319,       -7.276585,       -6.366864,       6.382841,       -4.29493,       -0.050881,       -2.287682,       -5.208164,       -2.969033,       -6.377717
-9.47355,       -12.700414,       -7.325747,       -7.752738,       -10.296024,       -12.56256,       -5.319428,       -12.4041,       -9.571417,       -4.29493,       -1.538949,       -6.272802,       -8.896134,       -11.745137,       -5.889819,       -11.87113
-8.889343,       -7.482488,       -9.428712,       -1.170767,       -9.658337,       -9.25608,       -2.891516,       -6.593679,       -7.101425,       -0.050881,       -6.272802,       3.837726,       -4.190306,       -7.462313,       -4.419461,       -6.399617
-5.787927,       -8.929535,       -8.804703,       -1.789353,       -4.435384,       -9.064583,       0.160174,       -8.61634,       -7.865567,       -2.287682,       -8.896134,       -4.190306,       5.148281,       -5.364522,       -1.327919,       -5.465515
-14.818278,       -8.875549,       -12.487226,       -8.260364,       -11.43542,       -9.702435,       -7.655687,       -6.647777,       -16.735153,       -5.208164,       -11.745137,       -7.462313,       -5.364522,       -0.639468,       -5.903858,       -5.928194
-8.713136,       -10.034713,       -6.865156,       -4.01533,       -7.690759,       -9.509836,       0.037848,       -8.459752,       -11.154537,       -2.969033,       -5.889819,       -4.419461,       -1.327919,       -5.903858,       3.783826,       -6.565216
-11.747875,       -11.010004,       -11.509471,       -5.073572,       -11.290112,       -8.107704,       -6.256118,       -7.995833,       -14.802253,       -6.377717,       -11.87113,       -6.399617,       -5.465515,       -5.928194,       -6.565216,       0.189894
                    };
            return _data;
        }
    };
//    H: 4.9482
//    E: -6.6267


// ----------------------------------------------------------------------------
// Ribosum95_80 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.257169    0.215860    0.290446    0.236525
	struct Ribosum95_80 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum95_80>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.327989,       -2.616877,       -2.34588,       -2.29963
-2.616877,       1.454396,       -3.051112,       -1.442846
-2.34588,       -3.051112,       1.236415,       -2.516991
-2.29963,       -1.442846,       -2.516991,       1.783471
                    };
            return _data;
        }
    };
//    H: 1.2141
//    E: -0.4724

// ----------------------------------------------------------------------------
// Ribosum95_80N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum95_80N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum95_80N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.327989,       -2.616877,       -2.34588,       -2.29963,       -3.051112
-2.616877,       1.454396,       -3.051112,       -1.442846,       -3.051112
-2.34588,       -3.051112,       1.236415,       -2.516991,       -3.051112
-2.29963,       -1.442846,       -2.516991,       1.783471,       -3.051112
-3.051112,       -3.051112,       -3.051112,       -3.051112,       -3.051112
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum95_80d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum95_80d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum95_80d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-0.92978,       -9.189811,       -8.699787,       -4.979298,       -9.65116,       -12.631563,       -5.764365,       -11.607377,       -5.873412,       -5.121797,       -10.554727,       -6.521543,       -4.753426,       -12.196447,       -6.803542,       -8.294592
-9.189811,       -0.740155,       -8.598977,       -2.556328,       -10.584665,       -7.780032,       -5.627219,       -11.321852,       -9.718239,       -3.673031,       -12.203913,       -5.649177,       -6.232944,       -8.400592,       -7.643511,       -7.25637
-8.699787,       -8.598977,       -0.557191,       -5.550334,       -10.363307,       -14.265218,       -4.452774,       -10.248932,       -9.242105,       -6.573156,       -4.834945,       -6.806928,       -7.037754,       -9.137339,       -5.646769,       -10.885817
-4.979298,       -2.556328,       -5.550334,       4.919276,       -6.970217,       -7.508023,       0.538064,       -5.39623,       -7.308249,       1.87765,       -6.73803,       0.226683,       0.339567,       -6.021792,       -1.918976,       -2.929056
-9.65116,       -10.584665,       -10.363307,       -6.970217,       -3.990758,       -10.583307,       -3.367863,       -8.412549,       -8.524009,       -6.240404,       -11.305717,       -8.056029,       -2.534231,       -9.207987,       -6.167891,       -7.513144
-12.631563,       -7.780032,       -14.265218,       -7.508023,       -10.583307,       -1.421995,       -4.894433,       -7.424749,       -13.593098,       -3.832905,       -12.970952,       -8.418815,       -7.832566,       -7.491521,       -8.857565,       -6.147093
-5.764365,       -5.627219,       -4.452774,       0.538064,       -3.367863,       -4.894433,       5.714313,       -4.689918,       -7.252046,       1.042226,       -4.77305,       -1.307474,       1.922369,       -5.139947,       0.867117,       -4.195469
-11.607377,       -11.321852,       -10.248932,       -5.39623,       -8.412549,       -7.424749,       -4.689918,       -0.997826,       -9.038494,       -6.693109,       -11.955263,       -6.378483,       -5.570004,       -4.549061,       -7.670713,       -5.867747
-5.873412,       -9.718239,       -9.242105,       -7.308249,       -8.524009,       -13.593098,       -7.252046,       -9.038494,       -0.706792,       -5.719647,       -9.063456,       -6.102214,       -6.205882,       -8.616218,       -7.94062,       -13.252732
-5.121797,       -3.673031,       -6.573156,       1.87765,       -6.240404,       -3.832905,       1.042226,       -6.693109,       -5.719647,       5.861517,       -5.052959,       0.723281,       0.268791,       -4.592054,       -1.224263,       -4.450686
-10.554727,       -12.203913,       -4.834945,       -6.73803,       -11.305717,       -12.970952,       -4.77305,       -11.955263,       -9.063456,       -5.052959,       -2.049197,       -5.722888,       -6.805263,       -11.197236,       -4.216641,       -11.073241
-6.521543,       -5.649177,       -6.806928,       0.226683,       -8.056029,       -8.418815,       -1.307474,       -6.378483,       -6.102214,       0.723281,       -5.722888,       3.681145,       -1.866356,       -4.822965,       -2.700175,       -4.801247
-4.753426,       -6.232944,       -7.037754,       0.339567,       -2.534231,       -7.832566,       1.922369,       -5.570004,       -6.205882,       0.268791,       -6.805263,       -1.866356,       5.166917,       -4.325288,       0.292659,       -4.085689
-12.196447,       -8.400592,       -9.137339,       -6.021792,       -9.207987,       -7.491521,       -5.139947,       -4.549061,       -8.616218,       -4.592054,       -11.197236,       -4.822965,       -4.325288,       -2.401857,       -5.717827,       -4.387879
-6.803542,       -7.643511,       -5.646769,       -1.918976,       -6.167891,       -8.857565,       0.867117,       -7.670713,       -7.94062,       -1.224263,       -4.216641,       -2.700175,       0.292659,       -5.717827,       3.635637,       -4.774392
-8.294592,       -7.25637,       -10.885817,       -2.929056,       -7.513144,       -6.147093,       -4.195469,       -5.867747,       -13.252732,       -4.450686,       -11.073241,       -4.801247,       -4.085689,       -4.387879,       -4.774392,       0.198099
                    };
            return _data;
        }
    };
//    H: 4.2492
//    E: -2.9205


// ----------------------------------------------------------------------------
// Ribosum100 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.258308    0.219504    0.297310    0.224878
	struct Ribosum100 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum100>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.974413,       -1.346626,       -0.924218,       -1.010277
-1.346626,       1.002076,       -1.700147,       -0.615834
-0.924218,       -1.700147,       0.85501,       -1.115055
-1.010277,       -0.615834,       -1.115055,       1.3849
                    };
            return _data;
        }
    };
//    H: 0.5617
//    E: -0.0957

// ----------------------------------------------------------------------------
// Ribosum100N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum100N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum100N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.974413,       -1.346626,       -0.924218,       -1.010277,       -1.700147
-1.346626,       1.002076,       -1.700147,       -0.615834,       -1.700147
-0.924218,       -1.700147,       0.85501,       -1.115055,       -1.700147
-1.010277,       -0.615834,       -1.115055,       1.3849,       -1.700147
-1.700147,       -1.700147,       -1.700147,       -1.700147,       -1.700147
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum100d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum100d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum100d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.85778,       -7.795482,       -8.16788,       -4.716281,       -9.375261,       -14.274122,       -4.86001,       -11.920929,       -6.143031,       -4.776124,       -9.696316,       -6.122991,       -4.608221,       -11.907325,       -6.221353,       -8.689436
-7.795482,       -1.764359,       -9.271005,       -2.066586,       -10.014602,       -9.19211,       -5.797641,       -10.629004,       -10.200803,       -3.812848,       -12.14701,       -4.777762,       -5.811355,       -8.591778,       -7.343397,       -7.882491
-8.16788,       -9.271005,       -0.672001,       -5.709776,       -10.555466,       -14.645811,       -4.738779,       -8.925705,       -8.829969,       -6.281821,       -5.46743,       -6.911984,       -5.41302,       -8.331164,       -5.793672,       -10.604673
-4.716281,       -2.066586,       -5.709776,       4.611374,       -6.023999,       -6.665835,       1.527095,       -5.551689,       -5.832461,       2.577308,       -6.088474,       0.47197,       1.435598,       -5.383375,       -0.676547,       -3.021459
-9.375261,       -10.014602,       -10.555466,       -6.023999,       -5.536054,       -11.163315,       -3.857237,       -7.698888,       -8.552776,       -5.935928,       -10.943476,       -8.055616,       -2.64826,       -7.396508,       -6.23097,       -8.332644
-14.274122,       -9.19211,       -14.645811,       -6.665835,       -11.163315,       -2.79117,       -5.183351,       -6.173564,       -13.598256,       -3.98358,       -12.344421,       -7.737666,       -6.950138,       -8.366141,       -8.410302,       -5.971669
-4.86001,       -5.797641,       -4.738779,       1.527095,       -3.857237,       -5.183351,       5.422495,       -4.931357,       -6.416995,       1.904828,       -4.540042,       -0.470865,       2.574464,       -4.650382,       1.174706,       -3.717702
-11.920929,       -10.629004,       -8.925705,       -5.551689,       -7.698888,       -6.173564,       -4.931357,       -1.841987,       -6.636526,       -5.888891,       -13.43657,       -5.863497,       -4.305566,       -3.958811,       -7.38278,       -4.694276
-6.143031,       -10.200803,       -8.829969,       -5.832461,       -8.552776,       -13.598256,       -6.416995,       -6.636526,       -0.940229,       -5.009354,       -9.604245,       -6.424476,       -6.022169,       -6.419547,       -7.735731,       -11.630242
-4.776124,       -3.812848,       -6.281821,       2.577308,       -5.935928,       -3.98358,       1.904828,       -5.888891,       -5.009354,       5.635532,       -4.611811,       1.102565,       1.378884,       -4.806888,       -0.186105,       -4.070588
-9.696316,       -12.14701,       -5.46743,       -6.088474,       -10.943476,       -12.344421,       -4.540042,       -13.43657,       -9.604245,       -4.611811,       -2.123479,       -5.634005,       -6.133371,       -11.831669,       -4.207587,       -11.726962
-6.122991,       -4.777762,       -6.911984,       0.47197,       -8.055616,       -7.737666,       -0.470865,       -5.863497,       -6.424476,       1.102565,       -5.634005,       3.543041,       -0.778996,       -5.185482,       -2.093974,       -4.866327
-4.608221,       -5.811355,       -5.41302,       1.435598,       -2.64826,       -6.950138,       2.574464,       -4.305566,       -6.022169,       1.378884,       -6.133371,       -0.778996,       5.037776,       -3.054264,       1.007582,       -3.576722
-11.907325,       -8.591778,       -8.331164,       -5.383375,       -7.396508,       -8.366141,       -4.650382,       -3.958811,       -6.419547,       -4.806888,       -11.831669,       -5.185482,       -3.054264,       -3.432645,       -4.940584,       -5.174004
-6.221353,       -7.343397,       -5.793672,       -0.676547,       -6.23097,       -8.410302,       1.174706,       -7.38278,       -7.735731,       -0.186105,       -4.207587,       -2.093974,       1.007582,       -4.940584,       3.435012,       -4.18912
-8.689436,       -7.882491,       -10.604673,       -3.021459,       -8.332644,       -5.971669,       -3.717702,       -4.694276,       -11.630242,       -4.070588,       -11.726962,       -4.866327,       -3.576722,       -5.174004,       -4.18912,       0.047813
                    };
            return _data;
        }
    };
//    H: 3.4639
//    E: -2.6040


// ----------------------------------------------------------------------------
// Ribosum75_50 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.273200    0.206303    0.279565    0.240932
	struct Ribosum75_50 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum75_50>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.714134,       -1.105297,       -0.801841,       -0.749947
-1.105297,       1.016832,       -1.595533,       -0.460637
-0.801841,       -1.595533,       0.893578,       -1.031453
-0.749947,       -0.460637,       -1.031453,       1.154123
                    };
            return _data;
        }
    };
//    H: 0.4372
//    E: -0.0492

// ----------------------------------------------------------------------------
// Ribosum75_50N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum75_50N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum75_50N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.714134,       -1.105297,       -0.801841,       -0.749947,       -1.595533
-1.105297,       1.016832,       -1.595533,       -0.460637,       -1.595533
-0.801841,       -1.595533,       0.893578,       -1.031453,       -1.595533
-0.749947,       -0.460637,       -1.031453,       1.154123,       -1.595533
-1.595533,       -1.595533,       -1.595533,       -1.595533,       -1.595533
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum75_50d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum75_50d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum75_50d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.790779,       -5.303692,       -10.594901,       -4.741533,       -9.815315,       -12.400361,       -3.608183,       -11.235179,       -9.093442,       -5.157723,       -12.06403,       -5.601639,       -3.307224,       -11.866221,       -4.695842,       -10.250081
-5.303692,       -1.186507,       -8.581738,       -1.931277,       -9.137121,       -6.06556,       -4.450944,       -8.708227,       -7.060655,       -3.258443,       -9.614483,       -3.542975,       -3.840916,       -9.272196,       -5.810403,       -7.724743
-10.594901,       -8.581738,       -1.772883,       -3.901794,       -9.713664,       -12.404281,       -2.23099,       -10.536531,       -6.651518,       -4.085125,       -4.073645,       -5.681327,       -2.920355,       -10.523016,       -5.56976,       -10.686947
-4.741533,       -1.931277,       -3.901794,       4.118328,       -4.919272,       -3.210909,       2.048058,       -3.842852,       -3.646443,       3.151056,       -4.377136,       0.966471,       1.817795,       -4.213039,       -0.185446,       -2.682962
-9.815315,       -9.137121,       -9.713664,       -4.919272,       -4.92781,       -9.191411,       -2.484189,       -8.082376,       -8.558144,       -4.271325,       -10.057805,       -5.571348,       -2.824907,       -7.990384,       -5.642899,       -8.158717
-12.400361,       -6.06556,       -12.404281,       -3.210909,       -9.191411,       -2.483029,       -3.311071,       -4.366235,       -9.755051,       -2.254958,       -10.980303,       -5.190262,       -4.410977,       -6.990724,       -5.92908,       -4.612996
-3.608183,       -4.450944,       -2.23099,       2.048058,       -2.484189,       -3.311071,       5.373069,       -4.160968,       -4.25866,       2.695258,       -4.03361,       0.279554,       3.158556,       -4.187852,       1.515742,       -2.417663
-11.235179,       -8.708227,       -10.536531,       -3.842852,       -8.082376,       -4.366235,       -4.160968,       -2.362496,       -9.235207,       -3.330748,       -11.237483,       -3.970871,       -3.673877,       -5.313302,       -5.365986,       -5.697771
-9.093442,       -7.060655,       -6.651518,       -3.646443,       -8.558144,       -9.755051,       -4.25866,       -9.235207,       -1.493948,       -2.418426,       -9.847975,       -4.843353,       -3.623097,       -9.153853,       -7.472942,       -9.842907
-5.157723,       -3.258443,       -4.085125,       3.151056,       -4.271325,       -2.254958,       2.695258,       -3.330748,       -2.418426,       5.669928,       -3.39801,       1.827295,       2.182109,       -3.944068,       0.40318,       -2.424013
-12.06403,       -9.614483,       -4.073645,       -4.377136,       -10.057805,       -10.980303,       -4.03361,       -11.237483,       -9.847975,       -3.39801,       -2.715046,       -4.371623,       -4.9553,       -10.896876,       -4.009579,       -8.360398
-5.601639,       -3.542975,       -5.681327,       0.966471,       -5.571348,       -5.190262,       0.279554,       -3.970871,       -4.843353,       1.827295,       -4.371623,       3.073145,       -0.086096,       -4.366074,       -1.621982,       -3.025489
-3.307224,       -3.840916,       -2.920355,       1.817795,       -2.824907,       -4.410977,       3.158556,       -3.673877,       -3.623097,       2.182109,       -4.9553,       -0.086096,       4.405431,       -3.295458,       1.27045,       -2.301393
-11.866221,       -9.272196,       -10.523016,       -4.213039,       -7.990384,       -6.990724,       -4.187852,       -5.313302,       -9.153853,       -3.944068,       -10.896876,       -4.366074,       -3.295458,       -5.465422,       -3.761274,       -6.705291
-4.695842,       -5.810403,       -5.56976,       -0.185446,       -5.642899,       -5.92908,       1.515742,       -5.365986,       -7.472942,       0.40318,       -4.009579,       -1.621982,       1.27045,       -3.761274,       3.020633,       -3.206442
-10.250081,       -7.724743,       -10.686947,       -2.682962,       -8.158717,       -4.612996,       -2.417663,       -5.697771,       -9.842907,       -2.424013,       -8.360398,       -3.025489,       -2.301393,       -6.705291,       -3.206442,       -1.403967
                    };
            return _data;
        }
    };
//    H: 3.3562
//    E: -2.4231


// ----------------------------------------------------------------------------
// Ribosum55_65 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.256756    0.220041    0.300252    0.222952
	struct Ribosum55_65 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum55_65>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.306299,       -2.182654,       -1.783213,       -1.73946
-2.182654,       1.258806,       -2.787371,       -1.189146
-1.783213,       -2.787371,       1.109234,       -2.049914
-1.73946,       -1.189146,       -2.049914,       1.731915
                    };
            return _data;
        }
    };
//    H: 1.0349
//    E: -0.3410

// ----------------------------------------------------------------------------
// Ribosum55_65N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum55_65N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum55_65N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.306299,       -2.182654,       -1.783213,       -1.73946,       -2.787371
-2.182654,       1.258806,       -2.787371,       -1.189146,       -2.787371
-1.783213,       -2.787371,       1.109234,       -2.049914,       -2.787371
-1.73946,       -1.189146,       -2.049914,       1.731915,       -2.787371
-2.787371,       -2.787371,       -2.787371,       -2.787371,       -2.787371
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum55_65d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum55_65d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum55_65d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.776769,       -8.21966,       -8.095747,       -4.6918,       -9.998027,       -14.37905,       -5.194201,       -12.092292,       -6.039659,       -4.778613,       -9.609601,       -6.40734,       -4.721621,       -11.964454,       -6.364036,       -8.577873
-8.21966,       -1.774872,       -9.242487,       -2.077355,       -9.9829,       -9.289855,       -5.934002,       -11.002777,       -10.289245,       -3.809258,       -12.4629,       -5.906857,       -6.007717,       -8.588914,       -7.646698,       -8.015605
-8.095747,       -9.242487,       -0.618813,       -5.959289,       -10.630027,       -14.918717,       -4.882203,       -8.834535,       -9.292952,       -6.415083,       -5.527211,       -6.95545,       -6.611131,       -8.222287,       -5.745292,       -10.584982
-4.6918,       -2.077355,       -5.959289,       4.643804,       -6.138359,       -7.141287,       1.421995,       -5.794541,       -6.221395,       2.527349,       -6.235025,       0.427455,       1.355535,       -5.484047,       -0.746116,       -3.096064
-9.998027,       -9.9829,       -10.630027,       -6.138359,       -5.481492,       -11.563426,       -3.924079,       -7.532444,       -8.628381,       -6.243372,       -11.690768,       -8.519825,       -2.616026,       -7.336147,       -6.290394,       -8.294323
-14.37905,       -9.289855,       -14.918717,       -7.141287,       -11.563426,       -2.669818,       -5.437772,       -6.211409,       -13.817179,       -4.136258,       -12.360221,       -8.30814,       -7.444504,       -8.356594,       -9.019825,       -6.101083
-5.194201,       -5.934002,       -4.882203,       1.421995,       -3.924079,       -5.437772,       5.466478,       -4.882976,       -6.596935,       1.74642,       -4.527589,       -0.620214,       2.522475,       -4.600895,       1.139977,       -4.024044
-12.092292,       -11.002777,       -8.834535,       -5.794541,       -7.532444,       -6.211409,       -4.882976,       -1.736531,       -6.529967,       -6.213935,       -13.453795,       -6.451794,       -4.337585,       -3.910303,       -8.00789,       -4.631609
-6.039659,       -10.289245,       -9.292952,       -6.221395,       -8.628381,       -13.817179,       -6.596935,       -6.529967,       -0.921867,       -5.496549,       -9.563245,       -6.7124,       -6.097262,       -6.296579,       -7.6923,       -11.821641
-4.778613,       -3.809258,       -6.415083,       2.527349,       -6.243372,       -4.136258,       1.74642,       -6.213935,       -5.496549,       5.672428,       -4.823187,       1.006945,       1.247458,       -4.866343,       -0.249982,       -4.3645
-9.609601,       -12.4629,       -5.527211,       -6.235025,       -11.690768,       -12.360221,       -4.527589,       -13.453795,       -9.563245,       -4.823187,       -2.091181,       -5.837592,       -6.306351,       -11.836524,       -4.136046,       -11.736709
-6.40734,       -5.906857,       -6.95545,       0.427455,       -8.519825,       -8.30814,       -0.620214,       -6.451794,       -6.7124,       1.006945,       -5.837592,       3.578574,       -0.883779,       -5.533098,       -2.157784,       -5.067138
-4.721621,       -6.007717,       -6.611131,       1.355535,       -2.616026,       -7.444504,       2.522475,       -4.337585,       -6.097262,       1.247458,       -6.306351,       -0.883779,       5.068534,       -2.978943,       0.967331,       -3.728109
-11.964454,       -8.588914,       -8.222287,       -5.484047,       -7.336147,       -8.356594,       -4.600895,       -3.910303,       -6.296579,       -4.866343,       -11.836524,       -5.533098,       -2.978943,       -3.298991,       -5.073514,       -5.102008
-6.364036,       -7.646698,       -5.745292,       -0.746116,       -6.290394,       -9.019825,       1.139977,       -8.00789,       -7.6923,       -0.249982,       -4.136046,       -2.157784,       0.967331,       -5.073514,       3.458506,       -4.606547
-8.577873,       -8.015605,       -10.584982,       -3.096064,       -8.294323,       -6.101083,       -4.024044,       -4.631609,       -11.821641,       -4.3645,       -11.736709,       -5.067138,       -3.728109,       -5.102008,       -4.606547,       0.13249
                    };
            return _data;
        }
    };
//    H: 3.9131
//    E: -2.8930


// ----------------------------------------------------------------------------
// Ribosum85_60 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.259114    0.220436    0.301642    0.218808
	struct Ribosum85_60 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum85_60>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.221242,       -1.855964,       -1.45774,       -1.385899
-1.855964,       1.158055,       -2.476191,       -1.054315
-1.45774,       -2.476191,       1.031958,       -1.736394
-1.385899,       -1.054315,       -1.736394,       1.653477
                    };
            return _data;
        }
    };
//    H: 0.8834
//    E: -0.2502

// ----------------------------------------------------------------------------
// Ribosum85_60N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum85_60N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum85_60N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.221242,       -1.855964,       -1.45774,       -1.385899,       -2.476191
-1.855964,       1.158055,       -2.476191,       -1.054315,       -2.476191
-1.45774,       -2.476191,       1.031958,       -1.736394,       -2.476191
-1.385899,       -1.054315,       -1.736394,       1.653477,       -2.476191
-2.476191,       -2.476191,       -2.476191,       -2.476191,       -2.476191
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum85_60d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum85_60d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum85_60d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.488349,       -7.042094,       -8.238017,       -4.317463,       -8.842033,       -14.373559,       -4.678511,       -12.640723,       -6.858807,       -5.030739,       -8.393424,       -5.83531,       -4.006673,       -11.323969,       -6.161755,       -9.04821
-7.042094,       -2.108879,       -8.895066,       -2.038769,       -9.372576,       -9.081234,       -5.856881,       -10.446549,       -9.72831,       -3.812753,       -11.052794,       -4.720463,       -5.324754,       -8.66576,       -6.925209,       -7.827377
-8.238017,       -8.895066,       -0.803423,       -5.133726,       -10.407814,       -14.496253,       -4.567757,       -10.140939,       -8.609094,       -5.770632,       -5.383659,       -6.596424,       -5.430794,       -8.871719,       -5.941616,       -11.073954
-4.317463,       -2.038769,       -5.133726,       4.4927,       -5.564446,       -6.705747,       1.673203,       -5.173809,       -5.328293,       2.70482,       -5.60769,       0.593694,       1.608648,       -4.812943,       -0.505944,       -2.979395
-8.842033,       -9.372576,       -10.407814,       -5.564446,       -5.125312,       -10.448895,       -3.567043,       -8.485494,       -7.981155,       -5.949981,       -11.357831,       -7.929741,       -2.415577,       -7.084955,       -5.629131,       -8.393641
-14.373559,       -9.081234,       -14.496253,       -6.705747,       -10.448895,       -3.593042,       -5.704751,       -5.771068,       -12.429263,       -3.701762,       -12.578234,       -7.873675,       -6.87695,       -7.402874,       -8.412817,       -5.406597
-4.678511,       -5.856881,       -4.567757,       1.673203,       -3.567043,       -5.704751,       5.360799,       -4.963137,       -5.996523,       2.11256,       -4.664596,       -0.270488,       2.748442,       -4.909116,       1.31953,       -3.67199
-12.640723,       -10.446549,       -10.140939,       -5.173809,       -8.485494,       -5.771068,       -4.963137,       -2.275363,       -7.708326,       -5.842817,       -13.694318,       -5.612507,       -4.717212,       -3.834964,       -7.352963,       -5.212174
-6.858807,       -9.72831,       -8.609094,       -5.328293,       -7.981155,       -12.429263,       -5.996523,       -7.708326,       -1.046177,       -4.876907,       -8.670446,       -6.09495,       -5.847454,       -6.628842,       -7.551171,       -11.540895
-5.030739,       -3.812753,       -5.770632,       2.70482,       -5.949981,       -3.701762,       2.11256,       -5.842817,       -4.876907,       5.616325,       -4.130013,       1.205393,       1.596571,       -4.485037,       -0.077872,       -3.899205
-8.393424,       -11.052794,       -5.383659,       -5.60769,       -11.357831,       -12.578234,       -4.664596,       -13.694318,       -8.670446,       -4.130013,       -1.97512,       -5.767859,       -5.746373,       -12.010797,       -4.273159,       -10.78661
-5.83531,       -4.720463,       -6.596424,       0.593694,       -7.929741,       -7.873675,       -0.270488,       -5.612507,       -6.09495,       1.205393,       -5.767859,       3.468458,       -0.565905,       -5.302508,       -2.088271,       -4.444826
-4.006673,       -5.324754,       -5.430794,       1.608648,       -2.415577,       -6.87695,       2.748442,       -4.717212,       -5.847454,       1.596571,       -5.746373,       -0.565905,       4.967781,       -2.981881,       1.136473,       -3.387513
-11.323969,       -8.66576,       -8.871719,       -4.812943,       -7.084955,       -7.402874,       -4.909116,       -3.834964,       -6.628842,       -4.485037,       -12.010797,       -5.302508,       -2.981881,       -3.208242,       -4.762134,       -5.975262
-6.161755,       -6.925209,       -5.941616,       -0.505944,       -5.629131,       -8.412817,       1.31953,       -7.352963,       -7.551171,       -0.077872,       -4.273159,       -2.088271,       1.136473,       -4.762134,       3.364318,       -4.27782
-9.04821,       -7.827377,       -11.073954,       -2.979395,       -8.393641,       -5.406597,       -3.67199,       -5.212174,       -11.540895,       -3.899205,       -10.78661,       -4.444826,       -3.387513,       -5.975262,       -4.27782,       -0.018299
                    };
            return _data;
        }
    };
//    H: 3.7601
//    E: -2.7699


// ----------------------------------------------------------------------------
// Ribosum60_60 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.257343    0.219844    0.299638    0.223176
	struct Ribosum60_60 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum60_60>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.288835,       -2.120048,       -1.735299,       -1.674432
-2.120048,       1.245793,       -2.705092,       -1.161031
-1.735299,       -2.705092,       1.099472,       -1.999727
-1.674432,       -1.161031,       -1.999727,       1.715037
                    };
            return _data;
        }
    };
//    H: 1.0072
//    E: -0.3229

// ----------------------------------------------------------------------------
// Ribosum60_60N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum60_60N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum60_60N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.288835,       -2.120048,       -1.735299,       -1.674432,       -2.705092
-2.120048,       1.245793,       -2.705092,       -1.161031,       -2.705092
-1.735299,       -2.705092,       1.099472,       -1.999727,       -2.705092
-1.674432,       -1.161031,       -1.999727,       1.715037,       -2.705092
-2.705092,       -2.705092,       -2.705092,       -2.705092,       -2.705092
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum60_60d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum60_60d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum60_60d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.832478,       -7.999249,       -8.155169,       -4.696226,       -9.635891,       -14.362389,       -5.08053,       -11.952245,       -6.122834,       -4.772129,       -9.676404,       -6.354827,       -4.639078,       -12.0105,       -6.254961,       -8.635541
-7.999249,       -1.775155,       -9.257425,       -2.102645,       -10.010345,       -9.219794,       -5.846187,       -10.98445,       -10.254224,       -3.749906,       -12.319005,       -5.206359,       -5.864113,       -8.600211,       -7.39366,       -8.010742
-8.155169,       -9.257425,       -0.655892,       -5.823367,       -10.610688,       -14.723939,       -4.791555,       -8.902748,       -9.074311,       -6.300442,       -5.509676,       -6.927591,       -5.966923,       -8.295851,       -5.783554,       -10.609908
-4.696226,       -2.102645,       -5.823367,       4.629791,       -6.108912,       -6.926456,       1.474649,       -5.570873,       -6.044991,       2.546035,       -6.188535,       0.437802,       1.377617,       -5.470075,       -0.726839,       -3.095785
-9.635891,       -10.010345,       -10.610688,       -6.108912,       -5.524892,       -11.293873,       -3.889903,       -7.604955,       -8.626739,       -6.035306,       -11.36392,       -8.293482,       -2.655971,       -7.370335,       -6.255954,       -8.336752
-14.362389,       -9.219794,       -14.723939,       -6.926456,       -11.293873,       -2.73136,       -5.299268,       -6.173351,       -13.663056,       -4.062265,       -12.359889,       -8.057865,       -7.269339,       -8.361708,       -8.795521,       -6.054623
-5.08053,       -5.846187,       -4.791555,       1.474649,       -3.889903,       -5.299268,       5.455246,       -4.915056,       -6.495151,       1.853149,       -4.531679,       -0.535202,       2.544928,       -4.629596,       1.164595,       -3.838907
-11.952245,       -10.98445,       -8.902748,       -5.570873,       -7.604955,       -6.173351,       -4.915056,       -1.804556,       -6.59187,       -6.151451,       -13.462671,       -6.072757,       -4.364809,       -3.921201,       -7.775905,       -4.689689
-6.122834,       -10.254224,       -9.074311,       -6.044991,       -8.626739,       -13.663056,       -6.495151,       -6.59187,       -0.936194,       -5.265901,       -9.582359,       -6.562596,       -6.046528,       -6.361216,       -7.736821,       -11.769416
-4.772129,       -3.749906,       -6.300442,       2.546035,       -6.035306,       -4.062265,       1.853149,       -6.151451,       -5.265901,       5.666613,       -4.692006,       1.065498,       1.311055,       -4.847272,       -0.215101,       -4.253
-9.676404,       -12.319005,       -5.509676,       -6.188535,       -11.36392,       -12.359889,       -4.531679,       -13.462671,       -9.582359,       -4.692006,       -2.097033,       -5.751014,       -6.251185,       -11.83731,       -4.176169,       -11.757391
-6.354827,       -5.206359,       -6.927591,       0.437802,       -8.293482,       -8.057865,       -0.535202,       -6.072757,       -6.562596,       1.065498,       -5.751014,       3.556625,       -0.843351,       -5.301353,       -2.145788,       -4.990085
-4.639078,       -5.864113,       -5.966923,       1.377617,       -2.655971,       -7.269339,       2.544928,       -4.364809,       -6.046528,       1.311055,       -6.251185,       -0.843351,       5.048879,       -3.017858,       0.974056,       -3.661797
-12.0105,       -8.600211,       -8.295851,       -5.470075,       -7.370335,       -8.361708,       -4.629596,       -3.921201,       -6.361216,       -4.847272,       -11.83731,       -5.301353,       -3.017858,       -3.260682,       -4.965362,       -5.120856
-6.254961,       -7.39366,       -5.783554,       -0.726839,       -6.255954,       -8.795521,       1.164595,       -7.775905,       -7.736821,       -0.215101,       -4.176169,       -2.145788,       0.974056,       -4.965362,       3.442436,       -4.392495
-8.635541,       -8.010742,       -10.609908,       -3.095785,       -8.336752,       -6.054623,       -3.838907,       -4.689689,       -11.769416,       -4.253,       -11.757391,       -4.990085,       -3.661797,       -5.120856,       -4.392495,       0.080197
                    };
            return _data;
        }
    };
//    H: 3.8850
//    E: -2.8605


// ----------------------------------------------------------------------------
// Ribosum70_50 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.272393    0.208047    0.279767    0.239792
	struct Ribosum70_50 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum70_50>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.688977,       -1.041078,       -0.773431,       -0.71595
-1.041078,       0.98716,       -1.554064,       -0.413138
-0.773431,       -1.554064,       0.881807,       -1.013851
-0.71595,       -0.413138,       -1.013851,       1.131119
                    };
            return _data;
        }
    };
//    H: 0.4152
//    E: -0.0417

// ----------------------------------------------------------------------------
// Ribosum70_50N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum70_50N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum70_50N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.688977,       -1.041078,       -0.773431,       -0.71595,       -1.554064
-1.041078,       0.98716,       -1.554064,       -0.413138,       -1.554064
-0.773431,       -1.554064,       0.881807,       -1.013851,       -1.554064
-0.71595,       -0.413138,       -1.013851,       1.131119,       -1.554064
-1.554064,       -1.554064,       -1.554064,       -1.554064,       -1.554064
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum70_50d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum70_50d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum70_50d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.642484,       -4.738011,       -10.264517,       -4.298291,       -10.906011,       -12.088517,       -4.403214,       -11.31134,       -8.723338,       -5.219596,       -11.772724,       -6.022409,       -3.665261,       -11.605181,       -4.372287,       -10.125719
-4.738011,       -1.338073,       -8.160523,       -2.013534,       -9.760379,       -5.608832,       -4.13878,       -8.588886,       -7.785417,       -3.458983,       -10.040381,       -3.667258,       -3.420694,       -9.052139,       -5.438206,       -7.790813
-10.264517,       -8.160523,       -1.915497,       -4.119927,       -10.662605,       -12.220694,       -2.244378,       -11.164028,       -6.308925,       -4.18483,       -4.541059,       -6.319082,       -3.053554,       -10.240442,       -5.388447,       -10.680126
-4.298291,       -2.013534,       -4.119927,       4.14329,       -5.749735,       -3.069347,       1.986824,       -3.679222,       -3.369301,       3.139429,       -5.026019,       0.997625,       1.809949,       -4.260484,       -0.292875,       -3.019041
-10.906011,       -9.760379,       -10.662605,       -5.749735,       -5.037516,       -8.713995,       -2.569321,       -7.841917,       -9.163042,       -4.098507,       -10.571954,       -6.485211,       -2.851818,       -8.401223,       -5.702006,       -8.080811
-12.088517,       -5.608832,       -12.220694,       -3.069347,       -8.713995,       -3.126484,       -3.168067,       -4.019356,       -9.441628,       -2.386899,       -10.753333,       -5.095484,       -4.034634,       -6.540556,       -5.500765,       -4.679585
-4.403214,       -4.13878,       -2.244378,       1.986824,       -2.569321,       -3.168067,       5.371816,       -4.542686,       -4.608851,       2.58929,       -4.081002,       0.223623,       3.190998,       -3.854434,       1.572891,       -2.444019
-11.31134,       -8.588886,       -11.164028,       -3.679222,       -7.841917,       -4.019356,       -4.542686,       -2.739154,       -8.896364,       -3.481755,       -10.959592,       -4.021705,       -3.488374,       -4.932035,       -6.052606,       -5.28273
-8.723338,       -7.785417,       -6.308925,       -3.369301,       -9.163042,       -9.441628,       -4.608851,       -8.896364,       -1.470182,       -2.478106,       -9.919334,       -4.616412,       -3.791568,       -8.793123,       -7.498101,       -9.412076
-5.219596,       -3.458983,       -4.18483,       3.139429,       -4.098507,       -2.386899,       2.58929,       -3.481755,       -2.478106,       5.67941,       -3.687965,       1.797528,       2.135552,       -3.874247,       0.371649,       -2.527547
-11.772724,       -10.040381,       -4.541059,       -5.026019,       -10.571954,       -10.753333,       -4.081002,       -10.959592,       -9.919334,       -3.687965,       -2.888009,       -4.401139,       -5.029699,       -11.171259,       -4.137147,       -8.555493
-6.022409,       -3.667258,       -6.319082,       0.997625,       -6.485211,       -5.095484,       0.223623,       -4.021705,       -4.616412,       1.797528,       -4.401139,       3.129859,       -0.133308,       -4.291368,       -1.71353,       -3.258176
-3.665261,       -3.420694,       -3.053554,       1.809949,       -2.851818,       -4.034634,       3.190998,       -3.488374,       -3.791568,       2.135552,       -5.029699,       -0.133308,       4.41948,       -3.051893,       1.2007,       -2.477904
-11.605181,       -9.052139,       -10.240442,       -4.260484,       -8.401223,       -6.540556,       -3.854434,       -4.932035,       -8.793123,       -3.874247,       -11.171259,       -4.291368,       -3.051893,       -4.948188,       -3.418617,       -6.339469
-4.372287,       -5.438206,       -5.388447,       -0.292875,       -5.702006,       -5.500765,       1.572891,       -6.052606,       -7.498101,       0.371649,       -4.137147,       -1.71353,       1.2007,       -3.418617,       3.03819,       -3.271509
-10.125719,       -7.790813,       -10.680126,       -3.019041,       -8.080811,       -4.679585,       -2.444019,       -5.28273,       -9.412076,       -2.527547,       -8.555493,       -3.258176,       -2.477904,       -6.339469,       -3.271509,       -0.863052
                    };
            return _data;
        }
    };
//    H: 3.3886
//    E: -2.4438


// ----------------------------------------------------------------------------
// Ribosum65_55 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.266716    0.211994    0.287405    0.233886
	struct Ribosum65_55 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum65_55>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.936238,       -1.407067,       -1.049676,       -1.042434
-1.407067,       1.108121,       -2.06668,       -0.616863
-1.049676,       -2.06668,       1.005642,       -1.318329
-1.042434,       -0.616863,       -1.318329,       1.356644
                    };
            return _data;
        }
    };
//    H: 0.6194
//    E: -0.1254

// ----------------------------------------------------------------------------
// Ribosum65_55N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum65_55N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum65_55N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.936238,       -1.407067,       -1.049676,       -1.042434,       -2.06668
-1.407067,       1.108121,       -2.06668,       -0.616863,       -2.06668
-1.049676,       -2.06668,       1.005642,       -1.318329,       -2.06668
-1.042434,       -0.616863,       -1.318329,       1.356644,       -2.06668
-2.06668,       -2.06668,       -2.06668,       -2.06668,       -2.06668
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum65_55d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum65_55d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum65_55d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.007571,       -4.279027,       -9.214215,       -4.7812,       -10.084665,       -12.341303,       -4.321893,       -11.701476,       -7.291039,       -5.212765,       -10.666255,       -4.549229,       -4.275525,       -11.992371,       -6.749579,       -9.275613
-4.279027,       -1.08109,       -9.869002,       -1.966406,       -10.141244,       -8.956717,       -5.536086,       -8.662709,       -9.08099,       -3.553387,       -11.601402,       -4.95573,       -5.359939,       -8.653977,       -7.671875,       -6.751122
-9.214215,       -9.869002,       -1.337611,       -4.141394,       -11.002699,       -15.21268,       -3.334947,       -10.121201,       -7.042875,       -5.166429,       -4.148836,       -7.266465,       -3.941968,       -9.497421,       -5.905659,       -10.898354
-4.7812,       -1.966406,       -4.141394,       4.36025,       -5.407297,       -3.478397,       1.797617,       -4.716916,       -3.578882,       2.993148,       -5.115836,       0.853858,       1.763156,       -4.35048,       -0.421213,       -2.819725
-10.084665,       -10.141244,       -11.002699,       -5.407297,       -5.231997,       -6.935378,       -2.824194,       -8.312836,       -8.522067,       -4.738341,       -9.345678,       -5.858684,       -2.323822,       -7.84105,       -5.78454,       -8.624878
-12.341303,       -8.956717,       -15.21268,       -3.478397,       -6.935378,       -2.156963,       -3.389135,       -3.86652,       -11.531574,       -2.493476,       -10.212954,       -5.616616,       -3.277646,       -7.317628,       -4.290283,       -3.206122
-4.321893,       -5.536086,       -3.334947,       1.797617,       -2.824194,       -3.389135,       5.437637,       -4.763784,       -5.68405,       2.21846,       -4.355069,       -0.267761,       2.915634,       -4.579596,       1.337672,       -3.607246
-11.701476,       -8.662709,       -10.121201,       -4.716916,       -8.312836,       -3.86652,       -4.763784,       -2.358467,       -7.843881,       -4.648589,       -12.363068,       -4.884535,       -3.049035,       -4.989988,       -4.855726,       -5.21397
-7.291039,       -9.08099,       -7.042875,       -3.578882,       -8.522067,       -11.531574,       -5.68405,       -7.843881,       -1.493378,       -2.986884,       -9.497695,       -4.780333,       -5.111163,       -7.576469,       -8.265296,       -11.690949
-5.212765,       -3.553387,       -5.166429,       2.993148,       -4.738341,       -2.493476,       2.21846,       -4.648589,       -2.986884,       5.688195,       -3.31187,       1.538408,       1.792883,       -4.257973,       -0.097123,       -2.716237
-10.666255,       -11.601402,       -4.148836,       -5.115836,       -9.345678,       -10.212954,       -4.355069,       -12.363068,       -9.497695,       -3.31187,       -2.498666,       -4.514152,       -4.680953,       -11.007341,       -3.984145,       -11.306022
-4.549229,       -4.95573,       -7.266465,       0.853858,       -5.858684,       -5.616616,       -0.267761,       -4.884535,       -4.780333,       1.538408,       -4.514152,       3.24486,       -0.394219,       -5.36095,       -2.264831,       -4.11215
-4.275525,       -5.359939,       -3.941968,       1.763156,       -2.323822,       -3.277646,       2.915634,       -3.049035,       -5.111163,       1.792883,       -4.680953,       -0.394219,       4.707654,       -3.207073,       1.153348,       -2.660843
-11.992371,       -8.653977,       -9.497421,       -4.35048,       -7.84105,       -7.317628,       -4.579596,       -4.989988,       -7.576469,       -4.257973,       -11.007341,       -5.36095,       -3.207073,       -4.376989,       -3.207787,       -5.770409
-6.749579,       -7.671875,       -5.905659,       -0.421213,       -5.78454,       -4.290283,       1.337672,       -4.855726,       -8.265296,       -0.097123,       -3.984145,       -2.264831,       1.153348,       -3.207787,       3.196861,       -3.733438
-9.275613,       -6.751122,       -10.898354,       -2.819725,       -8.624878,       -3.206122,       -3.607246,       -5.21397,       -11.690949,       -2.716237,       -11.306022,       -4.11215,       -2.660843,       -5.770409,       -3.733438,       -0.878331
                    };
            return _data;
        }
    };
//    H: 3.5785
//    E: -2.5486


// ----------------------------------------------------------------------------
// Ribosum45_35 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.258354    0.219508    0.297341    0.224797
	struct Ribosum45_35 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum45_35>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.973044,       -1.345996,       -0.923456,       -1.006842
-1.345996,       1.001868,       -1.702777,       -0.615527
-0.923456,       -1.702777,       0.855054,       -1.114654
-1.006842,       -0.615527,       -1.114654,       1.38377
                    };
            return _data;
        }
    };
//    H: 0.5631
//    E: -0.0963

// ----------------------------------------------------------------------------
// Ribosum45_35N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum45_35N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum45_35N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.973044,       -1.345996,       -0.923456,       -1.006842,       -1.702777
-1.345996,       1.001868,       -1.702777,       -0.615527,       -1.702777
-0.923456,       -1.702777,       0.855054,       -1.114654,       -1.702777
-1.006842,       -0.615527,       -1.114654,       1.38377,       -1.702777
-1.702777,       -1.702777,       -1.702777,       -1.702777,       -1.702777
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum45_35d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum45_35d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum45_35d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.613019,       -8.459354,       -8.824666,       -5.067476,       -10.070873,       -13.465521,       -3.873641,       -12.118413,       -6.624883,       -5.225509,       -9.682407,       -6.512629,       -2.490034,       -12.287764,       -3.545588,       -8.84662
-8.459354,       -1.863759,       -9.60605,       -1.65512,       -10.554648,       -8.873423,       -5.431578,       -10.687028,       -7.182754,       -2.69741,       -10.393786,       -4.929044,       -5.59941,       -8.897647,       -7.177025,       -8.38787
-8.824666,       -9.60605,       -1.324703,       -6.07136,       -10.655816,       -15.169599,       -2.572889,       -9.369986,       -9.403392,       -6.297621,       -4.226996,       -7.124388,       -2.826531,       -8.017557,       -5.831987,       -9.773941
-5.067476,       -1.65512,       -6.07136,       4.25334,       -5.770423,       -2.374444,       2.029002,       -4.176332,       -3.790401,       2.876636,       -4.932135,       0.74428,       1.878536,       -4.547552,       -0.394135,       -2.458491
-10.070873,       -10.554648,       -10.655816,       -5.770423,       -6.215014,       -11.704913,       -3.242465,       -8.334411,       -7.754057,       -5.399994,       -11.489624,       -6.200984,       -2.909735,       -8.029071,       -6.192704,       -8.857105
-13.465521,       -8.873423,       -15.169599,       -2.374444,       -11.704913,       -3.459278,       -5.076189,       -6.847984,       -12.890288,       -3.75669,       -12.063372,       -7.115835,       -6.474005,       -8.960104,       -8.311199,       -6.654819
-3.873641,       -5.431578,       -2.572889,       2.029002,       -3.242465,       -5.076189,       5.222132,       -4.380515,       -6.02612,       2.799118,       -4.710975,       0.249333,       2.927177,       -4.336104,       1.190241,       -3.011223
-12.118413,       -10.687028,       -9.369986,       -4.176332,       -8.334411,       -6.847984,       -4.380515,       -2.562037,       -7.128886,       -2.204927,       -9.154697,       -4.402372,       -4.326063,       -4.662291,       -6.480025,       -5.437907
-6.624883,       -7.182754,       -9.403392,       -3.790401,       -7.754057,       -12.890288,       -6.02612,       -7.128886,       -1.621111,       -2.57162,       -9.901564,       -6.192815,       -4.881152,       -6.958001,       -7.681543,       -10.160221
-5.225509,       -2.69741,       -6.297621,       2.876636,       -5.399994,       -3.75669,       2.799118,       -2.204927,       -2.57162,       5.489473,       -4.781893,       1.423675,       1.88834,       -4.169086,       0.3292,       -3.035813
-9.682407,       -10.393786,       -4.226996,       -4.932135,       -11.489624,       -12.063372,       -4.710975,       -9.154697,       -9.901564,       -4.781893,       -2.30763,       -5.536262,       -6.328119,       -10.554823,       -4.34238,       -5.020431
-6.512629,       -4.929044,       -7.124388,       0.74428,       -6.200984,       -7.115835,       0.249333,       -4.402372,       -6.192815,       1.423675,       -5.536262,       3.32123,       0.061974,       -4.60428,       -1.262052,       -2.578518
-2.490034,       -5.59941,       -2.826531,       1.878536,       -2.909735,       -6.474005,       2.927177,       -4.326063,       -4.881152,       1.88834,       -6.328119,       0.061974,       4.724819,       -3.523567,       1.044566,       -1.582756
-12.287764,       -8.897647,       -8.017557,       -4.547552,       -8.029071,       -8.960104,       -4.336104,       -4.662291,       -6.958001,       -4.169086,       -10.554823,       -4.60428,       -3.523567,       -4.121195,       -4.196155,       -5.905366
-3.545588,       -7.177025,       -5.831987,       -0.394135,       -6.192704,       -8.311199,       1.190241,       -6.480025,       -7.681543,       0.3292,       -4.34238,       -1.262052,       1.044566,       -4.196155,       3.189913,       -3.650589
-8.84662,       -8.38787,       -9.773941,       -2.458491,       -8.857105,       -6.654819,       -3.011223,       -5.437907,       -10.160221,       -3.035813,       -5.020431,       -2.578518,       -1.582756,       -5.905366,       -3.650589,       -0.71287
                    };
            return _data;
        }
    };
//    H: 3.4649
//    E: -2.6057


// ----------------------------------------------------------------------------
// Ribosum60_65 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.257462    0.219452    0.299498    0.223587
	struct Ribosum60_65 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum60_65>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.301152,       -2.188663,       -1.789078,       -1.75067
-2.188663,       1.264339,       -2.785584,       -1.194934
-1.789078,       -2.785584,       1.114125,       -2.056032
-1.75067,       -1.194934,       -2.056032,       1.728751
                    };
            return _data;
        }
    };
//    H: 1.0363
//    E: -0.3420

// ----------------------------------------------------------------------------
// Ribosum60_65N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum60_65N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum60_65N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.301152,       -2.188663,       -1.789078,       -1.75067,       -2.785584
-2.188663,       1.264339,       -2.785584,       -1.194934,       -2.785584
-1.789078,       -2.785584,       1.114125,       -2.056032,       -2.785584
-1.75067,       -1.194934,       -2.056032,       1.728751,       -2.785584
-2.785584,       -2.785584,       -2.785584,       -2.785584,       -2.785584
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum60_65d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum60_65d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum60_65d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.778114,       -8.234368,       -8.110696,       -4.700939,       -10.012735,       -14.38593,       -5.201321,       -12.107144,       -6.054608,       -4.785733,       -9.616962,       -6.422432,       -4.730511,       -11.979305,       -6.379128,       -8.600696
-8.234368,       -1.76507,       -9.249608,       -2.092206,       -9.989779,       -9.288906,       -5.933293,       -11.0098,       -10.296365,       -3.783576,       -12.462432,       -5.91412,       -6.022665,       -8.595936,       -7.653962,       -8.0306
-8.110696,       -9.249608,       -0.625982,       -5.974449,       -10.637147,       -14.918008,       -4.881735,       -8.841798,       -9.300313,       -6.414615,       -5.526984,       -6.962954,       -6.626223,       -8.22955,       -5.752796,       -10.600217
-4.700939,       -2.092206,       -5.974449,       4.648452,       -6.153211,       -7.14831,       1.414732,       -5.809535,       -6.236487,       2.520171,       -6.242529,       0.415637,       1.334738,       -5.499118,       -0.761353,       -3.119045
-10.012735,       -9.989779,       -10.637147,       -6.153211,       -5.488372,       -11.562477,       -3.92337,       -7.539789,       -8.635501,       -6.242664,       -11.6903,       -8.527088,       -2.630181,       -7.34317,       -6.297657,       -8.309318
-14.38593,       -9.288906,       -14.918008,       -7.14831,       -11.562477,       -2.661041,       -5.429235,       -6.210602,       -13.81647,       -4.12772,       -12.351925,       -8.307574,       -7.451526,       -8.355788,       -9.019259,       -6.108248
-5.201321,       -5.933293,       -4.881735,       1.414732,       -3.92337,       -5.429235,       5.477638,       -4.882411,       -6.596467,       1.754742,       -4.519532,       -0.619759,       2.515279,       -4.60033,       1.140417,       -4.03145
-12.107144,       -11.0098,       -8.841798,       -5.809535,       -7.539789,       -6.210602,       -4.882411,       -1.742665,       -6.53723,       -6.213369,       -13.45347,       -6.4592,       -4.352614,       -3.917468,       -8.015296,       -4.646746
-6.054608,       -10.296365,       -9.300313,       -6.236487,       -8.635501,       -13.81647,       -6.596467,       -6.53723,       -0.929228,       -5.496081,       -9.563018,       -6.712351,       -6.112354,       -6.303842,       -7.699803,       -11.836876
-4.785733,       -3.783576,       -6.414615,       2.520171,       -6.242664,       -4.12772,       1.754742,       -6.213369,       -5.496081,       5.683708,       -4.799278,       1.007814,       1.240195,       -4.865778,       -0.249657,       -4.371906
-9.616962,       -12.462432,       -5.526984,       -6.242529,       -11.6903,       -12.351925,       -4.519532,       -13.45347,       -9.563018,       -4.799278,       -2.082194,       -5.833981,       -6.313855,       -11.836199,       -4.135961,       -11.744355
-6.422432,       -5.91412,       -6.962954,       0.415637,       -8.527088,       -8.307574,       -0.619759,       -6.4592,       -6.712351,       1.007814,       -5.833981,       3.576758,       -0.898837,       -5.540504,       -2.16543,       -5.082613
-4.730511,       -6.022665,       -6.626223,       1.334738,       -2.630181,       -7.451526,       2.515279,       -4.352614,       -6.112354,       1.240195,       -6.313855,       -0.898837,       5.067215,       -2.990802,       0.953537,       -3.751098
-11.979305,       -8.595936,       -8.22955,       -5.499118,       -7.34317,       -8.355788,       -4.60033,       -3.917468,       -6.303842,       -4.865778,       -11.836199,       -5.540504,       -2.990802,       -3.191895,       -5.073348,       -5.111907
-6.379128,       -7.653962,       -5.752796,       -0.761353,       -6.297657,       -9.019259,       1.140417,       -8.015296,       -7.699803,       -0.249657,       -4.135961,       -2.16543,       0.953537,       -5.073348,       3.455664,       -4.621925
-8.600696,       -8.0306,       -10.600217,       -3.119045,       -8.309318,       -6.108248,       -4.03145,       -4.646746,       -11.836876,       -4.371906,       -11.744355,       -5.082613,       -3.751098,       -5.111907,       -4.621925,       0.12879
                    };
            return _data;
        }
    };
//    H: 3.9196
//    E: -2.8948


// ----------------------------------------------------------------------------
// Ribosum100_35 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.258251    0.219570    0.297390    0.224789
	struct Ribosum100_35 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum100_35>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.973243,       -1.345056,       -0.923217,       -1.008059
-1.345056,       1.001678,       -1.699819,       -0.615004
-0.923217,       -1.699819,       0.854726,       -1.114157
-1.008059,       -0.615004,       -1.114157,       1.383881
                    };
            return _data;
        }
    };
//    H: 0.5628
//    E: -0.0961

// ----------------------------------------------------------------------------
// Ribosum100_35N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum100_35N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum100_35N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.973243,       -1.345056,       -0.923217,       -1.008059,       -1.699819
-1.345056,       1.001678,       -1.699819,       -0.615004,       -1.699819
-0.923217,       -1.699819,       0.854726,       -1.114157,       -1.699819
-1.008059,       -0.615004,       -1.114157,       1.383881,       -1.699819
-1.699819,       -1.699819,       -1.699819,       -1.699819,       -1.699819
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum100_35d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum100_35d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum100_35d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.602836,       -8.469565,       -8.821086,       -5.074235,       -10.055606,       -13.45174,       -3.871153,       -12.103943,       -6.624318,       -5.224986,       -9.691479,       -6.496019,       -2.485541,       -12.262023,       -3.544942,       -8.865153
-8.469565,       -1.853251,       -9.594263,       -1.653292,       -10.552404,       -8.854678,       -5.438665,       -10.681846,       -7.169892,       -2.696159,       -10.383846,       -4.924115,       -5.603296,       -8.877155,       -7.165704,       -8.383852
-8.821086,       -9.594263,       -1.326721,       -6.067736,       -10.646617,       -15.137108,       -2.572538,       -9.35681,       -9.390254,       -6.291856,       -4.223659,       -7.125249,       -2.825868,       -8.010557,       -5.828944,       -9.760424
-5.074235,       -1.653292,       -6.067736,       4.254784,       -5.777001,       -2.373916,       2.029397,       -4.177615,       -3.790805,       2.875561,       -4.929646,       0.74519,       1.878789,       -4.53951,       -0.394783,       -2.453624
-10.055606,       -10.552404,       -10.646617,       -5.777001,       -6.204804,       -11.694347,       -3.240895,       -8.324788,       -7.764081,       -5.397047,       -11.479854,       -6.201035,       -2.906682,       -8.029588,       -6.205693,       -8.848881
-13.45174,       -8.854678,       -15.137108,       -2.373916,       -11.694347,       -3.457774,       -5.068367,       -6.862686,       -12.896165,       -3.755178,       -12.064983,       -7.102942,       -6.466914,       -8.947167,       -8.303746,       -6.640225
-3.871153,       -5.438665,       -2.572538,       2.029397,       -3.240895,       -5.068367,       5.220945,       -4.387101,       -6.02949,       2.799648,       -4.708946,       0.250418,       2.925681,       -4.345284,       1.188952,       -3.007572
-12.103943,       -10.681846,       -9.35681,       -4.177615,       -8.324788,       -6.862686,       -4.387101,       -2.5591,       -7.14089,       -2.204872,       -9.136109,       -4.40974,       -4.325743,       -4.668449,       -6.469926,       -5.427341
-6.624318,       -7.169892,       -9.390254,       -3.790805,       -7.764081,       -12.896165,       -6.02949,       -7.14089,       -1.623033,       -2.57012,       -9.907042,       -6.188825,       -4.867918,       -6.980093,       -7.672468,       -10.14418
-5.224986,       -2.696159,       -6.291856,       2.875561,       -5.397047,       -3.755178,       2.799648,       -2.204872,       -2.57012,       5.487917,       -4.775327,       1.424391,       1.887915,       -4.161989,       0.327214,       -3.033892
-9.691479,       -10.383846,       -4.223659,       -4.929646,       -11.479854,       -12.064983,       -4.708946,       -9.136109,       -9.907042,       -4.775327,       -2.306269,       -5.534278,       -6.320834,       -10.56844,       -4.341664,       -5.019003
-6.496019,       -4.924115,       -7.125249,       0.74519,       -6.201035,       -7.102942,       0.250418,       -4.40974,       -6.188825,       1.424391,       -5.534278,       3.321054,       0.062652,       -4.611037,       -1.260632,       -2.573382
-2.485541,       -5.603296,       -2.825868,       1.878789,       -2.906682,       -6.466914,       2.925681,       -4.325743,       -4.867918,       1.887915,       -6.320834,       0.062652,       4.725481,       -3.528521,       1.044421,       -1.579161
-12.262023,       -8.877155,       -8.010557,       -4.53951,       -8.029588,       -8.947167,       -4.345284,       -4.668449,       -6.980093,       -4.161989,       -10.56844,       -4.611037,       -3.528521,       -4.137353,       -4.198705,       -5.902582
-3.544942,       -7.165704,       -5.828944,       -0.394783,       -6.205693,       -8.303746,       1.188952,       -6.469926,       -7.672468,       0.327214,       -4.341664,       -1.260632,       1.044421,       -4.198705,       3.190287,       -3.642957
-8.865153,       -8.383852,       -9.760424,       -2.453624,       -8.848881,       -6.640225,       -3.007572,       -5.427341,       -10.14418,       -3.033892,       -5.019003,       -2.573382,       -1.579161,       -5.902582,       -3.642957,       -0.712879
                    };
            return _data;
        }
    };
//    H: 3.4641
//    E: -2.6042


// ----------------------------------------------------------------------------
// Ribosum85_70 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.258822    0.220294    0.302585    0.218300
	struct Ribosum85_70 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum85_70>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.272114,       -2.043922,       -1.602082,       -1.564512
-2.043922,       1.206515,       -2.685465,       -1.175474
-1.602082,       -2.685465,       1.072354,       -1.909165
-1.564512,       -1.175474,       -1.909165,       1.710508
                    };
            return _data;
        }
    };
//    H: 0.9718
//    E: -0.3016

// ----------------------------------------------------------------------------
// Ribosum85_70N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum85_70N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum85_70N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.272114,       -2.043922,       -1.602082,       -1.564512,       -2.685465
-2.043922,       1.206515,       -2.685465,       -1.175474,       -2.685465
-1.602082,       -2.685465,       1.072354,       -1.909165,       -2.685465
-1.564512,       -1.175474,       -1.909165,       1.710508,       -2.685465
-2.685465,       -2.685465,       -2.685465,       -2.685465,       -2.685465
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum85_70d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum85_70d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum85_70d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.355294,       -7.557821,       -8.126032,       -4.251012,       -8.835666,       -14.52725,       -4.820044,       -12.934216,       -6.721959,       -5.016379,       -8.356266,       -5.687888,       -4.097227,       -11.276669,       -6.253162,       -8.89306
-7.557821,       -2.108932,       -8.824987,       -2.102321,       -9.413059,       -10.501998,       -6.116173,       -10.854415,       -9.852683,       -3.799544,       -11.491089,       -5.76468,       -5.672092,       -8.901659,       -7.077359,       -7.747486
-8.126032,       -8.824987,       -0.715804,       -5.418151,       -10.685524,       -15.685304,       -4.880259,       -9.848553,       -9.413508,       -5.957276,       -5.378261,       -6.791567,       -6.422763,       -8.534551,       -5.971643,       -11.122123
-4.251012,       -2.102321,       -5.418151,       4.563444,       -5.790615,       -7.337798,       1.549057,       -5.490829,       -5.749062,       2.625458,       -5.876731,       0.531985,       1.534412,       -4.988158,       -0.606662,       -3.027405
-8.835666,       -9.413059,       -10.685524,       -5.790615,       -5.06701,       -11.354745,       -3.650774,       -8.340775,       -7.932092,       -6.156342,       -12.350309,       -8.296244,       -2.389011,       -6.896786,       -5.639069,       -8.308832
-14.52725,       -10.501998,       -15.685304,       -7.337798,       -11.354745,       -3.493331,       -5.901624,       -6.095001,       -13.291554,       -3.77534,       -12.607492,       -8.345586,       -7.238731,       -7.47438,       -8.994955,       -5.677681
-4.820044,       -6.116173,       -4.880259,       1.549057,       -3.650774,       -5.901624,       5.406728,       -5.000364,       -6.244224,       1.8977,       -4.679909,       -0.424087,       2.663807,       -5.095401,       1.277252,       -4.167291
-12.934216,       -10.854415,       -9.848553,       -5.490829,       -8.340775,       -6.095001,       -5.000364,       -2.118577,       -7.459501,       -6.089695,       -14.208684,       -6.396725,       -4.745079,       -3.795134,       -7.534594,       -5.242398
-6.721959,       -9.852683,       -9.413508,       -5.749062,       -7.932092,       -13.291554,       -6.244224,       -7.459501,       -1.040043,       -5.406067,       -8.879526,       -6.399224,       -6.342275,       -6.345978,       -7.502723,       -12.234103
-5.016379,       -3.799544,       -5.957276,       2.625458,       -6.156342,       -3.77534,       1.8977,       -6.089695,       -5.406067,       5.643514,       -4.390806,       1.082753,       1.434674,       -4.657499,       -0.177236,       -4.37946
-8.356266,       -11.491089,       -5.378261,       -5.876731,       -12.350309,       -12.607492,       -4.679909,       -14.208684,       -8.879526,       -4.390806,       -1.914013,       -6.086848,       -5.95616,       -12.317831,       -4.171845,       -10.847474
-5.687888,       -5.76468,       -6.791567,       0.531985,       -8.296244,       -8.345586,       -0.424087,       -6.396725,       -6.399224,       1.082753,       -6.086848,       3.5252,       -0.6855,       -5.917508,       -2.128892,       -4.754847
-4.097227,       -5.672092,       -6.422763,       1.534412,       -2.389011,       -7.238731,       2.663807,       -4.745079,       -6.342275,       1.434674,       -5.95616,       -0.6855,       5.036885,       -2.905108,       1.06577,       -3.690007
-11.276669,       -8.901659,       -8.534551,       -4.988158,       -6.896786,       -7.47438,       -5.095401,       -3.795134,       -6.345978,       -4.657499,       -12.317831,       -5.917508,       -2.905108,       -3.012097,       -4.897683,       -5.930529
-6.253162,       -7.077359,       -5.971643,       -0.606662,       -5.639069,       -8.994955,       1.277252,       -7.534594,       -7.502723,       -0.177236,       -4.171845,       -2.128892,       1.06577,       -4.897683,       3.414409,       -4.553027
-8.89306,       -7.747486,       -11.122123,       -3.027405,       -8.308832,       -5.677681,       -4.167291,       -5.242398,       -12.234103,       -4.37946,       -10.847474,       -4.754847,       -3.690007,       -5.930529,       -4.553027,       0.129519
                    };
            return _data;
        }
    };
//    H: 3.8446
//    E: -2.8627


// ----------------------------------------------------------------------------
// Ribosum95_30 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.259552    0.218980    0.296918    0.224550
	struct Ribosum95_30 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum95_30>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.958174,       -1.329043,       -0.914064,       -0.969334
-1.329043,       0.994025,       -1.689368,       -0.618035
-0.914064,       -1.689368,       0.85173,       -1.102022
-0.969334,       -0.618035,       -1.102022,       1.372231
                    };
            return _data;
        }
    };
//    H: 0.5534
//    E: -0.0923

// ----------------------------------------------------------------------------
// Ribosum95_30N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum95_30N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum95_30N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.958174,       -1.329043,       -0.914064,       -0.969334,       -1.689368
-1.329043,       0.994025,       -1.689368,       -0.618035,       -1.689368
-0.914064,       -1.689368,       0.85173,       -1.102022,       -1.689368
-0.969334,       -0.618035,       -1.102022,       1.372231,       -1.689368
-1.689368,       -1.689368,       -1.689368,       -1.689368,       -1.689368
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum95_30d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum95_30d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum95_30d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.835119,       -8.541358,       -9.170691,       -4.959079,       -9.971389,       -13.464993,       -3.824774,       -11.940089,       -6.945125,       -5.179178,       -9.662826,       -6.415172,       -2.489391,       -11.833961,       -3.647953,       -8.89018
-8.541358,       -2.062983,       -9.338537,       -1.624791,       -10.361049,       -8.795068,       -5.34671,       -10.613699,       -7.670179,       -2.701547,       -10.14056,       -4.681856,       -5.399806,       -8.905735,       -7.122598,       -8.299115
-9.170691,       -9.338537,       -1.333085,       -5.886571,       -10.348726,       -14.748852,       -2.561742,       -9.49776,       -9.633914,       -6.115055,       -4.364315,       -7.082788,       -2.84251,       -7.962839,       -5.781757,       -9.534391
-4.959079,       -1.624791,       -5.886571,       4.220298,       -5.609864,       -2.479254,       2.054811,       -4.126205,       -3.860464,       2.88894,       -4.8051,       0.740873,       1.903224,       -4.300595,       -0.375929,       -2.39826
-9.971389,       -10.361049,       -10.348726,       -5.609864,       -6.185353,       -11.362645,       -3.135358,       -8.338384,       -7.986707,       -5.340311,       -11.459883,       -6.093638,       -2.89937,       -7.829675,       -6.100712,       -8.873775
-13.464993,       -8.795068,       -14.748852,       -2.479254,       -11.362645,       -3.691902,       -5.020678,       -6.954605,       -12.695773,       -3.701671,       -11.708762,       -6.988455,       -6.309555,       -8.563579,       -8.231923,       -6.51174
-3.824774,       -5.34671,       -2.561742,       2.054811,       -3.135358,       -5.020678,       5.215642,       -4.329437,       -5.852783,       2.81842,       -4.659867,       0.256557,       2.955915,       -4.273994,       1.222551,       -3.041381
-11.940089,       -10.613699,       -9.49776,       -4.126205,       -8.338384,       -6.954605,       -4.329437,       -2.678564,       -7.602224,       -2.196978,       -9.314287,       -4.453787,       -4.319265,       -4.579429,       -6.404861,       -5.399764
-6.945125,       -7.670179,       -9.633914,       -3.860464,       -7.986707,       -12.695773,       -5.852783,       -7.602224,       -1.652299,       -2.605592,       -9.515064,       -6.238518,       -4.74208,       -7.140764,       -7.631529,       -9.789279
-5.179178,       -2.701547,       -6.115055,       2.88894,       -5.340311,       -3.701671,       2.81842,       -2.196978,       -2.605592,       5.500422,       -4.642398,       1.425603,       1.936513,       -4.064381,       0.314737,       -2.944246
-9.662826,       -10.14056,       -4.364315,       -4.8051,       -11.459883,       -11.708762,       -4.659867,       -9.314287,       -9.515064,       -4.642398,       -2.190077,       -5.524767,       -6.222157,       -10.719536,       -4.283804,       -5.028161
-6.415172,       -4.681856,       -7.082788,       0.740873,       -6.093638,       -6.988455,       0.256557,       -4.453787,       -6.238518,       1.425603,       -5.524767,       3.306074,       0.091073,       -4.570314,       -1.32967,       -2.626524
-2.489391,       -5.399806,       -2.84251,       1.903224,       -2.89937,       -6.309555,       2.955915,       -4.319265,       -4.74208,       1.936513,       -6.222157,       0.091073,       4.71191,       -3.546414,       1.045542,       -1.584525
-11.833961,       -8.905735,       -7.962839,       -4.300595,       -7.829675,       -8.563579,       -4.273994,       -4.579429,       -7.140764,       -4.064381,       -10.719536,       -4.570314,       -3.546414,       -3.990824,       -4.243241,       -6.026747
-3.647953,       -7.122598,       -5.781757,       -0.375929,       -6.100712,       -8.231923,       1.222551,       -6.404861,       -7.631529,       0.314737,       -4.283804,       -1.32967,       1.045542,       -4.243241,       3.180143,       -3.683233
-8.89018,       -8.299115,       -9.534391,       -2.39826,       -8.873775,       -6.51174,       -3.041381,       -5.399764,       -9.789279,       -2.944246,       -5.028161,       -2.626524,       -1.584525,       -6.026747,       -3.683233,       -0.739434
                    };
            return _data;
        }
    };
//    H: 3.4586
//    E: -2.5898


// ----------------------------------------------------------------------------
// Ribosum60_50 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.276112    0.204293    0.280822    0.238773
	struct Ribosum60_50 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum60_50>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.810218,       -1.242128,       -0.911474,       -0.829573
-1.242128,       0.994654,       -1.863642,       -0.573359
-0.911474,       -1.863642,       0.930225,       -1.109979
-0.829573,       -0.573359,       -1.109979,       1.250465
                    };
            return _data;
        }
    };
//    H: 0.5149
//    E: -0.0806

// ----------------------------------------------------------------------------
// Ribosum60_50N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum60_50N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum60_50N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.810218,       -1.242128,       -0.911474,       -0.829573,       -1.863642
-1.242128,       0.994654,       -1.863642,       -0.573359,       -1.863642
-0.911474,       -1.863642,       0.930225,       -1.109979,       -1.863642
-0.829573,       -0.573359,       -1.109979,       1.250465,       -1.863642
-1.863642,       -1.863642,       -1.863642,       -1.863642,       -1.863642
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum60_50d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum60_50d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum60_50d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-3.30335,       -9.009673,       -9.409212,       -4.103263,       -10.554763,       -14.29857,       -4.569732,       -13.062885,       -7.305467,       -5.701685,       -10.362414,       -7.224872,       -4.182644,       -12.995828,       -5.075704,       -9.921831
-9.009673,       -2.448567,       -10.198572,       -1.795507,       -10.97836,       -9.70284,       -4.587182,       -11.506285,       -8.811058,       -3.10408,       -11.121485,       -5.304573,       -5.027525,       -9.410079,       -3.890805,       -9.118585
-9.409212,       -10.198572,       -1.684157,       -5.669991,       -11.425047,       -15.400596,       -2.328557,       -9.913212,       -9.829854,       -5.744367,       -5.18581,       -7.438046,       -2.534307,       -9.081685,       -6.494342,       -10.956333
-4.103263,       -1.795507,       -5.669991,       4.064633,       -5.859267,       -3.995976,       2.160476,       -5.301371,       -4.602744,       3.16195,       -5.833144,       0.848889,       2.005489,       -4.758863,       -0.112501,       -3.555553
-10.554763,       -10.97836,       -11.425047,       -5.859267,       -6.253371,       -11.928949,       -3.802437,       -8.597128,       -9.024553,       -5.953317,       -11.704666,       -7.42445,       -3.157495,       -8.352401,       -6.743209,       -9.415098
-14.29857,       -9.70284,       -15.400596,       -3.995976,       -11.928949,       -3.371617,       -5.183804,       -6.953048,       -13.747202,       -3.817479,       -12.49462,       -7.828479,       -6.795402,       -9.101805,       -8.91108,       -6.971793
-4.569732,       -4.587182,       -2.328557,       2.160476,       -3.802437,       -5.183804,       5.519185,       -5.054001,       -5.678694,       2.643536,       -4.913453,       0.565337,       3.009785,       -4.844223,       1.177336,       -3.908748
-13.062885,       -11.506285,       -9.913212,       -5.301371,       -8.597128,       -6.953048,       -5.054001,       -2.857147,       -7.563512,       -3.590601,       -10.602092,       -5.704373,       -4.000479,       -4.964893,       -7.70187,       -5.931243
-7.305467,       -8.811058,       -9.829854,       -4.602744,       -9.024553,       -13.747202,       -5.678694,       -7.563512,       -1.978804,       -3.4048,       -10.356616,       -5.271054,       -3.129751,       -7.366144,       -8.056921,       -11.774255
-5.701685,       -3.10408,       -5.744367,       3.16195,       -5.953317,       -3.817479,       2.643536,       -3.590601,       -3.4048,       5.794396,       -4.690315,       1.387663,       2.16878,       -4.858882,       0.309373,       -4.238154
-10.362414,       -11.121485,       -5.18581,       -5.833144,       -11.704666,       -12.49462,       -4.913453,       -10.602092,       -10.356616,       -4.690315,       -2.540813,       -4.93988,       -6.425676,       -11.498719,       -4.851336,       -7.088742
-7.224872,       -5.304573,       -7.438046,       0.848889,       -7.42445,       -7.828479,       0.565337,       -5.704373,       -5.271054,       1.387663,       -4.93988,       3.152752,       -0.041543,       -5.5248,       -2.174632,       -4.052508
-4.182644,       -5.027525,       -2.534307,       2.005489,       -3.157495,       -6.795402,       3.009785,       -4.000479,       -3.129751,       2.16878,       -6.425676,       -0.041543,       4.514432,       -3.124966,       0.963747,       -1.837016
-12.995828,       -9.410079,       -9.081685,       -4.758863,       -8.352401,       -9.101805,       -4.844223,       -4.964893,       -7.366144,       -4.858882,       -11.498719,       -5.5248,       -3.124966,       -4.309938,       -3.167644,       -6.355224
-5.075704,       -3.890805,       -6.494342,       -0.112501,       -6.743209,       -8.91108,       1.177336,       -7.70187,       -8.056921,       0.309373,       -4.851336,       -2.174632,       0.963747,       -3.167644,       3.048976,       -3.723652
-9.921831,       -9.118585,       -10.956333,       -3.555553,       -9.415098,       -6.971793,       -3.908748,       -5.931243,       -11.774255,       -4.238154,       -7.088742,       -4.052508,       -1.837016,       -6.355224,       -3.723652,       -1.369468
                    };
            return _data;
        }
    };
//    H: 3.5655
//    E: -2.7921


// ----------------------------------------------------------------------------
// Ribosum75_95 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.291947    0.188329    0.254011    0.265713
	struct Ribosum75_95 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum75_95>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.168306,       -5.773415,       -5.340063,       -5.228133
-5.773415,       2.101225,       -5.852539,       -4.254006
-5.340063,       -5.852539,       1.682733,       -5.666938
-5.228133,       -4.254006,       -5.666938,       1.754314
                    };
            return _data;
        }
    };
//    H: 1.8170
//    E: -1.5026

// ----------------------------------------------------------------------------
// Ribosum75_95N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum75_95N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum75_95N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.168306,       -5.773415,       -5.340063,       -5.228133,       -5.852539
-5.773415,       2.101225,       -5.852539,       -4.254006,       -5.852539
-5.340063,       -5.852539,       1.682733,       -5.666938,       -5.852539
-5.228133,       -4.254006,       -5.666938,       1.754314,       -5.852539
-5.852539,       -5.852539,       -5.852539,       -5.852539,       -5.852539
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum75_95d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum75_95d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum75_95d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-0.921646,       -9.201964,       -9.830815,       -8.574439,       -999.0,       -999.0,       -12.601708,       -13.769003,       -9.229223,       -9.630377,       -10.991942,       -12.922108,       -9.870875,       -999.0,       -11.900244,       -999.0
-9.201964,       0.202996,       -10.978129,       -5.579918,       -15.27239,       -9.015448,       -12.699758,       -999.0,       -999.0,       -3.258113,       -12.503204,       -9.565787,       -10.786012,       -9.658123,       -12.398259,       -13.311237
-9.830815,       -10.978129,       -0.531235,       -8.765161,       -12.896668,       -999.0,       -5.490897,       -999.0,       -10.968716,       -11.342964,       -10.385803,       -13.472779,       -8.624572,       -12.760829,       -7.093817,       -14.692984
-8.574439,       -5.579918,       -8.765161,       4.984605,       -11.608763,       -13.07446,       -4.616132,       -7.502168,       -14.615673,       -2.357854,       -10.212895,       -2.661693,       -4.347998,       -9.736216,       -6.959447,       -6.936153
-999.0,       -15.27239,       -12.896668,       -11.608763,       -0.625211,       -9.342258,       -5.678921,       -13.669862,       -14.237333,       -10.700402,       -10.907705,       -13.983222,       -6.067057,       -10.814624,       -10.446367,       -13.048202
-999.0,       -9.015448,       -999.0,       -13.07446,       -9.342258,       0.233441,       -6.654098,       -6.428176,       -13.486609,       -3.911178,       -15.63697,       -11.588647,       -9.196977,       -10.678731,       -12.229149,       -999.0
-12.601708,       -12.699758,       -5.490897,       -4.616132,       -5.678921,       -6.654098,       6.396638,       -6.9763,       -10.505921,       -3.428219,       -5.701347,       -5.652258,       -2.249121,       -10.285216,       -1.454756,       -9.693509
-13.769003,       -999.0,       -999.0,       -7.502168,       -13.669862,       -6.428176,       -6.9763,       -0.856572,       -12.983222,       -7.257069,       -14.367365,       -8.374961,       -6.760177,       -10.541593,       -10.144893,       -9.264241
-9.229223,       -999.0,       -10.968716,       -14.615673,       -14.237333,       -13.486609,       -10.505921,       -12.983222,       -0.309394,       -6.135244,       -10.935263,       -7.678453,       -7.850823,       -999.0,       -12.443526,       -999.0
-9.630377,       -3.258113,       -11.342964,       -2.357854,       -10.700402,       -3.911178,       -3.428219,       -7.257069,       -6.135244,       6.575081,       -4.338362,       -1.610989,       -4.500702,       -5.823681,       -5.343959,       -9.28873
-10.991942,       -12.503204,       -10.385803,       -10.212895,       -10.907705,       -15.63697,       -5.701347,       -14.367365,       -10.935263,       -4.338362,       -0.661592,       -6.124062,       -16.766035,       -999.0,       -7.180579,       -15.863978
-12.922108,       -9.565787,       -13.472779,       -2.661693,       -13.983222,       -11.588647,       -5.652258,       -8.374961,       -7.678453,       -1.610989,       -6.124062,       3.989746,       -7.094806,       -11.731906,       -7.339663,       -9.038026
-9.870875,       -10.786012,       -8.624572,       -4.347998,       -6.067057,       -9.196977,       -2.249121,       -6.760177,       -7.850823,       -4.500702,       -16.766035,       -7.094806,       5.100583,       -5.551972,       -2.837413,       -6.865448
-999.0,       -9.658123,       -12.760829,       -9.736216,       -10.814624,       -10.678731,       -10.285216,       -10.541593,       -999.0,       -5.823681,       -999.0,       -11.731906,       -5.551972,       -0.334786,       -6.733417,       -7.132363
-11.900244,       -12.398259,       -7.093817,       -6.959447,       -10.446367,       -12.229149,       -1.454756,       -10.144893,       -12.443526,       -5.343959,       -7.180579,       -7.339663,       -2.837413,       -6.733417,       3.978849,       -6.76174
-999.0,       -13.311237,       -14.692984,       -6.936153,       -13.048202,       -999.0,       -9.693509,       -9.264241,       -999.0,       -9.28873,       -15.863978,       -9.038026,       -6.865448,       -7.132363,       -6.76174,       0.39544
                    };
            return _data;
        }
    };
//    H: 5.1842
//    E: -49.5874


// ----------------------------------------------------------------------------
// Ribosum55_50 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.256588    0.220638    0.299696    0.223077
	struct Ribosum55_50 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum55_50>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.129164,       -1.630977,       -1.22629,       -1.266544
-1.630977,       1.107257,       -2.059798,       -0.824842
-1.22629,       -2.059798,       0.959935,       -1.412566
-1.266544,       -0.824842,       -1.412566,       1.542853
                    };
            return _data;
        }
    };
//    H: 0.7382
//    E: -0.1733

// ----------------------------------------------------------------------------
// Ribosum55_50N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum55_50N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum55_50N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.129164,       -1.630977,       -1.22629,       -1.266544,       -2.059798
-1.630977,       1.107257,       -2.059798,       -0.824842,       -2.059798
-1.22629,       -2.059798,       0.959935,       -1.412566,       -2.059798
-1.266544,       -0.824842,       -1.412566,       1.542853,       -2.059798
-2.059798,       -2.059798,       -2.059798,       -2.059798,       -2.059798
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum55_50d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum55_50d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum55_50d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.193317,       -8.095669,       -8.478009,       -4.889544,       -9.700531,       -13.601403,       -4.061057,       -12.156581,       -6.374264,       -5.008387,       -9.630849,       -6.333622,       -3.176031,       -12.089524,       -4.273707,       -8.80639
-8.095669,       -1.763512,       -9.50687,       -1.874192,       -10.281193,       -9.222511,       -5.669351,       -10.816819,       -8.12271,       -3.241399,       -11.163725,       -4.722123,       -5.725844,       -8.720613,       -7.244299,       -8.219982
-8.478009,       -9.50687,       -0.952771,       -5.870764,       -10.710681,       -14.903068,       -3.288864,       -9.206546,       -9.09829,       -6.327376,       -4.655379,       -6.92423,       -3.47634,       -8.37502,       -5.816254,       -10.158046
-4.889544,       -1.874192,       -5.870764,       4.450834,       -5.970574,       -3.368097,       1.799938,       -4.584244,       -4.392592,       2.727467,       -5.582789,       0.621842,       1.685583,       -5.012086,       -0.532699,       -2.783901
-9.700531,       -10.281193,       -10.710681,       -5.970574,       -5.853785,       -11.44862,       -3.39097,       -7.907356,       -8.310187,       -5.629682,       -11.189938,       -6.853568,       -2.82176,       -7.682956,       -6.210579,       -8.516495
-13.601403,       -9.222511,       -14.903068,       -3.368097,       -11.44862,       -3.108124,       -4.962865,       -6.480419,       -13.249673,       -3.950207,       -12.196731,       -7.38704,       -6.680606,       -8.629176,       -8.465104,       -6.290027
-4.061057,       -5.669351,       -3.288864,       1.799938,       -3.39097,       -4.962865,       5.322146,       -4.66942,       -6.167063,       2.403396,       -4.681087,       -0.087424,       2.746377,       -4.526686,       1.177201,       -3.233073
-12.156581,       -10.816819,       -9.206546,       -4.584244,       -7.907356,       -6.480419,       -4.66942,       -2.176401,       -6.856846,       -3.107289,       -10.095065,       -5.054322,       -4.458995,       -4.283127,       -7.002905,       -5.04034
-6.374264,       -8.12271,       -9.09829,       -4.392592,       -8.310187,       -13.249673,       -6.167063,       -6.856846,       -1.24724,       -3.250138,       -9.82469,       -6.154207,       -5.233521,       -6.659479,       -7.621581,       -10.858453
-5.008387,       -3.241399,       -6.327376,       2.727467,       -5.629682,       -3.950207,       2.403396,       -3.107289,       -3.250138,       5.559983,       -4.730408,       1.274194,       1.647184,       -4.566192,       0.099293,       -3.562099
-9.630849,       -11.163725,       -4.655379,       -5.582789,       -11.189938,       -12.196731,       -4.681087,       -10.095065,       -9.82469,       -4.730408,       -2.209936,       -5.469494,       -6.251903,       -10.991692,       -4.365168,       -6.375115
-6.333622,       -4.722123,       -6.92423,       0.621842,       -6.853568,       -7.38704,       -0.087424,       -5.054322,       -6.154207,       1.274194,       -5.469494,       3.433743,       -0.32462,       -4.850844,       -1.646932,       -3.15865
-3.176031,       -5.725844,       -3.47634,       1.685583,       -2.82176,       -6.680606,       2.746377,       -4.458995,       -5.233521,       1.647184,       -6.251903,       -0.32462,       4.892127,       -3.288853,       1.021549,       -2.273597
-12.089524,       -8.720613,       -8.37502,       -5.012086,       -7.682956,       -8.629176,       -4.526686,       -4.283127,       -6.659479,       -4.566192,       -10.991692,       -4.850844,       -3.288853,       -3.744403,       -4.355738,       -5.509366
-4.273707,       -7.244299,       -5.816254,       -0.532699,       -6.210579,       -8.465104,       1.177201,       -7.002905,       -7.621581,       0.099293,       -4.365168,       -1.646932,       1.021549,       -4.355738,       3.322762,       -3.854863
-8.80639,       -8.219982,       -10.158046,       -2.783901,       -8.516495,       -6.290027,       -3.233073,       -5.04034,       -10.858453,       -3.562099,       -6.375115,       -3.15865,       -2.273597,       -5.509366,       -3.854863,       -0.29603
                    };
            return _data;
        }
    };
//    H: 3.6435
//    E: -2.6663


// ----------------------------------------------------------------------------
// Ribosum75_40 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.278200    0.202624    0.275305    0.243872
	struct Ribosum75_40 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum75_40>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.555517,       -0.923885,       -0.618887,       -0.582994
-0.923885,       0.904113,       -1.388508,       -0.35642
-0.618887,       -1.388508,       0.790193,       -0.826443
-0.582994,       -0.35642,       -0.826443,       1.004517
                    };
            return _data;
        }
    };
//    H: 0.3281
//    E: -0.0124

// ----------------------------------------------------------------------------
// Ribosum75_40N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum75_40N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum75_40N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.555517,       -0.923885,       -0.618887,       -0.582994,       -1.388508
-0.923885,       0.904113,       -1.388508,       -0.35642,       -1.388508
-0.618887,       -1.388508,       0.790193,       -0.826443,       -1.388508
-0.582994,       -0.35642,       -0.826443,       1.004517,       -1.388508
-1.388508,       -1.388508,       -1.388508,       -1.388508,       -1.388508
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum75_40d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum75_40d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum75_40d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-3.632526,       -6.083045,       -10.970073,       -4.449669,       -10.555574,       -12.709814,       -3.541578,       -11.861981,       -9.544455,       -5.041667,       -12.342675,       -5.498219,       -3.277539,       -12.569822,       -3.76077,       -10.746085
-6.083045,       -1.634314,       -9.102688,       -1.684324,       -9.763996,       -6.512313,       -4.384475,       -9.375346,       -6.310158,       -2.603089,       -9.160579,       -3.794761,       -3.632584,       -9.765609,       -5.845835,       -8.417205
-10.970073,       -9.102688,       -2.490922,       -4.255993,       -10.253981,       -12.723032,       -1.71873,       -10.430004,       -7.377145,       -4.082397,       -4.256126,       -5.852726,       -2.541869,       -10.192627,       -5.806918,       -8.210487
-4.449669,       -1.684324,       -4.255993,       3.828888,       -4.903858,       -2.367897,       2.371232,       -3.408809,       -3.687254,       3.266564,       -4.263902,       0.927388,       2.013462,       -4.276735,       -0.03231,       -2.71337
-10.555574,       -9.763996,       -10.253981,       -4.903858,       -5.652417,       -9.859499,       -2.243983,       -8.566829,       -6.514464,       -4.187448,       -10.584324,       -5.34292,       -3.077609,       -8.487379,       -6.007533,       -8.883384
-12.709814,       -6.512313,       -12.723032,       -2.367897,       -9.859499,       -3.11754,       -3.368762,       -5.042992,       -9.410751,       -2.47307,       -10.936572,       -5.287706,       -4.418399,       -7.598542,       -6.315364,       -5.321623
-3.541578,       -4.384475,       -1.71873,       2.371232,       -2.243983,       -3.368762,       5.272256,       -3.912133,       -4.229581,       3.166278,       -3.923699,       0.616101,       3.297471,       -4.1,       1.556962,       -2.185632
-11.861981,       -9.375346,       -10.430004,       -3.408809,       -8.566829,       -5.042992,       -3.912133,       -2.987911,       -8.917256,       -2.382178,       -7.207618,       -4.190705,       -3.520841,       -5.383523,       -5.126736,       -6.420647
-9.544455,       -6.310158,       -7.377145,       -3.687254,       -6.514464,       -9.410751,       -4.229581,       -8.917256,       -2.217439,       -1.968795,       -10.219535,       -4.958788,       -3.595626,       -8.803971,       -7.670164,       -8.75588
-5.041667,       -2.603089,       -4.082397,       3.266564,       -4.187448,       -2.47307,       3.166278,       -2.382178,       -1.968795,       5.613629,       -3.541589,       1.898063,       2.53609,       -3.556555,       0.792946,       -2.408276
-12.342675,       -9.160579,       -4.256126,       -4.263902,       -10.584324,       -10.936572,       -3.923699,       -7.207618,       -10.219535,       -3.541589,       -2.496874,       -4.715951,       -5.060648,       -9.911646,       -4.222704,       -7.152452
-5.498219,       -3.794761,       -5.852726,       0.927388,       -5.34292,       -5.287706,       0.616101,       -4.190705,       -4.958788,       1.898063,       -4.715951,       2.965777,       0.311222,       -4.639131,       -1.095562,       -3.178482
-3.277539,       -3.632584,       -2.541869,       2.013462,       -3.077609,       -4.418399,       3.297471,       -3.520841,       -3.595626,       2.53609,       -5.060648,       0.311222,       4.185666,       -3.219319,       1.204272,       -1.742893
-12.569822,       -9.765609,       -10.192627,       -4.276735,       -8.487379,       -7.598542,       -4.1,       -5.383523,       -8.803971,       -3.556555,       -9.911646,       -4.639131,       -3.219319,       -5.351823,       -3.619421,       -7.396339
-3.76077,       -5.845835,       -5.806918,       -0.03231,       -6.007533,       -6.315364,       1.556962,       -5.126736,       -7.670164,       0.792946,       -4.222704,       -1.095562,       1.204272,       -3.619421,       2.820651,       -2.844865
-10.746085,       -8.417205,       -8.210487,       -2.71337,       -8.883384,       -5.321623,       -2.185632,       -6.420647,       -8.75588,       -2.408276,       -7.152452,       -3.178482,       -1.742893,       -7.396339,       -2.844865,       -1.924157
                    };
            return _data;
        }
    };
//    H: 3.2130
//    E: -2.4179


// ----------------------------------------------------------------------------
// Ribosum55_25 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.275506    0.199712    0.272994    0.251787
	struct Ribosum55_25 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum55_25>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.520768,       -0.915253,       -0.580527,       -0.554332
-0.915253,       0.828607,       -1.455767,       -0.288454
-0.580527,       -1.455767,       0.695217,       -0.645826
-0.554332,       -0.288454,       -0.645826,       1.005975
                    };
            return _data;
        }
    };
//    H: 0.2993
//    E: -0.0067

// ----------------------------------------------------------------------------
// Ribosum55_25N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum55_25N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum55_25N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.520768,       -0.915253,       -0.580527,       -0.554332,       -1.455767
-0.915253,       0.828607,       -1.455767,       -0.288454,       -1.455767
-0.580527,       -1.455767,       0.695217,       -0.645826,       -1.455767
-0.554332,       -0.288454,       -0.645826,       1.005975,       -1.455767
-1.455767,       -1.455767,       -1.455767,       -1.455767,       -1.455767
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum55_25d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum55_25d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum55_25d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-3.191651,       -8.784405,       -9.188856,       -5.443421,       -10.421959,       -11.678659,       -3.966591,       -12.540345,       -6.989072,       -3.989021,       -9.754,       -6.555269,       -2.340657,       -12.709696,       -3.978406,       -9.568489
-8.784405,       -1.985753,       -9.741147,       -2.051348,       -10.676642,       -8.766325,       -5.266773,       -10.879867,       -7.317851,       -2.593525,       -10.312893,       -5.119179,       -3.719173,       -9.090486,       -7.361555,       -8.880647
-9.188856,       -9.741147,       -1.472903,       -6.040937,       -10.790913,       -15.075604,       -2.490655,       -9.575928,       -9.551591,       -5.961453,       -4.159205,       -7.29067,       -2.080012,       -8.223499,       -6.041659,       -10.27982
-5.443421,       -2.051348,       -6.040937,       3.656131,       -5.123961,       -2.556803,       2.430528,       -4.602943,       -4.204564,       3.074077,       -5.085501,       0.8054,       1.838676,       -4.983829,       0.146218,       -3.216188
-10.421959,       -10.676642,       -10.790913,       -5.123961,       -6.337008,       -11.597814,       -3.142701,       -8.463653,       -7.889154,       -4.876936,       -11.408731,       -6.280991,       -3.195811,       -8.22191,       -6.398646,       -9.349882
-11.678659,       -8.766325,       -15.075604,       -2.556803,       -11.597814,       -3.123087,       -4.744038,       -6.811731,       -12.796293,       -3.426335,       -11.753386,       -7.033068,       -6.30986,       -8.923851,       -8.288048,       -6.918504
-3.966591,       -5.266773,       -2.490655,       2.430528,       -3.142701,       -4.744038,       5.54315,       -4.355526,       -5.945227,       3.232386,       -4.398786,       0.534307,       3.289124,       -4.309402,       1.360793,       -3.286625
-12.540345,       -10.879867,       -9.575928,       -4.602943,       -8.463653,       -6.811731,       -4.355526,       -2.825722,       -7.334828,       -2.160897,       -9.144649,       -4.673736,       -4.7437,       -4.925976,       -6.7416,       -6.00153
-6.989072,       -7.317851,       -9.551591,       -4.204564,       -7.889154,       -12.796293,       -5.945227,       -7.334828,       -1.76931,       -2.490727,       -9.833774,       -6.399835,       -5.206629,       -7.163943,       -7.856018,       -10.6661
-3.989021,       -2.593525,       -5.961453,       3.074077,       -4.876936,       -3.426335,       3.232386,       -2.160897,       -2.490727,       5.81874,       -4.484981,       1.522232,       2.269557,       -4.13178,       0.439313,       -3.312601
-9.754,       -10.312893,       -4.159205,       -5.085501,       -11.408731,       -11.753386,       -4.398786,       -9.144649,       -9.833774,       -4.484981,       -2.02385,       -5.539316,       -6.237983,       -10.544775,       -4.345435,       -5.310321
-6.555269,       -5.119179,       -7.29067,       0.8054,       -6.280991,       -7.033068,       0.534307,       -4.673736,       -6.399835,       1.522232,       -5.539316,       3.06324,       0.464733,       -4.872762,       -1.471283,       -3.117767
-2.340657,       -3.719173,       -2.080012,       1.838676,       -3.195811,       -6.30986,       3.289124,       -4.7437,       -5.206629,       2.269557,       -6.237983,       0.464733,       4.19347,       -3.939104,       0.959161,       -2.321981
-12.709696,       -9.090486,       -8.223499,       -4.983829,       -8.22191,       -8.923851,       -4.309402,       -4.925976,       -7.163943,       -4.13178,       -10.544775,       -4.872762,       -3.939104,       -4.38488,       -4.469756,       -6.468988
-3.978406,       -7.361555,       -6.041659,       0.146218,       -6.398646,       -8.288048,       1.360793,       -6.7416,       -7.856018,       0.439313,       -4.345435,       -1.471283,       0.959161,       -4.469756,       2.900829,       -4.206419
-9.568489,       -8.880647,       -10.27982,       -3.216188,       -9.349882,       -6.918504,       -3.286625,       -6.00153,       -10.6661,       -3.312601,       -5.310321,       -3.117767,       -2.321981,       -6.468988,       -4.206419,       -1.57643
                    };
            return _data;
        }
    };
//    H: 3.3976
//    E: -2.5955


// ----------------------------------------------------------------------------
// Ribosum45_60 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.256335    0.220702    0.300726    0.222237
	struct Ribosum45_60 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum45_60>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.297643,       -2.115754,       -1.730638,       -1.676728
-2.115754,       1.239465,       -2.707465,       -1.15535
-1.730638,       -2.707465,       1.093676,       -1.993956
-1.676728,       -1.15535,       -1.993956,       1.720946
                    };
            return _data;
        }
    };
//    H: 1.0079
//    E: -0.3230

// ----------------------------------------------------------------------------
// Ribosum45_60N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum45_60N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum45_60N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.297643,       -2.115754,       -1.730638,       -1.676728,       -2.707465
-2.115754,       1.239465,       -2.707465,       -1.15535,       -2.707465
-1.730638,       -2.707465,       1.093676,       -1.993956,       -2.707465
-1.676728,       -1.15535,       -1.993956,       1.720946,       -2.707465
-2.707465,       -2.707465,       -2.707465,       -2.707465,       -2.707465
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum45_60d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum45_60d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum45_60d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.822715,       -7.978265,       -8.13379,       -4.682922,       -9.614907,       -14.35269,       -5.070437,       -11.930841,       -6.101455,       -4.762036,       -9.665915,       -6.333028,       -4.640705,       -11.989097,       -6.233162,       -8.602433
-7.978265,       -1.781372,       -9.247331,       -2.081242,       -10.000647,       -9.221381,       -5.847379,       -10.974331,       -10.244131,       -3.805543,       -12.319802,       -5.195845,       -5.85969,       -8.590093,       -7.383147,       -7.988919
-8.13379,       -9.247331,       -0.64559,       -5.869242,       -10.600594,       -14.72513,       -4.803926,       -8.892235,       -9.063822,       -6.301238,       -5.510077,       -6.916683,       -5.945124,       -8.285338,       -5.772646,       -10.587689
-4.682922,       -2.081242,       -5.869242,       4.628931,       -6.087508,       -6.916338,       1.481134,       -5.62221,       -6.023192,       2.551366,       -6.177627,       0.449773,       1.395219,       -5.463142,       -0.710506,       -3.065074
-9.614907,       -10.000647,       -10.600594,       -6.087508,       -5.515194,       -11.29546,       -3.891095,       -7.66244,       -8.616645,       -6.036498,       -11.364716,       -8.282968,       -2.641194,       -7.360217,       -6.24544,       -8.314929
-14.35269,       -9.221381,       -14.72513,       -6.916338,       -11.29546,       -2.744232,       -5.311745,       -6.174518,       -13.664248,       -4.074742,       -12.371971,       -8.058637,       -7.259221,       -8.362875,       -8.796293,       -6.044085
-5.070437,       -5.847379,       -4.803926,       1.481134,       -3.891095,       -5.311745,       5.439388,       -4.915828,       -6.495948,       1.840236,       -4.543365,       -0.537319,       2.550516,       -4.630368,       1.162945,       -3.827974
-11.930841,       -10.974331,       -8.892235,       -5.62221,       -7.66244,       -6.174518,       -4.915828,       -1.795041,       -6.581356,       -6.152223,       -13.463047,       -6.061824,       -4.349887,       -3.910663,       -7.764972,       -4.667447
-6.101455,       -10.244131,       -9.063822,       -6.023192,       -8.616645,       -13.664248,       -6.495948,       -6.581356,       -0.925705,       -5.266697,       -9.58276,       -6.558162,       -6.056638,       -6.350703,       -7.725912,       -11.747198
-4.762036,       -3.805543,       -6.301238,       2.551366,       -6.036498,       -4.074742,       1.840236,       -6.152223,       -5.266697,       5.65022,       -4.726982,       1.06151,       1.318185,       -4.848044,       -0.215478,       -4.242067
-9.665915,       -12.319802,       -5.510077,       -6.177627,       -11.364716,       -12.371971,       -4.543365,       -13.463047,       -9.58276,       -4.726982,       -2.109446,       -5.773294,       -6.240276,       -11.837687,       -4.17615,       -11.746062
-6.333028,       -5.195845,       -6.916683,       0.449773,       -8.282968,       -8.058637,       -0.537319,       -6.061824,       -6.558162,       1.06151,       -5.773294,       3.560793,       -0.837637,       -5.29042,       -2.13446,       -4.98553
-4.640705,       -5.85969,       -5.945124,       1.395219,       -2.641194,       -7.259221,       2.550516,       -4.349887,       -6.056638,       1.318185,       -6.240276,       -0.837637,       5.054737,       -3.013359,       0.990296,       -3.65133
-11.989097,       -8.590093,       -8.285338,       -5.463142,       -7.360217,       -8.362875,       -4.630368,       -3.910663,       -6.350703,       -4.848044,       -11.837687,       -5.29042,       -3.013359,       -3.364009,       -4.970192,       -5.134174
-6.233162,       -7.383147,       -5.772646,       -0.710506,       -6.24544,       -8.796293,       1.162945,       -7.764972,       -7.725912,       -0.215478,       -4.17615,       -2.13446,       0.990296,       -4.970192,       3.447329,       -4.369857
-8.602433,       -7.988919,       -10.587689,       -3.065074,       -8.314929,       -6.044085,       -3.827974,       -4.667447,       -11.747198,       -4.242067,       -11.746062,       -4.98553,       -3.65133,       -5.134174,       -4.369857,       0.093297
                    };
            return _data;
        }
    };
//    H: 3.8783
//    E: -2.8595


// ----------------------------------------------------------------------------
// Ribosum85_35 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.262874    0.217347    0.295471    0.224308
	struct Ribosum85_35 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum85_35>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.89486,       -1.237553,       -0.845194,       -0.841531
-1.237553,       0.952233,       -1.642986,       -0.584941
-0.845194,       -1.642986,       0.825509,       -1.04032
-0.841531,       -0.584941,       -1.04032,       1.319549
                    };
            return _data;
        }
    };
//    H: 0.5063
//    E: -0.0746

// ----------------------------------------------------------------------------
// Ribosum85_35N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum85_35N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum85_35N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.89486,       -1.237553,       -0.845194,       -0.841531,       -1.642986
-1.237553,       0.952233,       -1.642986,       -0.584941,       -1.642986
-0.845194,       -1.642986,       0.825509,       -1.04032,       -1.642986
-0.841531,       -0.584941,       -1.04032,       1.319549,       -1.642986
-1.642986,       -1.642986,       -1.642986,       -1.642986,       -1.642986
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum85_35d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum85_35d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum85_35d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-3.328111,       -7.475519,       -8.641105,       -4.554755,       -9.546605,       -12.909776,       -3.69072,       -12.50201,       -7.48476,       -5.244308,       -8.737912,       -5.984457,       -2.644347,       -11.703441,       -3.784439,       -8.639778
-7.475519,       -2.085252,       -9.408122,       -1.637142,       -10.016462,       -8.789342,       -5.063375,       -10.062944,       -7.555455,       -2.849766,       -10.114614,       -4.458346,       -4.793917,       -8.841007,       -6.733768,       -8.244988
-8.641105,       -9.408122,       -1.491424,       -5.333929,       -10.423579,       -14.405694,       -2.521509,       -9.177312,       -8.794491,       -5.620666,       -4.553847,       -6.827738,       -2.842597,       -8.111596,       -5.846424,       -9.719578
-4.554755,       -1.637142,       -5.333929,       4.101605,       -5.257356,       -2.730587,       2.146364,       -3.958998,       -3.743949,       2.985893,       -4.557667,       0.78657,       1.95538,       -4.156729,       -0.255093,       -2.410488
-9.546605,       -10.016462,       -10.423579,       -5.257356,       -5.856844,       -10.623912,       -2.825627,       -8.776057,       -7.275812,       -5.038202,       -11.281559,       -6.06198,       -2.647184,       -7.658098,       -5.838809,       -9.049959
-12.909776,       -8.789342,       -14.405694,       -2.730587,       -10.623912,       -4.294273,       -4.836157,       -6.353023,       -11.334623,       -3.345015,       -11.369017,       -6.749349,       -5.76996,       -8.029551,       -7.674269,       -6.045197
-3.69072,       -5.063375,       -2.521509,       2.146364,       -2.825627,       -4.836157,       5.192269,       -4.487711,       -5.318854,       2.904574,       -4.554246,       0.347924,       3.052959,       -4.345372,       1.334254,       -3.019608
-12.50201,       -10.062944,       -9.177312,       -3.958998,       -8.776057,       -6.353023,       -4.487711,       -3.091087,       -8.263836,       -2.280293,       -9.348616,       -4.483425,       -4.490872,       -4.615876,       -6.411346,       -5.976429
-7.48476,       -7.555455,       -8.794491,       -3.743949,       -7.275812,       -11.334623,       -5.318854,       -8.263836,       -1.763015,       -2.587715,       -8.654444,       -6.125786,       -4.670452,       -7.286666,       -7.593021,       -10.224337
-5.244308,       -2.849766,       -5.620666,       2.985893,       -5.038202,       -3.345015,       2.904574,       -2.280293,       -2.587715,       5.500011,       -4.180101,       1.50601,       2.117972,       -3.811446,       0.436519,       -2.706
-8.737912,       -10.114614,       -4.553847,       -4.557667,       -11.281559,       -11.369017,       -4.554246,       -9.348616,       -8.654444,       -4.180101,       -2.074643,       -5.47414,       -5.775304,       -10.401727,       -4.362114,       -5.41872
-5.984457,       -4.458346,       -6.827738,       0.78657,       -6.06198,       -6.749349,       0.347924,       -4.483425,       -6.125786,       1.50601,       -5.47414,       3.235784,       0.113864,       -4.725852,       -1.299211,       -2.80759
-2.644347,       -4.793917,       -2.842597,       1.95538,       -2.647184,       -5.76996,       3.052959,       -4.490872,       -4.670452,       2.117972,       -5.775304,       0.113864,       4.61525,       -3.398785,       1.115627,       -1.692388
-11.703441,       -8.841007,       -8.111596,       -4.156729,       -7.658098,       -8.029551,       -4.345372,       -4.615876,       -7.286666,       -3.811446,       -10.401727,       -4.725852,       -3.398785,       -4.000979,       -4.211712,       -6.804895
-3.784439,       -6.733768,       -5.846424,       -0.255093,       -5.838809,       -7.674269,       1.334254,       -6.411346,       -7.593021,       0.436519,       -4.362114,       -1.299211,       1.115627,       -4.211712,       3.11432,       -3.628526
-8.639778,       -8.244988,       -9.719578,       -2.410488,       -9.049959,       -6.045197,       -3.019608,       -5.976429,       -10.224337,       -2.706,       -5.41872,       -2.80759,       -1.692388,       -6.804895,       -3.628526,       -0.908725
                    };
            return _data;
        }
    };
//    H: 3.4075
//    E: -2.5282


// ----------------------------------------------------------------------------
// Ribosum45_50 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.256525    0.220706    0.299782    0.222987
	struct Ribosum45_50 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum45_50>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.129893,       -1.630644,       -1.225994,       -1.266785
-1.630644,       1.106609,       -2.059935,       -0.824347
-1.225994,       -2.059935,       0.9594,       -1.412029
-1.266785,       -0.824347,       -1.412029,       1.543165
                    };
            return _data;
        }
    };
//    H: 0.7382
//    E: -0.1733

// ----------------------------------------------------------------------------
// Ribosum45_50N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum45_50N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum45_50N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.129893,       -1.630644,       -1.225994,       -1.266785,       -2.059935
-1.630644,       1.106609,       -2.059935,       -0.824347,       -2.059935
-1.225994,       -2.059935,       0.9594,       -1.412029,       -2.059935
-1.266785,       -0.824347,       -1.412029,       1.543165,       -2.059935
-2.059935,       -2.059935,       -2.059935,       -2.059935,       -2.059935
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum45_50d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum45_50d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum45_50d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.192929,       -8.094529,       -8.476841,       -4.893166,       -9.699391,       -13.601061,       -4.060688,       -12.155217,       -6.373096,       -5.008018,       -9.630452,       -6.332229,       -3.177393,       -12.088159,       -4.272314,       -8.804002
-8.094529,       -1.763171,       -9.5065,       -1.872827,       -10.280852,       -9.222967,       -5.66978,       -10.816252,       -8.122341,       -3.241828,       -11.164126,       -4.721529,       -5.736518,       -8.720046,       -7.243704,       -8.218392
-8.476841,       -9.5065,       -0.952374,       -5.879162,       -10.710312,       -14.903496,       -3.289264,       -9.205951,       -9.097892,       -6.327776,       -4.655752,       -6.923607,       -3.474947,       -8.374425,       -5.815631,       -10.156428
-4.893166,       -1.872827,       -5.879162,       4.450556,       -5.969209,       -3.36753,       1.800533,       -4.582654,       -4.391199,       2.728003,       -5.582166,       0.622837,       1.687414,       -5.018928,       -0.531358,       -2.783063
-9.699391,       -10.280852,       -10.710312,       -5.969209,       -5.853444,       -11.449076,       -3.391398,       -7.97146,       -8.309818,       -5.63011,       -11.190339,       -6.852973,       -2.821997,       -7.682389,       -6.209984,       -8.514905
-13.601061,       -9.222967,       -14.903496,       -3.36753,       -11.449076,       -3.109379,       -4.964092,       -6.48065,       -13.250102,       -3.951434,       -12.197929,       -7.387244,       -6.680039,       -8.629407,       -8.465307,       -6.289235
-4.060688,       -5.66978,       -3.289264,       1.800533,       -3.391398,       -4.964092,       5.320939,       -4.669623,       -6.167464,       2.402198,       -4.682257,       -0.087599,       2.746798,       -4.526889,       1.176953,       -3.232253
-12.155217,       -10.816252,       -9.205951,       -4.582654,       -7.97146,       -6.48065,       -4.669623,       -2.175609,       -6.856251,       -3.107492,       -10.09524,       -5.053502,       -4.463146,       -4.282334,       -7.002085,       -5.038525
-6.373096,       -8.122341,       -9.097892,       -4.391199,       -8.309818,       -13.250102,       -6.167464,       -6.856251,       -1.246842,       -3.250538,       -9.825063,       -6.153584,       -5.232128,       -6.658884,       -7.620958,       -10.856835
-5.008018,       -3.241828,       -6.327776,       2.728003,       -5.63011,       -3.951434,       2.402198,       -3.107492,       -3.250538,       5.55872,       -4.731579,       1.273882,       1.647779,       -4.566396,       0.099118,       -3.561279
-9.630452,       -11.164126,       -4.655752,       -5.582166,       -11.190339,       -12.197929,       -4.682257,       -10.09524,       -9.825063,       -4.731579,       -2.211079,       -5.469641,       -6.25128,       -10.991867,       -4.365315,       -6.374267
-6.332229,       -4.721529,       -6.923607,       0.622837,       -6.852973,       -7.387244,       -0.087599,       -5.053502,       -6.153584,       1.273882,       -5.469641,       3.434257,       -0.323242,       -4.850024,       -1.646084,       -3.160753
-3.177393,       -5.736518,       -3.474947,       1.687414,       -2.821997,       -6.680039,       2.746798,       -4.463146,       -5.232128,       1.647779,       -6.25128,       -0.323242,       4.89228,       -3.287262,       1.02279,       -2.27223
-12.088159,       -8.720046,       -8.374425,       -5.018928,       -7.682389,       -8.629407,       -4.526889,       -4.282334,       -6.658884,       -4.566396,       -10.991867,       -4.850024,       -3.287262,       -3.743611,       -4.359492,       -5.507551
-4.272314,       -7.243704,       -5.815631,       -0.531358,       -6.209984,       -8.465307,       1.176953,       -7.002085,       -7.620958,       0.099118,       -4.365315,       -1.646084,       1.02279,       -4.359492,       3.323479,       -3.853019
-8.804002,       -8.218392,       -10.156428,       -2.783063,       -8.514905,       -6.289235,       -3.232253,       -5.038525,       -10.856835,       -3.561279,       -6.374267,       -3.160753,       -2.27223,       -5.507551,       -3.853019,       -0.293191
                    };
            return _data;
        }
    };
//    H: 3.6431
//    E: -2.6665


// ----------------------------------------------------------------------------
// Ribosum75_65 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.274351    0.202227    0.272981    0.250441
	struct Ribosum75_65 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum75_65>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.958038,       -1.582432,       -1.405024,       -1.197726
-1.582432,       1.306634,       -2.36518,       -0.84657
-1.405024,       -2.36518,       1.128498,       -1.610545
-1.197726,       -0.84657,       -1.610545,       1.416441
                    };
            return _data;
        }
    };
//    H: 0.7454
//    E: -0.1851

// ----------------------------------------------------------------------------
// Ribosum75_65N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum75_65N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum75_65N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.958038,       -1.582432,       -1.405024,       -1.197726,       -2.36518
-1.582432,       1.306634,       -2.36518,       -0.84657,       -2.36518
-1.405024,       -2.36518,       1.128498,       -1.610545,       -2.36518
-1.197726,       -0.84657,       -1.610545,       1.416441,       -2.36518
-2.36518,       -2.36518,       -2.36518,       -2.36518,       -2.36518
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum75_65d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum75_65d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum75_65d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.81253,       -7.565686,       -9.597073,       -5.441222,       -9.491831,       -15.183508,       -3.407129,       -10.882642,       -7.469647,       -5.862036,       -10.956931,       -7.400447,       -3.250736,       -13.420394,       -5.651604,       -9.024386
-7.565686,       -0.752131,       -9.243813,       -2.147698,       -7.905178,       -7.881207,       -5.729307,       -10.251633,       -9.460112,       -3.052754,       -11.531069,       -5.495154,       -5.043533,       -9.1676,       -7.171532,       -8.468663
-9.597073,       -9.243813,       -0.865633,       -4.282104,       -8.409162,       -12.115224,       -3.444915,       -9.566257,       -8.671095,       -5.704044,       -3.837341,       -4.949788,       -3.749542,       -9.418205,       -5.522638,       -11.071717
-5.441222,       -2.147698,       -4.282104,       4.433885,       -4.191312,       -5.576218,       1.441975,       -4.789609,       -4.905873,       2.704917,       -5.198611,       0.633632,       1.229668,       -4.479362,       -0.703771,       -2.531661
-9.491831,       -7.905178,       -8.409162,       -4.191312,       -4.158427,       -11.647009,       -2.720463,       -7.493172,       -8.678333,       -5.346693,       -11.749599,       -8.30237,       -2.553816,       -7.07954,       -5.418534,       -7.846344
-15.183508,       -7.881207,       -12.115224,       -5.576218,       -11.647009,       -0.761649,       -5.068227,       -4.908928,       -9.754866,       -2.283827,       -12.107243,       -6.989563,       -7.045883,       -7.848874,       -8.806115,       -3.821121
-3.407129,       -5.729307,       -3.444915,       1.441975,       -2.720463,       -5.068227,       5.745223,       -4.211841,       -4.597602,       1.868713,       -4.588338,       -0.534049,       2.732131,       -4.921701,       1.26935,       -2.528934
-10.882642,       -10.251633,       -9.566257,       -4.789609,       -7.493172,       -4.908928,       -4.211841,       -0.941001,       -7.995929,       -6.310223,       -13.514723,       -5.37989,       -4.475412,       -4.772528,       -4.931793,       -5.282819
-7.469647,       -9.460112,       -8.671095,       -4.905873,       -8.678333,       -9.754866,       -4.597602,       -7.995929,       -0.687613,       -3.737467,       -9.320226,       -5.398159,       -4.529128,       -7.747528,       -7.089188,       -12.108431
-5.862036,       -3.052754,       -5.704044,       2.704917,       -5.346693,       -2.283827,       1.868713,       -6.310223,       -3.737467,       5.967731,       -4.001876,       1.559242,       1.39654,       -4.812757,       -0.308303,       -3.19684
-10.956931,       -11.531069,       -3.837341,       -5.198611,       -11.749599,       -12.107243,       -4.588338,       -13.514723,       -9.320226,       -4.001876,       -2.633009,       -4.436953,       -5.319027,       -10.361607,       -3.720542,       -10.699239
-7.400447,       -5.495154,       -4.949788,       0.633632,       -8.30237,       -6.989563,       -0.534049,       -5.37989,       -5.398159,       1.559242,       -4.436953,       3.340963,       -0.662881,       -4.665851,       -2.222418,       -3.150817
-3.250736,       -5.043533,       -3.749542,       1.229668,       -2.553816,       -7.045883,       2.732131,       -4.475412,       -4.529128,       1.39654,       -5.319027,       -0.662881,       4.655568,       -3.456623,       1.124987,       -2.782846
-13.420394,       -9.1676,       -9.418205,       -4.479362,       -7.07954,       -7.848874,       -4.921701,       -4.772528,       -7.747528,       -4.812757,       -10.361607,       -4.665851,       -3.456623,       -4.143614,       -5.1903,       -5.935272
-5.651604,       -7.171532,       -5.522638,       -0.703771,       -5.418534,       -8.806115,       1.26935,       -4.931793,       -7.089188,       -0.308303,       -3.720542,       -2.222418,       1.124987,       -5.1903,       3.352702,       -3.65033
-9.024386,       -8.468663,       -11.071717,       -2.531661,       -7.846344,       -3.821121,       -2.528934,       -5.282819,       -12.108431,       -3.19684,       -10.699239,       -3.150817,       -2.782846,       -5.935272,       -3.65033,       -1.221118
                    };
            return _data;
        }
    };
//    H: 3.7459
//    E: -2.6040


// ----------------------------------------------------------------------------
// Ribosum70_25 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.280307    0.201288    0.271528    0.246877
	struct Ribosum70_25 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum70_25>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.476984,       -0.818761,       -0.572233,       -0.518638
-0.818761,       0.85585,       -1.331519,       -0.301105
-0.572233,       -1.331519,       0.763832,       -0.763932
-0.518638,       -0.301105,       -0.763932,       0.937747
                    };
            return _data;
        }
    };
//    H: 0.2874
//    E: -0.0004

// ----------------------------------------------------------------------------
// Ribosum70_25N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum70_25N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum70_25N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.476984,       -0.818761,       -0.572233,       -0.518638,       -1.331519
-0.818761,       0.85585,       -1.331519,       -0.301105,       -1.331519
-0.572233,       -1.331519,       0.763832,       -0.763932,       -1.331519
-0.518638,       -0.301105,       -0.763932,       0.937747,       -1.331519
-1.331519,       -1.331519,       -1.331519,       -1.331519,       -1.331519
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum70_25d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum70_25d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum70_25d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-3.691323,       -5.687648,       -10.783801,       -4.124301,       -11.755873,       -12.344428,       -3.76498,       -12.037415,       -9.352708,       -4.947335,       -12.143224,       -5.493239,       -3.455998,       -12.48049,       -3.590525,       -10.813328
-5.687648,       -1.894948,       -8.842145,       -1.802829,       -10.502741,       -6.221136,       -4.025906,       -9.377257,       -7.934937,       -2.471664,       -9.720143,       -3.843562,       -3.258851,       -9.66827,       -5.552764,       -8.641383
-10.783801,       -8.842145,       -2.783386,       -4.491301,       -11.175065,       -12.635282,       -1.885645,       -10.832159,       -7.176262,       -4.215427,       -5.076023,       -6.965788,       -2.493539,       -9.895509,       -5.755747,       -7.869096
-4.124301,       -1.802829,       -4.491301,       3.765141,       -5.351125,       -2.425091,       2.414638,       -3.267793,       -3.507846,       3.29322,       -4.951722,       0.959006,       2.027351,       -4.395223,       -0.047173,       -2.993843
-11.755873,       -10.502741,       -11.175065,       -5.351125,       -5.898615,       -9.493739,       -2.232768,       -8.418644,       -9.189373,       -4.312737,       -11.06813,       -6.354713,       -3.138045,       -8.863615,       -6.088825,       -8.983185
-12.344428,       -6.221136,       -12.635282,       -2.425091,       -9.493739,       -3.820244,       -3.445623,       -4.801853,       -9.200841,       -2.587177,       -10.692942,       -5.429016,       -4.236986,       -7.250357,       -6.021632,       -5.536907
-3.76498,       -4.025906,       -1.885645,       2.414638,       -2.232768,       -3.445623,       5.297315,       -4.146071,       -4.44646,       3.20316,       -3.904207,       0.64734,       3.365528,       -3.822242,       1.612612,       -2.175425
-12.037415,       -9.377257,       -10.832159,       -3.267793,       -8.418644,       -4.801853,       -4.146071,       -3.432216,       -8.617513,       -2.53979,       -6.814903,       -4.302023,       -3.30193,       -5.082051,       -5.105855,       -6.200657
-9.352708,       -7.934937,       -7.176262,       -3.507846,       -9.189373,       -9.200841,       -4.44646,       -8.617513,       -2.325962,       -2.001325,       -10.276234,       -4.775536,       -3.630472,       -8.47693,       -7.756909,       -8.431592
-4.947335,       -2.471664,       -4.215427,       3.29322,       -4.312737,       -2.587177,       3.20316,       -2.53979,       -2.001325,       5.65153,       -3.740876,       1.911581,       2.582956,       -3.463582,       0.843909,       -2.432141
-12.143224,       -9.720143,       -5.076023,       -4.951722,       -11.06813,       -10.692942,       -3.904207,       -6.814903,       -10.276234,       -3.740876,       -2.580598,       -4.819947,       -5.055588,       -9.679581,       -4.311402,       -7.816108
-5.493239,       -3.843562,       -6.965788,       0.959006,       -6.354713,       -5.429016,       0.64734,       -4.302023,       -4.775536,       1.911581,       -4.819947,       2.968644,       0.330654,       -4.701917,       -1.032958,       -3.28795
-3.455998,       -3.258851,       -2.493539,       2.027351,       -3.138045,       -4.236986,       3.365528,       -3.30193,       -3.630472,       2.582956,       -5.055588,       0.330654,       4.109435,       -3.012995,       1.134318,       -1.824736
-12.48049,       -9.66827,       -9.895509,       -4.395223,       -8.863615,       -7.250357,       -3.822242,       -5.082051,       -8.47693,       -3.463582,       -9.679581,       -4.701917,       -3.012995,       -4.961526,       -3.339396,       -7.221587
-3.590525,       -5.552764,       -5.755747,       -0.047173,       -6.088825,       -6.021632,       1.612612,       -5.105855,       -7.756909,       0.843909,       -4.311402,       -1.032958,       1.134318,       -3.339396,       2.763853,       -2.72181
-10.813328,       -8.641383,       -7.869096,       -2.993843,       -8.983185,       -5.536907,       -2.175425,       -6.200657,       -8.431592,       -2.432141,       -7.816108,       -3.28795,       -1.824736,       -7.221587,       -2.72181,       -1.614461
                    };
            return _data;
        }
    };
//    H: 3.2152
//    E: -2.4571


// ----------------------------------------------------------------------------
// Ribosum85_30 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.263119    0.217053    0.295098    0.224730
	struct Ribosum85_30 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum85_30>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.888317,       -1.231015,       -0.840311,       -0.833057
-1.231015,       0.949855,       -1.639816,       -0.579519
-0.840311,       -1.639816,       0.823297,       -1.032255
-0.833057,       -0.579519,       -1.032255,       1.31423
                    };
            return _data;
        }
    };
//    H: 0.5020
//    E: -0.0730

// ----------------------------------------------------------------------------
// Ribosum85_30N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum85_30N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum85_30N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.888317,       -1.231015,       -0.840311,       -0.833057,       -1.639816
-1.231015,       0.949855,       -1.639816,       -0.579519,       -1.639816
-0.840311,       -1.639816,       0.823297,       -1.032255,       -1.639816
-0.833057,       -0.579519,       -1.032255,       1.31423,       -1.639816
-1.639816,       -1.639816,       -1.639816,       -1.639816,       -1.639816
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum85_30d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum85_30d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum85_30d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-3.336011,       -7.479887,       -8.645842,       -4.561229,       -9.55121,       -12.85462,       -3.691515,       -12.507985,       -7.489497,       -5.210365,       -8.738738,       -5.984892,       -2.640255,       -11.709416,       -3.790514,       -8.650417
-7.479887,       -2.086564,       -9.409564,       -1.642723,       -10.017773,       -8.787358,       -5.060355,       -10.065624,       -7.556898,       -2.847648,       -10.112893,       -4.461127,       -4.767344,       -8.843687,       -6.73658,       -8.252332
-8.645842,       -9.409564,       -1.492998,       -5.336529,       -10.425022,       -14.403842,       -2.519763,       -9.180123,       -8.796065,       -5.616554,       -4.552257,       -6.830218,       -2.82892,       -8.114407,       -5.849175,       -9.727053
-4.561229,       -1.642723,       -5.336529,       4.092598,       -5.248839,       -2.732965,       2.151128,       -3.965454,       -3.749705,       2.98785,       -4.560141,       0.78604,       1.95456,       -4.163575,       -0.247761,       -2.422127
-9.55121,       -10.017773,       -10.425022,       -5.248839,       -5.858155,       -10.621929,       -2.823724,       -8.778738,       -7.277255,       -5.028603,       -11.279838,       -6.062977,       -2.651853,       -7.660779,       -5.84162,       -9.057303
-12.85462,       -8.787358,       -14.403842,       -2.732965,       -10.621929,       -4.288995,       -4.830902,       -6.352409,       -11.33277,       -3.339795,       -11.364002,       -6.747871,       -5.768164,       -8.028936,       -7.673786,       -6.049247
-3.691515,       -5.060355,       -2.519763,       2.151128,       -2.823724,       -4.830902,       5.197451,       -4.487128,       -5.317133,       2.91102,       -4.549141,       0.351845,       3.056952,       -4.344851,       1.336149,       -3.023745
-12.507985,       -10.065624,       -9.180123,       -3.965454,       -8.778738,       -6.352409,       -4.487128,       -3.095137,       -8.266648,       -2.279501,       -9.348263,       -4.487533,       -4.496962,       -4.619926,       -6.415388,       -5.985142
-7.489497,       -7.556898,       -8.796065,       -3.749705,       -7.277255,       -11.33277,       -5.317133,       -8.266648,       -1.764588,       -2.585994,       -8.652854,       -6.128515,       -4.675957,       -7.289477,       -7.595251,       -10.231812
-5.210365,       -2.847648,       -5.616554,       2.98785,       -5.028603,       -3.339795,       2.91102,       -2.279501,       -2.585994,       5.505274,       -4.175161,       1.507514,       2.122179,       -3.8108,       0.437621,       -2.710181
-8.738738,       -10.112893,       -4.552257,       -4.560141,       -11.279838,       -11.364002,       -4.549141,       -9.348263,       -8.652854,       -4.175161,       -2.069889,       -5.473919,       -5.775881,       -10.401375,       -4.361893,       -5.423031
-5.984892,       -4.461127,       -6.830218,       0.78604,       -6.062977,       -6.747871,       0.351845,       -4.487533,       -6.128515,       1.507514,       -5.473919,       3.231914,       0.119498,       -4.729903,       -1.302508,       -2.815999
-2.640255,       -4.767344,       -2.82892,       1.95456,       -2.651853,       -5.768164,       3.056952,       -4.496962,       -4.675957,       2.122179,       -5.775881,       0.119498,       4.607176,       -3.405566,       1.112872,       -1.703529
-11.709416,       -8.843687,       -8.114407,       -4.163575,       -7.660779,       -8.028936,       -4.344851,       -4.619926,       -7.289477,       -3.8108,       -10.401375,       -4.729903,       -3.405566,       -4.005028,       -4.215727,       -6.813608
-3.790514,       -6.73658,       -5.849175,       -0.247761,       -5.84162,       -7.673786,       1.336149,       -6.415388,       -7.595251,       0.437621,       -4.361893,       -1.302508,       1.112872,       -4.215727,       3.110024,       -3.636841
-8.650417,       -8.252332,       -9.727053,       -2.422127,       -9.057303,       -6.049247,       -3.023745,       -5.985142,       -10.231812,       -2.710181,       -5.423031,       -2.815999,       -1.703529,       -6.813608,       -3.636841,       -0.922102
                    };
            return _data;
        }
    };
//    H: 3.4069
//    E: -2.5278


// ----------------------------------------------------------------------------
// Ribosum75_75 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.256454    0.217478    0.291435    0.234633
	struct Ribosum75_75 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum75_75>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.29072,       -2.334291,       -2.054882,       -2.027652
-2.334291,       1.380583,       -2.765947,       -1.228908
-2.054882,       -2.765947,       1.18756,       -2.278849
-2.027652,       -1.228908,       -2.278849,       1.737885
                    };
            return _data;
        }
    };
//    H: 1.1014
//    E: -0.3871

// ----------------------------------------------------------------------------
// Ribosum75_75N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum75_75N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum75_75N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.29072,       -2.334291,       -2.054882,       -2.027652,       -2.765947
-2.334291,       1.380583,       -2.765947,       -1.228908,       -2.765947
-2.054882,       -2.765947,       1.18756,       -2.278849,       -2.765947
-2.027652,       -1.228908,       -2.278849,       1.737885,       -2.765947
-2.765947,       -2.765947,       -2.765947,       -2.765947,       -2.765947
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum75_75d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum75_75d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum75_75d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-0.946652,       -8.30112,       -8.247247,       -5.093921,       -10.026187,       -13.406598,       -5.638015,       -11.609096,       -6.107122,       -4.864189,       -10.378888,       -6.58452,       -4.742433,       -13.011298,       -6.446645,       -8.034865
-8.30112,       -0.850723,       -8.912645,       -2.15468,       -9.823454,       -8.299303,       -5.412918,       -10.796409,       -10.767757,       -3.523985,       -11.366332,       -5.734701,       -6.162643,       -8.571994,       -7.511127,       -7.593626
-8.247247,       -8.912645,       -0.620409,       -5.99173,       -11.148192,       -14.663968,       -4.601364,       -9.227038,       -8.997564,       -6.560875,       -4.925529,       -6.900026,       -6.802035,       -8.499066,       -5.32908,       -10.67708
-5.093921,       -2.15468,       -5.99173,       4.836166,       -6.46664,       -7.212486,       0.963844,       -5.82936,       -7.212088,       2.160935,       -6.810505,       0.337224,       0.694711,       -5.75466,       -1.391606,       -2.826721
-10.026187,       -9.823454,       -11.148192,       -6.46664,       -3.971952,       -10.578234,       -3.435937,       -7.776565,       -8.59406,       -5.85072,       -10.638933,       -8.278907,       -2.415914,       -7.839707,       -6.133666,       -7.682345
-13.406598,       -8.299303,       -14.663968,       -7.212486,       -10.578234,       -1.513713,       -5.041213,       -6.047996,       -11.291513,       -3.766969,       -10.872246,       -7.803882,       -7.057576,       -8.202569,       -8.377899,       -6.032733
-5.638015,       -5.412918,       -4.601364,       0.963844,       -3.435937,       -5.041213,       5.624635,       -4.810476,       -6.898129,       1.513694,       -4.439115,       -1.007469,       2.15505,       -4.834356,       1.021794,       -3.831125
-11.609096,       -10.796409,       -9.227038,       -5.82936,       -7.776565,       -6.047996,       -4.810476,       -1.073335,       -6.817145,       -6.555196,       -12.673945,       -6.622183,       -4.755287,       -4.749965,       -7.812017,       -4.451747
-6.107122,       -10.767757,       -8.997564,       -7.212088,       -8.59406,       -11.291513,       -6.898129,       -6.817145,       -0.690748,       -5.473036,       -9.428438,       -6.416607,       -5.982571,       -6.651136,       -7.657508,       -11.885527
-4.864189,       -3.523985,       -6.560875,       2.160935,       -5.85072,       -3.766969,       1.513694,       -6.555196,       -5.473036,       5.782272,       -4.988433,       0.966461,       0.728593,       -4.558018,       -0.633866,       -4.264496
-10.378888,       -11.366332,       -4.925529,       -6.810505,       -10.638933,       -10.872246,       -4.439115,       -12.673945,       -9.428438,       -4.988433,       -2.200742,       -5.825546,       -6.467277,       -11.80006,       -4.089451,       -11.734257
-6.58452,       -5.734701,       -6.900026,       0.337224,       -8.278907,       -7.803882,       -1.007469,       -6.622183,       -6.416607,       0.966461,       -5.825546,       3.616727,       -1.52738,       -5.013474,       -2.472229,       -4.785589
-4.742433,       -6.162643,       -6.802035,       0.694711,       -2.415914,       -7.057576,       2.15505,       -4.755287,       -5.982571,       0.728593,       -6.467277,       -1.52738,       5.1016,       -3.401976,       0.569684,       -3.926774
-13.011298,       -8.571994,       -8.499066,       -5.75466,       -7.839707,       -8.202569,       -4.834356,       -4.749965,       -6.651136,       -4.558018,       -11.80006,       -5.013474,       -3.401976,       -3.107769,       -5.726571,       -4.595881
-6.446645,       -7.511127,       -5.32908,       -1.391606,       -6.133666,       -8.377899,       1.021794,       -7.812017,       -7.657508,       -0.633866,       -4.089451,       -2.472229,       0.569684,       -5.726571,       3.55092,       -4.442048
-8.034865,       -7.593626,       -10.67708,       -2.826721,       -7.682345,       -6.032733,       -3.831125,       -4.451747,       -11.885527,       -4.264496,       -11.734257,       -4.785589,       -3.926774,       -4.595881,       -4.442048,       0.080549
                    };
            return _data;
        }
    };
//    H: 4.0739
//    E: -2.8381


// ----------------------------------------------------------------------------
// Ribosum90_65 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.258802    0.219650    0.300636    0.220912
	struct Ribosum90_65 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum90_65>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.26961,       -2.055949,       -1.651278,       -1.608554
-2.055949,       1.227724,       -2.6862,       -1.151209
-1.651278,       -2.6862,       1.086051,       -1.92611
-1.608554,       -1.151209,       -1.92611,       1.700603
                    };
            return _data;
        }
    };
//    H: 0.9788
//    E: -0.3061

// ----------------------------------------------------------------------------
// Ribosum90_65N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum90_65N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum90_65N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.26961,       -2.055949,       -1.651278,       -1.608554,       -2.6862
-2.055949,       1.227724,       -2.6862,       -1.151209,       -2.6862
-1.651278,       -2.6862,       1.086051,       -1.92611,       -2.6862
-1.608554,       -1.151209,       -1.92611,       1.700603,       -2.6862
-2.6862,       -2.6862,       -2.6862,       -2.6862,       -2.6862
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum90_65d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum90_65d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum90_65d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.129015,       -8.223641,       -8.147653,       -4.422026,       -9.630999,       -13.364641,       -4.868334,       -12.215241,       -6.608544,       -4.779267,       -8.913977,       -5.964173,       -4.365674,       -10.70878,       -6.152093,       -9.100657
-8.223641,       -2.043308,       -9.105354,       -2.111624,       -9.617695,       -9.547891,       -5.982796,       -10.660158,       -9.984021,       -3.734459,       -11.904364,       -5.591406,       -5.737995,       -8.476311,       -7.328691,       -7.727319
-8.147653,       -9.105354,       -0.683246,       -5.445366,       -9.59618,       -14.841087,       -4.674677,       -9.173979,       -9.426547,       -6.114863,       -5.543117,       -6.910197,       -6.294704,       -8.311977,       -5.763156,       -10.778416
-4.422026,       -2.111624,       -5.445366,       4.57717,       -5.966288,       -6.977142,       1.504748,       -5.431948,       -6.03568,       2.576993,       -5.767284,       0.499398,       1.500662,       -5.099971,       -0.718418,       -3.082418
-9.630999,       -9.617695,       -9.59618,       -5.966288,       -5.324711,       -11.55324,       -3.73293,       -7.564379,       -8.337785,       -6.280391,       -12.070018,       -8.452312,       -2.572196,       -6.849331,       -6.04739,       -8.355794
-13.364641,       -9.547891,       -14.841087,       -6.977142,       -11.55324,       -3.063525,       -5.578298,       -6.37913,       -13.320814,       -3.932641,       -12.931358,       -7.938382,       -7.33303,       -7.79347,       -8.81843,       -5.891864
-4.868334,       -5.982796,       -4.674677,       1.504748,       -3.73293,       -5.578298,       5.433518,       -4.77808,       -6.396882,       1.850314,       -4.630083,       -0.51251,       2.635562,       -4.780277,       1.221221,       -3.957271
-12.215241,       -10.660158,       -9.173979,       -5.431948,       -7.564379,       -6.37913,       -4.77808,       -1.918915,       -7.310145,       -5.872048,       -13.874432,       -6.409132,       -4.502807,       -3.82542,       -7.784291,       -4.540146
-6.608544,       -9.984021,       -9.426547,       -6.03568,       -8.337785,       -13.320814,       -6.396882,       -7.310145,       -0.993154,       -5.433286,       -8.900847,       -6.587589,       -6.049568,       -6.537024,       -7.681133,       -11.683245
-4.779267,       -3.734459,       -6.114863,       2.576993,       -6.280391,       -3.932641,       1.850314,       -5.872048,       -5.433286,       5.668652,       -4.552608,       1.063703,       1.385994,       -4.637905,       -0.243222,       -4.252751
-8.913977,       -11.904364,       -5.543117,       -5.767284,       -12.070018,       -12.931358,       -4.630083,       -13.874432,       -8.900847,       -4.552608,       -1.957722,       -6.146542,       -6.039525,       -11.421058,       -4.168568,       -11.25231
-5.964173,       -5.591406,       -6.910197,       0.499398,       -8.452312,       -7.938382,       -0.51251,       -6.409132,       -6.587589,       1.063703,       -6.146542,       3.550346,       -0.725411,       -5.860989,       -2.175048,       -4.939153
-4.365674,       -5.737995,       -6.294704,       1.500662,       -2.572196,       -7.33303,       2.635562,       -4.502807,       -6.049568,       1.385994,       -6.039525,       -0.725411,       5.040672,       -2.975542,       1.018589,       -3.565866
-10.70878,       -8.476311,       -8.311977,       -5.099971,       -6.849331,       -7.79347,       -4.780277,       -3.82542,       -6.537024,       -4.637905,       -11.421058,       -5.860989,       -2.975542,       -3.145245,       -4.918369,       -5.376467
-6.152093,       -7.328691,       -5.763156,       -0.718418,       -6.04739,       -8.81843,       1.221221,       -7.784291,       -7.681133,       -0.243222,       -4.168568,       -2.175048,       1.018589,       -4.918369,       3.432592,       -4.622044
-9.100657,       -7.727319,       -10.778416,       -3.082418,       -8.355794,       -5.891864,       -3.957271,       -4.540146,       -11.683245,       -4.252751,       -11.25231,       -4.939153,       -3.565866,       -5.376467,       -4.622044,       0.12543
                    };
            return _data;
        }
    };
//    H: 3.8675
//    E: -2.8448


// ----------------------------------------------------------------------------
// Ribosum55_55 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.256380    0.220773    0.300696    0.222151
	struct Ribosum55_55 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum55_55>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.28372,       -2.0591,       -1.677903,       -1.616425
-2.0591,       1.225682,       -2.641842,       -1.12439
-1.677903,       -2.641842,       1.081489,       -1.935438
-1.616425,       -1.12439,       -1.935438,       1.705054
                    };
            return _data;
        }
    };
//    H: 0.9807
//    E: -0.3060

// ----------------------------------------------------------------------------
// Ribosum55_55N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum55_55N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum55_55N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.28372,       -2.0591,       -1.677903,       -1.616425,       -2.641842
-2.0591,       1.225682,       -2.641842,       -1.12439,       -2.641842
-1.677903,       -2.641842,       1.081489,       -1.935438,       -2.641842
-1.616425,       -1.12439,       -1.935438,       1.705054,       -2.641842
-2.641842,       -2.641842,       -2.641842,       -2.641842,       -2.641842
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum55_55d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum55_55d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum55_55d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.869758,       -7.786219,       -8.17347,       -4.704469,       -9.392992,       -14.30177,       -4.855451,       -11.934111,       -6.154819,       -4.780754,       -9.718542,       -6.141832,       -4.602064,       -11.932769,       -6.230258,       -8.653046
-7.786219,       -1.775422,       -9.28318,       -2.071977,       -10.019409,       -9.214912,       -5.801197,       -10.650882,       -10.172458,       -3.802289,       -12.153356,       -4.783923,       -5.788553,       -8.614524,       -7.350182,       -7.906084
-8.17347,       -9.28318,       -0.671202,       -5.70441,       -10.564483,       -14.678387,       -4.738839,       -8.94136,       -8.84517,       -6.288182,       -5.470189,       -6.908898,       -5.420871,       -8.332636,       -5.79719,       -10.609328
-4.704469,       -2.071977,       -5.70441,       4.609327,       -6.017457,       -6.682032,       1.52662,       -5.562222,       -5.837899,       2.578919,       -6.093556,       0.470406,       1.434385,       -5.378999,       -0.67634,       -3.025134
-9.392992,       -10.019409,       -10.564483,       -6.017457,       -5.54966,       -11.174059,       -3.859792,       -7.643085,       -8.571117,       -5.94863,       -10.954206,       -8.071315,       -2.653056,       -7.396867,       -6.213342,       -8.341904
-14.30177,       -9.214912,       -14.678387,       -6.682032,       -11.174059,       -2.792195,       -5.192554,       -6.159299,       -13.614257,       -3.985013,       -12.357274,       -7.754902,       -6.95785,       -8.38081,       -8.42398,       -5.987708
-4.855451,       -5.801197,       -4.738839,       1.52662,       -3.859792,       -5.192554,       5.424643,       -4.914031,       -6.413969,       1.905436,       -4.54221,       -0.47282,       2.577222,       -4.640362,       1.176302,       -3.724473
-11.934111,       -10.650882,       -8.94136,       -5.562222,       -7.643085,       -6.159299,       -4.914031,       -1.846587,       -6.627302,       -5.897956,       -13.450261,       -5.865535,       -4.303518,       -3.954058,       -7.394972,       -4.707326
-6.154819,       -10.172458,       -8.84517,       -5.837899,       -8.571117,       -13.614257,       -6.413969,       -6.627302,       -0.939892,       -5.018901,       -9.592349,       -6.437031,       -6.031316,       -6.401317,       -7.748108,       -11.647042
-4.780754,       -3.802289,       -6.288182,       2.578919,       -5.94863,       -3.985013,       1.905436,       -5.897956,       -5.018901,       5.638266,       -4.617356,       1.102434,       1.379323,       -4.81562,       -0.184985,       -4.07808
-9.718542,       -12.153356,       -5.470189,       -6.093556,       -10.954206,       -12.357274,       -4.54221,       -13.450261,       -9.592349,       -4.617356,       -2.123453,       -5.640149,       -6.140326,       -11.84223,       -4.203755,       -11.747038
-6.141832,       -4.783923,       -6.908898,       0.470406,       -8.071315,       -7.754902,       -0.47282,       -5.865535,       -6.437031,       1.102434,       -5.640149,       3.542604,       -0.778462,       -5.191833,       -2.094471,       -4.856003
-4.602064,       -5.788553,       -5.420871,       1.434385,       -2.653056,       -6.95785,       2.577222,       -4.303518,       -6.031316,       1.379323,       -6.140326,       -0.778462,       5.036458,       -3.050131,       1.006954,       -3.585005
-11.932769,       -8.614524,       -8.332636,       -5.378999,       -7.396867,       -8.38081,       -4.640362,       -3.954058,       -6.401317,       -4.81562,       -11.84223,       -5.191833,       -3.050131,       -3.417737,       -4.928025,       -5.179217
-6.230258,       -7.350182,       -5.79719,       -0.67634,       -6.213342,       -8.42398,       1.176302,       -7.394972,       -7.748108,       -0.184985,       -4.203755,       -2.094471,       1.006954,       -4.928025,       3.433599,       -4.202505
-8.653046,       -7.906084,       -10.609328,       -3.025134,       -8.341904,       -5.987708,       -3.724473,       -4.707326,       -11.647042,       -4.07808,       -11.747038,       -4.856003,       -3.585005,       -5.179217,       -4.202505,       0.043772
                    };
            return _data;
        }
    };
//    H: 3.8489
//    E: -2.8276


// ----------------------------------------------------------------------------
// Ribosum45_75 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.254582    0.220691    0.298343    0.226383
	struct Ribosum45_75 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum45_75>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.342281,       -2.354714,       -2.028547,       -1.978379
-2.354714,       1.322101,       -2.885242,       -1.269733
-2.028547,       -2.885242,       1.153218,       -2.273966
-1.978379,       -1.269733,       -2.273966,       1.779552
                    };
            return _data;
        }
    };
//    H: 1.1195
//    E: -0.3973

// ----------------------------------------------------------------------------
// Ribosum45_75N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum45_75N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum45_75N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.342281,       -2.354714,       -2.028547,       -1.978379,       -2.885242
-2.354714,       1.322101,       -2.885242,       -1.269733,       -2.885242
-2.028547,       -2.885242,       1.153218,       -2.273966,       -2.885242
-1.978379,       -1.269733,       -2.273966,       1.779552,       -2.885242
-2.885242,       -2.885242,       -2.885242,       -2.885242,       -2.885242
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum45_75d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum45_75d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum45_75d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.253125,       -8.347016,       -8.177647,       -5.068275,       -10.333412,       -13.752063,       -5.568768,       -11.87354,       -5.758211,       -4.735587,       -10.347261,       -6.475998,       -4.776024,       -13.119223,       -6.216271,       -8.22034
-8.347016,       -1.317302,       -9.013856,       -2.193397,       -10.130453,       -8.7068,       -5.718052,       -11.19084,       -10.509841,       -3.790607,       -12.677913,       -6.024995,       -6.241904,       -8.817803,       -7.562063,       -7.855607
-8.177647,       -9.013856,       -0.574264,       -6.053782,       -11.085373,       -14.74064,       -4.789855,       -8.843149,       -9.37453,       -6.518914,       -5.217476,       -7.009471,       -6.722398,       -8.113333,       -5.504391,       -10.658833
-5.068275,       -2.193397,       -6.053782,       4.795871,       -6.534578,       -7.403656,       1.126651,       -5.897232,       -7.087765,       2.281607,       -6.78372,       0.348998,       1.008934,       -5.855429,       -1.133332,       -2.951793
-10.333412,       -10.130453,       -11.085373,       -6.534578,       -5.005943,       -11.24943,       -3.756481,       -7.710264,       -8.672947,       -6.185746,       -11.536982,       -8.533553,       -2.588722,       -7.692851,       -6.305839,       -7.915273
-13.752063,       -8.7068,       -14.74064,       -7.403656,       -11.24943,       -2.067926,       -5.177087,       -6.518363,       -13.472152,       -4.028186,       -12.468911,       -8.209928,       -7.498655,       -8.535405,       -8.940924,       -6.375848
-5.568768,       -5.718052,       -4.789855,       1.126651,       -3.756481,       -5.177087,       5.537445,       -4.943429,       -6.917017,       1.522105,       -4.443616,       -0.952316,       2.276037,       -4.719632,       1.052441,       -3.964041
-11.87354,       -11.19084,       -8.843149,       -5.897232,       -7.710264,       -6.518363,       -4.943429,       -1.395756,       -6.399919,       -6.649298,       -13.018565,       -6.791389,       -4.637663,       -4.353505,       -7.923899,       -4.655126
-5.758211,       -10.509841,       -9.37453,       -7.087765,       -8.672947,       -13.472152,       -6.917017,       -6.399919,       -0.829967,       -5.606806,       -9.83484,       -6.646264,       -5.821973,       -6.243736,       -7.646264,       -11.609985
-4.735587,       -3.790607,       -6.518914,       2.281607,       -6.185746,       -4.028186,       1.522105,       -6.649298,       -5.606806,       5.711774,       -5.206258,       0.9167,       0.888662,       -4.828831,       -0.515715,       -4.492582
-10.347261,       -12.677913,       -5.217476,       -6.78372,       -11.536982,       -12.468911,       -4.443616,       -13.018565,       -9.83484,       -5.206258,       -2.160374,       -6.080512,       -6.636908,       -11.834471,       -4.182172,       -11.727597
-6.475998,       -6.024995,       -7.009471,       0.348998,       -8.533553,       -8.209928,       -0.952316,       -6.791389,       -6.646264,       0.9167,       -6.080512,       3.628191,       -1.318408,       -5.231761,       -2.327794,       -5.05233
-4.776024,       -6.241904,       -6.722398,       1.008934,       -2.588722,       -7.498655,       2.276037,       -4.637663,       -5.821973,       0.888662,       -6.636908,       -1.318408,       5.134354,       -3.098148,       0.719605,       -3.902782
-13.119223,       -8.817803,       -8.113333,       -5.855429,       -7.692851,       -8.535405,       -4.719632,       -4.353505,       -6.243736,       -4.828831,       -11.834471,       -5.231761,       -3.098148,       -3.165243,       -5.435014,       -4.77302
-6.216271,       -7.562063,       -5.504391,       -1.133332,       -6.305839,       -8.940924,       1.052441,       -7.923899,       -7.646264,       -0.515715,       -4.182172,       -2.327794,       0.719605,       -5.435014,       3.545551,       -4.481653
-8.22034,       -7.855607,       -10.658833,       -2.951793,       -7.915273,       -6.375848,       -3.964041,       -4.655126,       -11.609985,       -4.492582,       -11.727597,       -5.05233,       -3.902782,       -4.77302,       -4.481653,       0.17636
                    };
            return _data;
        }
    };
//    H: 4.0359
//    E: -2.9137


// ----------------------------------------------------------------------------
// Ribosum65_65 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.258041    0.217180    0.294142    0.230637
	struct Ribosum65_65 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum65_65>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.256464,       -2.141196,       -1.788754,       -1.768491
-2.141196,       1.301933,       -2.649555,       -1.119608
-1.788754,       -2.649555,       1.13443,       -2.03455
-1.768491,       -1.119608,       -2.03455,       1.690974
                    };
            return _data;
        }
    };
//    H: 1.0075
//    E: -0.3246

// ----------------------------------------------------------------------------
// Ribosum65_65N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum65_65N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum65_65N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.256464,       -2.141196,       -1.788754,       -1.768491,       -2.649555
-2.141196,       1.301933,       -2.649555,       -1.119608,       -2.649555
-1.788754,       -2.649555,       1.13443,       -2.03455,       -2.649555
-1.768491,       -1.119608,       -2.03455,       1.690974,       -2.649555
-2.649555,       -2.649555,       -2.649555,       -2.649555,       -2.649555
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum65_65d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum65_65d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum65_65d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.355379,       -8.068564,       -8.176551,       -4.750314,       -9.649441,       -13.913843,       -5.177231,       -11.501177,       -6.21954,       -4.843251,       -9.719485,       -6.464491,       -4.646493,       -11.942123,       -6.501339,       -8.248067
-8.068564,       -1.262171,       -9.070283,       -2.052084,       -9.57061,       -8.734867,       -5.623703,       -10.537011,       -10.453916,       -3.55829,       -12.133513,       -5.701117,       -5.934213,       -8.148996,       -7.548272,       -7.619356
-8.176551,       -9.070283,       -0.66584,       -5.89762,       -10.719562,       -14.618612,       -4.617279,       -9.084965,       -8.814936,       -6.400388,       -5.181437,       -6.79616,       -6.661829,       -8.452859,       -5.495528,       -10.461181
-4.750314,       -2.052084,       -5.89762,       4.693308,       -6.024965,       -6.91277,       1.307769,       -5.723794,       -6.377858,       2.438092,       -6.060225,       0.455017,       1.114779,       -5.385808,       -0.928197,       -2.856495
-9.649441,       -9.57061,       -10.719562,       -6.024965,       -4.907753,       -11.069928,       -3.576617,       -7.610391,       -8.542175,       -5.946283,       -10.963555,       -8.338262,       -2.412292,       -7.404513,       -6.138227,       -7.929314
-13.913843,       -8.734867,       -14.618612,       -6.91277,       -11.069928,       -2.020775,       -5.257644,       -5.639995,       -13.827469,       -3.885301,       -11.223635,       -7.949182,       -7.13571,       -7.878478,       -8.640774,       -5.620845
-5.177231,       -5.623703,       -4.617279,       1.307769,       -3.576617,       -5.257644,       5.543297,       -4.680776,       -6.537639,       1.75411,       -4.468214,       -0.657741,       2.42703,       -4.61636,       1.123424,       -3.78797
-11.501177,       -10.537011,       -9.084965,       -5.723794,       -7.610391,       -5.639995,       -4.680776,       -1.382439,       -6.815635,       -6.130163,       -12.986384,       -6.266522,       -4.45029,       -4.118426,       -7.785818,       -4.264575
-6.21954,       -10.453916,       -8.814936,       -6.377858,       -8.542175,       -13.827469,       -6.537639,       -6.815635,       -0.796574,       -5.304196,       -9.288705,       -6.593153,       -6.150871,       -6.58382,       -7.644303,       -11.9474
-4.843251,       -3.55829,       -6.400388,       2.438092,       -5.946283,       -3.885301,       1.75411,       -6.130163,       -5.304196,       5.731972,       -4.555001,       1.068692,       1.135431,       -4.610513,       -0.332312,       -4.124483
-9.719485,       -12.133513,       -5.181437,       -6.060225,       -10.963555,       -11.223635,       -4.468214,       -12.986384,       -9.288705,       -4.555001,       -2.158679,       -5.785748,       -6.160702,       -11.657268,       -3.973087,       -11.617002
-6.464491,       -5.701117,       -6.79616,       0.455017,       -8.338262,       -7.949182,       -0.657741,       -6.266522,       -6.593153,       1.068692,       -5.785748,       3.555374,       -1.014857,       -5.24059,       -2.240966,       -4.816324
-4.646493,       -5.934213,       -6.661829,       1.114779,       -2.412292,       -7.13571,       2.42703,       -4.45029,       -6.150871,       1.135431,       -6.160702,       -1.014857,       5.033695,       -3.165536,       0.851754,       -3.663709
-11.942123,       -8.148996,       -8.452859,       -5.385808,       -7.404513,       -7.878478,       -4.61636,       -4.118426,       -6.58382,       -4.610513,       -11.657268,       -5.24059,       -3.165536,       -3.37659,       -5.261432,       -4.809853
-6.501339,       -7.548272,       -5.495528,       -0.928197,       -6.138227,       -8.640774,       1.123424,       -7.785818,       -7.644303,       -0.332312,       -3.973087,       -2.240966,       0.851754,       -5.261432,       3.457809,       -4.557959
-8.248067,       -7.619356,       -10.461181,       -2.856495,       -7.929314,       -5.620845,       -3.78797,       -4.264575,       -11.9474,       -4.124483,       -11.617002,       -4.816324,       -3.663709,       -4.809853,       -4.557959,       0.003084
                    };
            return _data;
        }
    };
//    H: 3.9311
//    E: -2.8123


// ----------------------------------------------------------------------------
// Ribosum95_35 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.259498    0.219043    0.296998    0.224461
	struct Ribosum95_35 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum95_35>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.959632,       -1.330667,       -0.915272,       -0.971655
-1.330667,       0.994562,       -1.690083,       -0.619267
-0.915272,       -1.690083,       0.852228,       -1.103918
-0.971655,       -0.619267,       -1.103918,       1.373427
                    };
            return _data;
        }
    };
//    H: 0.5544
//    E: -0.0927

// ----------------------------------------------------------------------------
// Ribosum95_35N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum95_35N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum95_35N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.959632,       -1.330667,       -0.915272,       -0.971655,       -1.690083
-1.330667,       0.994562,       -1.690083,       -0.619267,       -1.690083
-0.915272,       -1.690083,       0.852228,       -1.103918,       -1.690083
-0.971655,       -0.619267,       -1.103918,       1.373427,       -1.690083
-1.690083,       -1.690083,       -1.690083,       -1.690083,       -1.690083
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum95_35d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum95_35d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum95_35d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.83338,       -8.540497,       -9.169644,       -4.957916,       -9.970372,       -13.481089,       -3.824603,       -11.938803,       -6.944078,       -5.185921,       -9.662855,       -6.415349,       -2.489926,       -11.832676,       -3.646643,       -8.887904
-8.540497,       -2.062688,       -9.338212,       -1.623591,       -10.360754,       -8.795495,       -5.347366,       -10.613136,       -7.669854,       -2.701999,       -10.140927,       -4.681274,       -5.409208,       -8.905171,       -7.122004,       -8.297561
-9.169644,       -9.338212,       -1.33273,       -5.886672,       -10.348401,       -14.749249,       -2.562117,       -9.497167,       -9.633559,       -6.116049,       -4.364653,       -7.082292,       -2.845467,       -7.962246,       -5.781166,       -9.532807
-4.957916,       -1.623591,       -5.886672,       4.222259,       -5.612482,       -2.478751,       2.05373,       -4.124853,       -3.85922,       2.888464,       -4.8046,       0.740944,       1.903339,       -4.299176,       -0.377684,       -2.395783
-9.970372,       -10.360754,       -10.348401,       -5.612482,       -6.185058,       -11.363073,       -3.135769,       -8.33782,       -7.986382,       -5.342693,       -11.460251,       -6.0934,       -2.898383,       -7.829112,       -6.100119,       -8.872221
-13.481089,       -8.795495,       -14.749249,       -2.478751,       -11.363073,       -3.693052,       -5.021822,       -6.954764,       -12.696171,       -3.702805,       -11.709851,       -6.988903,       -6.310407,       -8.563738,       -8.232052,       -6.510908
-3.824603,       -5.347366,       -2.562117,       2.05373,       -3.135769,       -5.021822,       5.214519,       -4.329601,       -5.853151,       2.817023,       -4.66097,       0.25569,       2.954995,       -4.27413,       1.222108,       -3.040534
-11.938803,       -10.613136,       -9.497167,       -4.124853,       -8.33782,       -6.954764,       -4.329601,       -2.677732,       -7.601631,       -2.197174,       -9.314386,       -4.452938,       -4.317954,       -4.578597,       -6.404031,       -5.397941
-6.944078,       -7.669854,       -9.633559,       -3.85922,       -7.986382,       -12.696171,       -5.853151,       -7.601631,       -1.651945,       -2.605959,       -9.515402,       -6.237965,       -4.74088,       -7.14017,       -7.631185,       -9.787695
-5.185921,       -2.701999,       -6.116049,       2.888464,       -5.342693,       -3.702805,       2.817023,       -2.197174,       -2.605959,       5.499282,       -4.643474,       1.425256,       1.935458,       -4.064578,       0.314468,       -2.943384
-9.662855,       -10.140927,       -4.364653,       -4.8046,       -11.460251,       -11.709851,       -4.66097,       -9.314386,       -9.515402,       -4.643474,       -2.191108,       -5.524836,       -6.22219,       -10.719635,       -4.283873,       -5.027269
-6.415349,       -4.681274,       -7.082292,       0.740944,       -6.0934,       -6.988903,       0.25569,       -4.452938,       -6.237965,       1.425256,       -5.524836,       3.306878,       0.08987,       -4.569487,       -1.328991,       -2.624759
-2.489926,       -5.409208,       -2.845467,       1.903339,       -2.898383,       -6.310407,       2.954995,       -4.317954,       -4.74088,       1.935458,       -6.22219,       0.08987,       4.713679,       -3.545001,       1.046081,       -1.582126
-11.832676,       -8.905171,       -7.962246,       -4.299176,       -7.829112,       -8.563738,       -4.27413,       -4.578597,       -7.14017,       -4.064578,       -10.719635,       -4.569487,       -3.545001,       -3.989992,       -4.242414,       -6.024924
-3.646643,       -7.122004,       -5.781166,       -0.377684,       -6.100119,       -8.232052,       1.222108,       -6.404031,       -7.631185,       0.314468,       -4.283873,       -1.328991,       1.046081,       -4.242414,       3.181031,       -3.681482
-8.887904,       -8.297561,       -9.532807,       -2.395783,       -8.872221,       -6.510908,       -3.040534,       -5.397941,       -9.787695,       -2.943384,       -5.027269,       -2.624759,       -1.582126,       -6.024924,       -3.681482,       -0.73662
                    };
            return _data;
        }
    };
//    H: 3.4588
//    E: -2.5899


// ----------------------------------------------------------------------------
// Ribosum70_70 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.257589    0.217504    0.293926    0.230982
	struct Ribosum70_70 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum70_70>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.269321,       -2.19782,       -1.852062,       -1.835605
-2.19782,       1.321113,       -2.688775,       -1.150563
-1.852062,       -2.688775,       1.14715,       -2.099225
-1.835605,       -1.150563,       -2.099225,       1.706206
                    };
            return _data;
        }
    };
//    H: 1.0341
//    E: -0.3416

// ----------------------------------------------------------------------------
// Ribosum70_70N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum70_70N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum70_70N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.269321,       -2.19782,       -1.852062,       -1.835605,       -2.688775
-2.19782,       1.321113,       -2.688775,       -1.150563,       -2.688775
-1.852062,       -2.688775,       1.14715,       -2.099225,       -2.688775
-1.835605,       -1.150563,       -2.099225,       1.706206,       -2.688775
-2.688775,       -2.688775,       -2.688775,       -2.688775,       -2.688775
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum70_70d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum70_70d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum70_70d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.270103,       -8.044389,       -8.134476,       -4.793535,       -9.950356,       -13.828619,       -5.292556,       -11.752755,       -6.21206,       -4.819396,       -10.040145,       -6.448578,       -4.687229,       -12.071468,       -6.513923,       -8.169896
-8.044389,       -1.201787,       -9.0699,       -2.074617,       -9.589155,       -8.647187,       -5.601409,       -10.725178,       -10.434168,       -3.563005,       -12.381692,       -5.763362,       -6.006593,       -8.413994,       -7.647936,       -7.58983
-8.134476,       -9.0699,       -0.648464,       -5.98695,       -10.838235,       -14.717821,       -4.676365,       -9.036861,       -9.07914,       -6.447232,       -5.144155,       -6.788175,       -6.84255,       -8.412681,       -5.468146,       -10.408151
-4.793535,       -2.074617,       -5.98695,       4.721864,       -6.174049,       -6.938888,       1.251507,       -5.817602,       -6.527219,       2.393532,       -6.328581,       0.419726,       1.048645,       -5.513936,       -0.998916,       -2.891224
-9.950356,       -9.589155,       -10.838235,       -6.174049,       -4.533601,       -11.015503,       -3.569338,       -7.5828,       -8.636414,       -5.954008,       -10.911463,       -8.362278,       -2.433641,       -7.449508,       -6.134492,       -7.87711
-13.828619,       -8.647187,       -14.717821,       -6.938888,       -11.015503,       -1.918257,       -5.228905,       -5.62883,       -13.862359,       -3.880208,       -11.171608,       -7.935116,       -7.166829,       -8.019731,       -8.508637,       -5.843078
-5.292556,       -5.601409,       -4.676365,       1.251507,       -3.569338,       -5.228905,       5.553957,       -4.736594,       -6.635441,       1.695809,       -4.463044,       -0.722936,       2.37894,       -4.697904,       1.099602,       -3.840695
-11.752755,       -10.725178,       -9.036861,       -5.817602,       -7.5828,       -5.62883,       -4.736594,       -1.322821,       -6.753546,       -6.241141,       -12.959096,       -6.391221,       -4.450496,       -4.261753,       -7.79732,       -4.301879
-6.21206,       -10.434168,       -9.07914,       -6.527219,       -8.636414,       -13.862359,       -6.635441,       -6.753546,       -0.772811,       -5.413177,       -9.430684,       -6.622273,       -6.184797,       -6.558608,       -7.641908,       -11.922362
-4.819396,       -3.563005,       -6.447232,       2.393532,       -5.954008,       -3.880208,       1.695809,       -6.241141,       -5.413177,       5.738713,       -4.726035,       1.043278,       1.061924,       -4.681381,       -0.371173,       -4.222448
-10.040145,       -12.381692,       -5.144155,       -6.328581,       -10.911463,       -11.171608,       -4.463044,       -12.959096,       -9.430684,       -4.726035,       -2.168412,       -5.8223,       -6.252585,       -11.68678,       -3.963952,       -11.676938
-6.448578,       -5.763362,       -6.788175,       0.419726,       -8.362278,       -7.935116,       -0.722936,       -6.391221,       -6.622273,       1.043278,       -5.8223,       3.57394,       -1.121326,       -5.224049,       -2.263193,       -4.82211
-4.687229,       -6.006593,       -6.84255,       1.048645,       -2.433641,       -7.166829,       2.37894,       -4.450496,       -6.184797,       1.061924,       -6.252585,       -1.121326,       5.054685,       -3.204978,       0.807297,       -3.760593
-12.071468,       -8.413994,       -8.412681,       -5.513936,       -7.449508,       -8.019731,       -4.697904,       -4.261753,       -6.558608,       -4.681381,       -11.68678,       -5.224049,       -3.204978,       -3.291017,       -5.335924,       -4.793714
-6.513923,       -7.647936,       -5.468146,       -0.998916,       -6.134492,       -8.508637,       1.099602,       -7.79732,       -7.641908,       -0.371173,       -3.963952,       -2.263193,       0.807297,       -5.335924,       3.478025,       -4.533653
-8.169896,       -7.58983,       -10.408151,       -2.891224,       -7.87711,       -5.843078,       -3.840695,       -4.301879,       -11.922362,       -4.222448,       -11.676938,       -4.82211,       -3.760593,       -4.793714,       -4.533653,       0.051665
                    };
            return _data;
        }
    };
//    H: 3.9601
//    E: -2.8320


// ----------------------------------------------------------------------------
// Ribosum65_90 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.272462    0.201900    0.271720    0.253918
	struct Ribosum65_90 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum65_90>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.297716,       -4.282201,       -3.922838,       -3.729706
-4.282201,       1.820826,       -4.577188,       -2.770463
-3.922838,       -4.577188,       1.493055,       -4.198535
-3.729706,       -2.770463,       -4.198535,       1.835952
                    };
            return _data;
        }
    };
//    H: 1.6381
//    E: -0.9934

// ----------------------------------------------------------------------------
// Ribosum65_90N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum65_90N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum65_90N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.297716,       -4.282201,       -3.922838,       -3.729706,       -4.577188
-4.282201,       1.820826,       -4.577188,       -2.770463,       -4.577188
-3.922838,       -4.577188,       1.493055,       -4.198535,       -4.577188
-3.729706,       -2.770463,       -4.198535,       1.835952,       -4.577188
-4.577188,       -4.577188,       -4.577188,       -4.577188,       -4.577188
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum65_90d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum65_90d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum65_90d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-0.778896,       -7.78623,       -7.0765,       -5.845257,       -10.852435,       -999.0,       -7.804927,       -13.489767,       -7.083258,       -6.367023,       -9.161006,       -8.564513,       -6.256762,       -14.411105,       -8.422844,       -11.282393
-7.78623,       -0.02204,       -9.352032,       -4.621034,       -11.427844,       -8.224001,       -8.067433,       -12.215757,       -15.508867,       -3.428057,       -12.453952,       -7.25426,       -9.027791,       -8.898238,       -9.836022,       -10.762365
-7.0765,       -9.352032,       -0.554514,       -6.637772,       -11.382299,       -14.491488,       -6.215808,       -13.085242,       -10.11281,       -8.258099,       -6.920839,       -9.369729,       -7.679749,       -12.159242,       -6.828587,       -11.135733
-5.845257,       -4.621034,       -6.637772,       5.053421,       -9.115264,       -10.168412,       -1.81588,       -6.256129,       -9.863163,       0.175509,       -7.579007,       -1.148725,       -2.027223,       -7.966241,       -4.231672,       -4.683502
-10.852435,       -11.427844,       -11.382299,       -9.115264,       -2.035352,       -10.230912,       -4.139508,       -9.296025,       -10.543067,       -7.824048,       -7.092588,       -9.424066,       -3.960444,       -11.120708,       -7.507866,       -10.946554
-999.0,       -8.224001,       -14.491488,       -10.168412,       -10.230912,       -0.471126,       -5.211991,       -6.059103,       -13.359354,       -4.040556,       -12.469516,       -9.050501,       -9.241281,       -9.5361,       -9.633549,       -7.827144
-7.804927,       -8.067433,       -6.215808,       -1.81588,       -4.139508,       -5.211991,       6.151453,       -5.202847,       -8.603605,       -0.967595,       -5.258114,       -3.194048,       0.039039,       -7.483428,       -0.02641,       -6.097108
-13.489767,       -12.215757,       -13.085242,       -6.256129,       -9.296025,       -6.059103,       -5.202847,       -0.893395,       -13.004518,       -6.854689,       -12.155307,       -6.513275,       -8.428375,       -6.939113,       -8.312077,       -7.701749
-7.083258,       -15.508867,       -10.11281,       -9.863163,       -10.543067,       -13.359354,       -8.603605,       -13.004518,       -0.631377,       -5.776462,       -8.966367,       -6.754976,       -6.750146,       -16.40717,       -11.070458,       -14.415961
-6.367023,       -3.428057,       -8.258099,       0.175509,       -7.824048,       -4.040556,       -0.967595,       -6.854689,       -5.776462,       6.250926,       -4.488505,       -0.024607,       -2.372317,       -4.895427,       -3.185934,       -6.23631
-9.161006,       -12.453952,       -6.920839,       -7.579007,       -7.092588,       -12.469516,       -5.258114,       -12.155307,       -8.966367,       -4.488505,       -1.415962,       -5.972796,       -8.820043,       -11.516905,       -5.550251,       -12.067931
-8.564513,       -7.25426,       -9.369729,       -1.148725,       -9.424066,       -9.050501,       -3.194048,       -6.513275,       -6.754976,       -0.024607,       -5.972796,       3.866703,       -4.306206,       -6.928897,       -4.579528,       -6.11148
-6.256762,       -9.027791,       -7.679749,       -2.027223,       -3.960444,       -9.241281,       0.039039,       -8.428375,       -6.750146,       -2.372317,       -8.820043,       -4.306206,       5.211365,       -5.334803,       -1.350605,       -5.047074
-14.411105,       -8.898238,       -12.159242,       -7.966241,       -11.120708,       -9.5361,       -7.483428,       -6.939113,       -16.40717,       -4.895427,       -11.516905,       -6.928897,       -5.334803,       -0.95035,       -6.260291,       -5.681007
-8.422844,       -9.836022,       -6.828587,       -4.231672,       -7.507866,       -9.633549,       -0.02641,       -8.312077,       -11.070458,       -3.185934,       -5.550251,       -4.579528,       -1.350605,       -6.260291,       3.812385,       -6.485754
-11.282393,       -10.762365,       -11.135733,       -4.683502,       -10.946554,       -7.827144,       -6.097108,       -7.701749,       -14.415961,       -6.23631,       -12.067931,       -6.11148,       -5.047074,       -5.681007,       -6.485754,       0.327143
                    };
            return _data;
        }
    };
//    H: 4.9102
//    E: -6.4939


// ----------------------------------------------------------------------------
// Ribosum90_70 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.258491    0.219712    0.300769    0.221028
	struct Ribosum90_70 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum90_70>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.283819,       -2.117789,       -1.711246,       -1.666788
-2.117789,       1.244913,       -2.734881,       -1.182576
-1.711246,       -2.734881,       1.100206,       -1.991966
-1.666788,       -1.182576,       -1.991966,       1.716586
                    };
            return _data;
        }
    };
//    H: 1.0064
//    E: -0.3230

// ----------------------------------------------------------------------------
// Ribosum90_70N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum90_70N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum90_70N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.283819,       -2.117789,       -1.711246,       -1.666788,       -2.734881
-2.117789,       1.244913,       -2.734881,       -1.182576,       -2.734881
-1.711246,       -2.734881,       1.100206,       -1.991966,       -2.734881
-1.666788,       -1.182576,       -1.991966,       1.716586,       -2.734881
-2.734881,       -2.734881,       -2.734881,       -2.734881,       -2.734881
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum90_70d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum90_70d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum90_70d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.032955,       -8.211363,       -8.126086,       -4.437303,       -9.67589,       -13.201339,       -4.910572,       -12.274695,       -6.576775,       -4.739188,       -9.110781,       -5.931403,       -4.381332,       -10.851921,       -6.112973,       -9.041162
-8.211363,       -1.981584,       -9.040145,       -2.190575,       -9.634013,       -9.413405,       -5.972486,       -10.85034,       -9.955256,       -3.727424,       -12.111514,       -5.63535,       -5.79215,       -8.668107,       -7.38596,       -7.66073
-8.126086,       -9.040145,       -0.66059,       -5.48864,       -9.643106,       -14.968406,       -4.693209,       -9.027008,       -9.506561,       -6.132683,       -5.473546,       -6.952131,       -6.41684,       -8.205817,       -5.732697,       -10.710239
-4.437303,       -2.190575,       -5.48864,       4.607885,       -6.114134,       -6.973676,       1.458841,       -5.519537,       -6.147797,       2.541101,       -5.863453,       0.480826,       1.45827,       -5.254079,       -0.785572,       -3.078179
-9.67589,       -9.634013,       -9.643106,       -6.114134,       -5.288257,       -11.480627,       -3.71821,       -7.47733,       -8.420538,       -6.281828,       -12.108476,       -8.489387,       -2.598259,       -6.811101,       -6.047936,       -8.278694
-13.201339,       -9.413405,       -14.968406,       -6.973676,       -11.480627,       -2.96414,       -5.496035,       -6.360849,       -13.452505,       -3.923603,       -12.923908,       -7.901709,       -7.322317,       -7.825526,       -8.790008,       -6.078287
-4.910572,       -5.972486,       -4.693209,       1.458841,       -3.71821,       -5.496035,       5.448807,       -4.818365,       -6.461597,       1.768136,       -4.616121,       -0.574747,       2.594081,       -4.825629,       1.202931,       -4.007167
-12.274695,       -10.85034,       -9.027008,       -5.519537,       -7.47733,       -6.360849,       -4.818365,       -1.845177,       -7.208878,       -6.035321,       -14.002931,       -6.517373,       -4.466267,       -3.879438,       -7.800215,       -4.549338
-6.576775,       -9.955256,       -9.506561,       -6.147797,       -8.420538,       -13.452505,       -6.461597,       -7.208878,       -0.982645,       -5.453285,       -9.044728,       -6.622392,       -6.073095,       -6.484412,       -7.655735,       -11.608265
-4.739188,       -3.727424,       -6.132683,       2.541101,       -6.281828,       -3.923603,       1.768136,       -6.035321,       -5.453285,       5.676076,       -4.67445,       1.033801,       1.314693,       -4.767407,       -0.291341,       -4.418636
-9.110781,       -12.111514,       -5.473546,       -5.863453,       -12.108476,       -12.923908,       -4.616121,       -14.002931,       -9.044728,       -4.67445,       -1.953767,       -6.183081,       -6.090402,       -11.419645,       -4.12156,       -11.282387
-5.931403,       -5.63535,       -6.952131,       0.480826,       -8.489387,       -7.901709,       -0.574747,       -6.517373,       -6.622392,       1.033801,       -6.183081,       3.565952,       -0.802105,       -5.868484,       -2.189297,       -4.990161
-4.381332,       -5.79215,       -6.41684,       1.45827,       -2.598259,       -7.322317,       2.594081,       -4.466267,       -6.073095,       1.314693,       -6.090402,       -0.802105,       5.063441,       -2.969975,       0.989393,       -3.662753
-10.851921,       -8.668107,       -8.205817,       -5.254079,       -6.811101,       -7.825526,       -4.825629,       -3.879438,       -6.484412,       -4.767407,       -11.419645,       -5.868484,       -2.969975,       -3.172852,       -4.952907,       -5.363249
-6.112973,       -7.38596,       -5.732697,       -0.785572,       -6.047936,       -8.790008,       1.202931,       -7.800215,       -7.655735,       -0.291341,       -4.12156,       -2.189297,       0.989393,       -4.952907,       3.453072,       -4.614925
-9.041162,       -7.66073,       -10.710239,       -3.078179,       -8.278694,       -6.078287,       -4.007167,       -4.549338,       -11.608265,       -4.418636,       -11.282387,       -4.990161,       -3.662753,       -5.363249,       -4.614925,       0.147337
                    };
            return _data;
        }
    };
//    H: 3.8956
//    E: -2.8559


// ----------------------------------------------------------------------------
// Ribosum85_75 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.258586    0.219067    0.298622    0.223725
	struct Ribosum85_75 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum85_75>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.279583,       -2.185908,       -1.816128,       -1.731732
-2.185908,       1.287533,       -2.715156,       -1.251949
-1.816128,       -2.715156,       1.130348,       -2.091995
-1.731732,       -1.251949,       -2.091995,       1.737935
                    };
            return _data;
        }
    };
//    H: 1.0362
//    E: -0.3410

// ----------------------------------------------------------------------------
// Ribosum85_75N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum85_75N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum85_75N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.279583,       -2.185908,       -1.816128,       -1.731732,       -2.715156
-2.185908,       1.287533,       -2.715156,       -1.251949,       -2.715156
-1.816128,       -2.715156,       1.130348,       -2.091995,       -2.715156
-1.731732,       -1.251949,       -2.091995,       1.737935,       -2.715156
-2.715156,       -2.715156,       -2.715156,       -2.715156,       -2.715156
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum85_75d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum85_75d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum85_75d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.697152,       -7.463906,       -8.299832,       -4.468084,       -9.418339,       -14.186299,       -5.207254,       -13.002363,       -6.577377,       -5.22321,       -8.854963,       -5.910226,       -4.137567,       -13.128623,       -6.051452,       -9.158454
-7.463906,       -1.519038,       -8.102783,       -2.273684,       -9.48314,       -10.011867,       -5.789649,       -11.351175,       -9.702468,       -3.751374,       -11.805336,       -5.983385,       -5.613241,       -9.09473,       -6.902463,       -7.832609
-8.299832,       -8.102783,       -0.687005,       -5.413325,       -10.696247,       -16.051364,       -4.623394,       -9.52644,       -9.531137,       -5.823488,       -4.877902,       -6.887625,       -6.589424,       -8.693788,       -5.761255,       -11.151924
-4.468084,       -2.273684,       -5.413325,       4.723084,       -6.245175,       -7.374091,       1.237771,       -6.179288,       -6.105141,       2.414293,       -6.254495,       0.509133,       1.187122,       -5.434962,       -1.001445,       -2.754718
-9.418339,       -9.48314,       -10.696247,       -6.245175,       -4.307584,       -10.810524,       -3.411053,       -7.983187,       -8.125919,       -6.477765,       -12.105459,       -8.461784,       -2.286806,       -7.056783,       -5.874623,       -7.986556
-14.186299,       -10.011867,       -16.051364,       -7.374091,       -10.810524,       -2.752644,       -5.744256,       -5.692703,       -13.044128,       -3.645508,       -12.985386,       -8.286838,       -6.920017,       -7.371093,       -8.784296,       -5.636253
-5.207254,       -5.789649,       -4.623394,       1.237771,       -3.411053,       -5.744256,       5.517536,       -5.099826,       -6.306307,       1.649598,       -4.546126,       -0.691455,       2.403317,       -5.349652,       1.168412,       -4.244953
-13.002363,       -11.351175,       -9.52644,       -6.179288,       -7.983187,       -5.692703,       -5.099826,       -1.555072,       -7.410328,       -6.665788,       -13.573803,       -6.808394,       -5.11147,       -3.959956,       -7.702046,       -5.480616
-6.577377,       -9.702468,       -9.531137,       -6.105141,       -8.125919,       -13.044128,       -6.306307,       -7.410328,       -0.925064,       -5.287638,       -8.8529,       -6.914885,       -6.14381,       -6.508844,       -7.394017,       -12.233368
-5.22321,       -3.751374,       -5.823488,       2.414293,       -6.477765,       -3.645508,       1.649598,       -6.665788,       -5.287638,       5.719178,       -4.734723,       0.982226,       1.083701,       -4.694966,       -0.463393,       -4.551268
-8.854963,       -11.805336,       -4.877902,       -6.254495,       -12.105459,       -12.985386,       -4.546126,       -13.573803,       -8.8529,       -4.734723,       -1.941631,       -6.238874,       -6.037109,       -12.020065,       -3.951473,       -10.460937
-5.910226,       -5.983385,       -6.887625,       0.509133,       -8.461784,       -8.286838,       -0.691455,       -6.808394,       -6.914885,       0.982226,       -6.238874,       3.549136,       -1.087985,       -5.5989,       -2.280634,       -4.525869
-4.137567,       -5.613241,       -6.589424,       1.187122,       -2.286806,       -6.920017,       2.403317,       -5.11147,       -6.14381,       1.083701,       -6.037109,       -1.087985,       5.095946,       -3.089326,       0.856733,       -3.814381
-13.128623,       -9.09473,       -8.693788,       -5.434962,       -7.056783,       -7.371093,       -5.349652,       -3.959956,       -6.508844,       -4.694966,       -12.020065,       -5.5989,       -3.089326,       -2.86323,       -5.040802,       -5.364383
-6.051452,       -6.902463,       -5.761255,       -1.001445,       -5.874623,       -8.784296,       1.168412,       -7.702046,       -7.394017,       -0.463393,       -3.951473,       -2.280634,       0.856733,       -5.040802,       3.50503,       -4.456545
-9.158454,       -7.832609,       -11.151924,       -2.754718,       -7.986556,       -5.636253,       -4.244953,       -5.480616,       -12.233368,       -4.551268,       -10.460937,       -4.525869,       -3.814381,       -5.364383,       -4.456545,       0.093646
                    };
            return _data;
        }
    };
//    H: 3.9740
//    E: -2.8671


// ----------------------------------------------------------------------------
// Ribosum65_85 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.259604    0.211934    0.283694    0.244767
	struct Ribosum65_85 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum65_85>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.362983,       -3.411115,       -3.117483,       -3.048327
-3.411115,       1.638401,       -3.78496,       -1.967815
-3.117483,       -3.78496,       1.356035,       -3.342601
-3.048327,       -1.967815,       -3.342601,       1.849028
                    };
            return _data;
        }
    };
//    H: 1.4608
//    E: -0.7200

// ----------------------------------------------------------------------------
// Ribosum65_85N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum65_85N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum65_85N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.362983,       -3.411115,       -3.117483,       -3.048327,       -3.78496
-3.411115,       1.638401,       -3.78496,       -1.967815,       -3.78496
-3.117483,       -3.78496,       1.356035,       -3.342601,       -3.78496
-3.048327,       -1.967815,       -3.342601,       1.849028,       -3.78496
-3.78496,       -3.78496,       -3.78496,       -3.78496,       -3.78496
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum65_85d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum65_85d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum65_85d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-0.570305,       -8.489737,       -7.398375,       -5.383325,       -10.042229,       -14.521646,       -6.647742,       -12.514114,       -5.953233,       -5.137791,       -9.539088,       -7.398473,       -5.676343,       -13.004088,       -7.652533,       -9.365199
-8.489737,       -0.096256,       -9.237542,       -3.706655,       -10.843356,       -8.062216,       -6.479673,       -11.298156,       -11.544698,       -3.642823,       -11.653335,       -6.452954,       -7.729789,       -9.083835,       -9.263173,       -9.121751
-7.398375,       -9.237542,       -0.512638,       -6.596812,       -11.263007,       -13.180372,       -5.699557,       -12.28188,       -7.742789,       -7.723479,       -6.216204,       -6.875488,       -7.716627,       -12.039447,       -6.329543,       -10.476687
-5.383325,       -3.706655,       -6.596812,       5.073387,       -8.126088,       -8.657013,       -0.68016,       -5.778953,       -8.81523,       1.112599,       -7.309529,       -0.525076,       -1.08009,       -6.745828,       -3.191678,       -3.451187
-10.042229,       -10.843356,       -11.263007,       -8.126088,       -2.696346,       -10.969602,       -3.9207,       -9.312809,       -9.50969,       -6.809683,       -8.587496,       -8.592533,       -2.847091,       -11.633516,       -6.367803,       -9.536359
-14.521646,       -8.062216,       -13.180372,       -8.657013,       -10.969602,       -0.837621,       -5.041646,       -6.189981,       -14.01126,       -4.098527,       -12.092514,       -8.440059,       -7.026528,       -9.398321,       -8.963478,       -5.244713
-6.647742,       -6.479673,       -5.699557,       -0.68016,       -3.9207,       -5.041646,       5.90817,       -4.824979,       -7.935357,       0.044609,       -4.994569,       -1.862404,       1.055321,       -6.471956,       0.677524,       -4.79346
-12.514114,       -11.298156,       -12.28188,       -5.778953,       -9.312809,       -6.189981,       -4.824979,       -0.843283,       -12.971136,       -6.69263,       -11.879531,       -6.269594,       -6.755009,       -6.156319,       -8.069633,       -6.221099
-5.953233,       -11.544698,       -7.742789,       -8.81523,       -9.50969,       -14.01126,       -7.935357,       -12.971136,       -0.640968,       -5.892459,       -8.964339,       -5.859372,       -7.067588,       -13.616709,       -9.010544,       -13.532261
-5.137791,       -3.642823,       -7.723479,       1.112599,       -6.809683,       -4.098527,       0.044609,       -6.69263,       -5.892459,       6.004846,       -4.678943,       0.522345,       -1.118085,       -4.281113,       -2.2109,       -5.364008
-9.539088,       -11.653335,       -6.216204,       -7.309529,       -8.587496,       -12.092514,       -4.994569,       -11.879531,       -8.964339,       -4.678943,       -1.961751,       -5.670965,       -7.294054,       -11.522193,       -4.884623,       -12.380821
-7.398473,       -6.452954,       -6.875488,       -0.525076,       -8.592533,       -8.440059,       -1.862404,       -6.269594,       -5.859372,       0.522345,       -5.670965,       3.799729,       -3.274285,       -4.754189,       -3.226582,       -5.370079
-5.676343,       -7.729789,       -7.716627,       -1.08009,       -2.847091,       -7.026528,       1.055321,       -6.755009,       -7.067588,       -1.118085,       -7.294054,       -3.274285,       5.230139,       -5.099317,       -0.503062,       -4.557936
-13.004088,       -9.083835,       -12.039447,       -6.745828,       -11.633516,       -9.398321,       -6.471956,       -6.156319,       -13.616709,       -4.281113,       -11.522193,       -4.754189,       -5.099317,       -1.777907,       -6.308924,       -4.969815
-7.652533,       -9.263173,       -6.329543,       -3.191678,       -6.367803,       -8.963478,       0.677524,       -8.069633,       -9.010544,       -2.2109,       -4.884623,       -3.226582,       -0.503062,       -6.308924,       3.749841,       -5.757518
-9.365199,       -9.121751,       -10.476687,       -3.451187,       -9.536359,       -5.244713,       -4.79346,       -6.221099,       -13.532261,       -5.364008,       -12.380821,       -5.370079,       -4.557936,       -4.969815,       -5.757518,       0.346947
                    };
            return _data;
        }
    };
//    H: 4.6029
//    E: -3.1747


// ----------------------------------------------------------------------------
// Ribosum55 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.275527    0.199694    0.272961    0.251818
	struct Ribosum55 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum55>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.306299,       -2.182654,       -1.783213,       -1.73946
-2.182654,       1.258806,       -2.787371,       -1.189146
-1.783213,       -2.787371,       1.109234,       -2.049914
-1.73946,       -1.189146,       -2.049914,       1.731915
                    };
            return _data;
        }
    };
//    H: 0.2987
//    E: -0.0065

// ----------------------------------------------------------------------------
// Ribosum55N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum55N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum55N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.306299,       -2.182654,       -1.783213,       -1.73946,       -2.787371
-2.182654,       1.258806,       -2.787371,       -1.189146,       -2.787371
-1.783213,       -2.787371,       1.109234,       -2.049914,       -2.787371
-1.73946,       -1.189146,       -2.049914,       1.731915,       -2.787371
-2.787371,       -2.787371,       -2.787371,       -2.787371,       -2.787371
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum55d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum55d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum55d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.716286,       -8.18337,       -8.046583,       -4.744339,       -10.02998,       -14.292835,       -5.248533,       -12.105428,       -5.989457,       -4.74303,       -9.964914,       -6.3793,       -4.744667,       -12.105428,       -6.343005,       -8.499292
-8.18337,       -1.737955,       -9.214465,       -2.110093,       -10.012065,       -9.203797,       -5.926801,       -11.184271,       -10.247566,       -3.817115,       -12.653521,       -5.979846,       -6.070643,       -8.842156,       -7.723891,       -7.988232
-8.046583,       -9.214465,       -0.602559,       -6.000059,       -10.699963,       -14.981914,       -4.934192,       -8.756054,       -9.29796,       -6.445758,       -5.499411,       -6.944338,       -6.697113,       -8.159134,       -5.729746,       -10.528517
-4.744339,       -2.110093,       -6.000059,       4.66543,       -6.252917,       -7.156733,       1.387091,       -5.856694,       -6.361574,       2.499526,       -6.342443,       0.407737,       1.322441,       -5.592882,       -0.78655,       -3.10729
-10.02998,       -10.012065,       -10.699963,       -6.252917,       -5.459227,       -11.508734,       -3.926192,       -7.472553,       -8.683868,       -6.25216,       -11.667572,       -8.551162,       -2.635376,       -7.347321,       -6.286563,       -8.238357
-14.292835,       -9.203797,       -14.981914,       -7.156733,       -11.508734,       -2.604688,       -5.399454,       -6.201106,       -13.842362,       -4.136286,       -12.316743,       -8.28989,       -7.466615,       -8.489849,       -9.008131,       -6.325728
-5.248533,       -5.926801,       -4.934192,       1.387091,       -3.926192,       -5.399454,       5.473254,       -4.917118,       -6.676371,       1.6941,       -4.510742,       -0.671757,       2.492321,       -4.640139,       1.124276,       -4.059091
-12.105428,       -11.184271,       -8.756054,       -5.856694,       -7.472553,       -6.201106,       -4.917118,       -1.692696,       -6.445094,       -6.317162,       -13.440377,       -6.551443,       -4.317785,       -3.989298,       -8.005491,       -4.66191
-5.989457,       -10.247566,       -9.29796,       -6.361574,       -8.683868,       -13.842362,       -6.676371,       -6.445094,       -0.917126,       -5.514565,       -9.742445,       -6.726455,       -6.102308,       -6.248763,       -7.669674,       -11.776947
-4.74303,       -3.817115,       -6.445758,       2.499526,       -6.25216,       -4.136286,       1.6941,       -6.317162,       -5.514565,       5.674184,       -4.922677,       0.985422,       1.197472,       -4.964019,       -0.273948,       -4.483022
-9.964914,       -12.653521,       -5.499411,       -6.342443,       -11.667572,       -12.316743,       -4.510742,       -13.440377,       -9.742445,       -4.922677,       -2.09758,       -5.860736,       -6.353524,       -11.85324,       -4.118979,       -11.768253
-6.3793,       -5.979846,       -6.944338,       0.407737,       -8.551162,       -8.28989,       -0.671757,       -6.551443,       -6.726455,       0.985422,       -5.860736,       3.590686,       -0.947785,       -5.510076,       -2.161966,       -5.101334
-4.744667,       -6.070643,       -6.697113,       1.322441,       -2.635376,       -7.466615,       2.492321,       -4.317785,       -6.102308,       1.197472,       -6.353524,       -0.947785,       5.086264,       -2.986799,       0.941744,       -3.790309
-12.105428,       -8.842156,       -8.159134,       -5.592882,       -7.347321,       -8.489849,       -4.640139,       -3.989298,       -6.248763,       -4.964019,       -11.85324,       -5.510076,       -2.986799,       -3.303927,       -5.099263,       -5.088932
-6.343005,       -7.723891,       -5.729746,       -0.78655,       -6.286563,       -9.008131,       1.124276,       -8.005491,       -7.669674,       -0.273948,       -4.118979,       -2.161966,       0.941744,       -5.099263,       3.472205,       -4.586861
-8.499292,       -7.988232,       -10.528517,       -3.10729,       -8.238357,       -6.325728,       -4.059091,       -4.66191,       -11.776947,       -4.483022,       -11.768253,       -5.101334,       -3.790309,       -5.088932,       -4.586861,       0.154598
                    };
            return _data;
        }
    };
//    H: 3.3972
//    E: -2.5953


// ----------------------------------------------------------------------------
// Ribosum75_90 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.273044    0.201389    0.271234    0.254333
	struct Ribosum75_90 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum75_90>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.285719,       -4.370818,       -4.030708,       -3.799779
-4.370818,       1.878373,       -4.686969,       -2.931349
-4.030708,       -4.686969,       1.508226,       -4.269883
-3.799779,       -2.931349,       -4.269883,       1.82331
                    };
            return _data;
        }
    };
//    H: 1.6566
//    E: -1.0280

// ----------------------------------------------------------------------------
// Ribosum75_90N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum75_90N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum75_90N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.285719,       -4.370818,       -4.030708,       -3.799779,       -4.686969
-4.370818,       1.878373,       -4.686969,       -2.931349,       -4.686969
-4.030708,       -4.686969,       1.508226,       -4.269883,       -4.686969
-3.799779,       -2.931349,       -4.269883,       1.82331,       -4.686969
-4.686969,       -4.686969,       -4.686969,       -4.686969,       -4.686969
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum75_90d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum75_90d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum75_90d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-0.755056,       -8.216934,       -7.529755,       -5.879827,       -11.283124,       -999.0,       -8.227164,       -13.917718,       -7.485494,       -6.790974,       -9.585574,       -8.993007,       -6.696774,       -14.84143,       -8.850244,       -11.71873
-8.216934,       0.06541,       -9.76461,       -4.576383,       -11.850726,       -8.444074,       -8.478143,       -12.638025,       -15.93425,       -3.631969,       -12.87259,       -7.139962,       -8.700747,       -9.310705,       -10.256717,       -11.188126
-7.529755,       -9.76461,       -0.447727,       -6.774968,       -11.797928,       -14.910139,       -5.697394,       -13.509906,       -10.509411,       -7.470034,       -7.113697,       -9.786333,       -7.443383,       -12.583906,       -6.706667,       -11.566039
-5.879827,       -4.576383,       -6.774968,       5.057391,       -9.427296,       -9.331218,       -2.128673,       -6.374167,       -10.150459,       -0.067467,       -7.724973,       -1.33668,       -2.387634,       -8.393465,       -4.539018,       -5.004449
-11.283124,       -11.850726,       -11.797928,       -9.427296,       -1.245682,       -9.979758,       -4.44091,       -9.719092,       -10.953272,       -8.123328,       -7.545065,       -9.70939,       -4.2827,       -11.5443,       -7.750056,       -11.375284
-999.0,       -8.444074,       -14.910139,       -9.331218,       -9.979758,       -0.455914,       -5.509423,       -6.48369,       -12.234574,       -4.142112,       -12.879548,       -9.467544,       -9.095888,       -9.476336,       -10.039545,       -8.250017
-8.227164,       -8.478143,       -5.697394,       -2.128673,       -4.44091,       -5.509423,       6.132626,       -5.615878,       -9.019269,       -1.138468,       -5.325618,       -3.34565,       -0.209183,       -7.849959,       -0.206133,       -6.516906
-13.917718,       -12.638025,       -13.509906,       -6.374167,       -9.719092,       -6.48369,       -5.615878,       -0.839839,       -13.427481,       -7.276453,       -12.57431,       -6.776066,       -7.350598,       -7.341511,       -8.731508,       -8.080269
-7.485494,       -15.93425,       -10.509411,       -10.150459,       -10.953272,       -12.234574,       -9.019269,       -13.427481,       -0.377201,       -5.830873,       -8.793913,       -6.768748,       -7.066453,       -16.831834,       -11.487946,       -14.846637
-6.790974,       -3.631969,       -7.470034,       -0.067467,       -8.123328,       -4.142112,       -1.138468,       -7.276453,       -5.830873,       6.265514,       -4.712449,       -0.183884,       -2.554329,       -5.159059,       -3.33894,       -6.589714
-9.585574,       -12.87259,       -7.113697,       -7.724973,       -7.545065,       -12.879548,       -5.325618,       -12.57431,       -8.793913,       -4.712449,       -1.19034,       -5.932988,       -9.237251,       -11.9353,       -5.964678,       -12.475334
-8.993007,       -7.139962,       -9.786333,       -1.33668,       -9.70939,       -9.467544,       -3.34565,       -6.776066,       -6.768748,       -0.183884,       -5.932988,       3.918567,       -4.697376,       -7.057762,       -4.728866,       -6.06002
-6.696774,       -8.700747,       -7.443383,       -2.387634,       -4.2827,       -9.095888,       -0.209183,       -7.350598,       -7.066453,       -2.554329,       -9.237251,       -4.697376,       5.212893,       -5.488737,       -1.452204,       -5.45278
-14.84143,       -9.310705,       -12.583906,       -8.393465,       -11.5443,       -9.476336,       -7.849959,       -7.341511,       -16.831834,       -5.159059,       -11.9353,       -7.057762,       -5.488737,       -0.859026,       -6.568057,       -5.895084
-8.850244,       -10.256717,       -6.706667,       -4.539018,       -7.750056,       -10.039545,       -0.206133,       -8.731508,       -11.487946,       -3.33894,       -5.964678,       -4.728866,       -1.452204,       -6.568057,       3.892028,       -6.280147
-11.71873,       -11.188126,       -11.566039,       -5.004449,       -11.375284,       -8.250017,       -6.516906,       -8.080269,       -14.846637,       -6.589714,       -12.475334,       -6.06002,       -5.45278,       -5.895084,       -6.280147,       0.422823
                    };
            return _data;
        }
    };
//    H: 4.9357
//    E: -6.5940


// ----------------------------------------------------------------------------
// Ribosum70_35 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.279506    0.202359    0.272780    0.245355
	struct Ribosum70_35 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum70_35>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.499354,       -0.833774,       -0.587476,       -0.530595
-0.833774,       0.865693,       -1.34196,       -0.316326
-0.587476,       -1.34196,       0.773378,       -0.78948
-0.530595,       -0.316326,       -0.78948,       0.954855
                    };
            return _data;
        }
    };
//    H: 0.2978
//    E: -0.0033

// ----------------------------------------------------------------------------
// Ribosum70_35N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum70_35N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum70_35N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.499354,       -0.833774,       -0.587476,       -0.530595,       -1.34196
-0.833774,       0.865693,       -1.34196,       -0.316326,       -1.34196
-0.587476,       -1.34196,       0.773378,       -0.78948,       -1.34196
-0.530595,       -0.316326,       -0.78948,       0.954855,       -1.34196
-1.34196,       -1.34196,       -1.34196,       -1.34196,       -1.34196
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum70_35d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum70_35d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum70_35d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-3.661004,       -5.669315,       -10.764249,       -4.096321,       -11.73734,       -12.454505,       -3.759445,       -12.014094,       -9.333156,       -5.059784,       -12.161514,       -5.480064,       -3.515853,       -12.457168,       -3.566303,       -10.773432
-5.669315,       -1.8882,       -8.834379,       -1.780936,       -10.495993,       -6.226174,       -4.033116,       -9.365721,       -7.927171,       -2.476858,       -9.723144,       -3.831464,       -3.29379,       -9.656734,       -5.540636,       -8.613273
-10.764249,       -8.834379,       -2.774601,       -4.476979,       -11.167299,       -12.639302,       -1.888707,       -10.819604,       -7.167478,       -4.223269,       -5.078006,       -6.955166,       -2.54567,       -9.882955,       -5.742787,       -7.839967
-4.096321,       -1.780936,       -4.476979,       3.797389,       -5.395688,       -2.415545,       2.391259,       -3.241657,       -3.484452,       3.28421,       -4.94368,       0.957485,       2.03362,       -4.369899,       -0.080977,       -2.951248
-11.73734,       -10.495993,       -11.167299,       -5.395688,       -5.891868,       -9.498778,       -2.236998,       -8.407108,       -9.181607,       -4.336556,       -11.071131,       -6.351383,       -3.123235,       -8.852079,       -6.07627,       -8.955075
-12.454505,       -6.226174,       -12.639302,       -2.415545,       -9.498778,       -3.837068,       -3.461682,       -4.802103,       -9.204861,       -2.60328,       -10.707729,       -5.430021,       -4.237094,       -7.250606,       -6.020864,       -5.520582
-3.759445,       -4.033116,       -1.888707,       2.391259,       -2.236998,       -3.461682,       5.28154,       -4.145917,       -4.449461,       3.179834,       -3.918742,       0.632148,       3.346295,       -3.82192,       1.605068,       -2.158199
-12.014094,       -9.365721,       -10.819604,       -3.241657,       -8.407108,       -4.802103,       -4.145917,       -3.415892,       -8.604958,       -2.540934,       -6.813116,       -4.284986,       -3.275908,       -5.065727,       -5.088867,       -6.167759
-9.333156,       -7.927171,       -7.167478,       -3.484452,       -9.181607,       -9.204861,       -4.449461,       -8.604958,       -2.317177,       -2.004327,       -10.278217,       -4.76224,       -3.608805,       -8.464376,       -7.749532,       -8.402464
-5.059784,       -2.476858,       -4.223269,       3.28421,       -4.336556,       -2.60328,       3.179834,       -2.540934,       -2.004327,       5.635123,       -3.755156,       1.908474,       2.567784,       -3.463965,       0.840299,       -2.414799
-12.161514,       -9.723144,       -5.078006,       -4.94368,       -11.071131,       -10.707729,       -3.918742,       -6.813116,       -10.278217,       -3.755156,       -2.593348,       -4.817141,       -5.051337,       -9.677794,       -4.308597,       -7.797747
-5.480064,       -3.831464,       -6.955166,       0.957485,       -6.351383,       -5.430021,       0.632148,       -4.284986,       -4.76224,       1.908474,       -4.817141,       2.984455,       0.305863,       -4.684977,       -1.018892,       -3.256992
-3.515853,       -3.29379,       -2.54567,       2.03362,       -3.123235,       -4.237094,       3.346295,       -3.275908,       -3.608805,       2.567784,       -5.051337,       0.305863,       4.136135,       -2.987832,       1.139967,       -1.782949
-12.457168,       -9.656734,       -9.882955,       -4.369899,       -8.852079,       -7.250606,       -3.82192,       -5.065727,       -8.464376,       -3.463965,       -9.677794,       -4.684977,       -2.987832,       -4.945202,       -3.322835,       -7.188688
-3.566303,       -5.540636,       -5.742787,       -0.080977,       -6.07627,       -6.020864,       1.605068,       -5.088867,       -7.749532,       0.840299,       -4.308597,       -1.018892,       1.139967,       -3.322835,       2.782064,       -2.688931
-10.773432,       -8.613273,       -7.839967,       -2.951248,       -8.955075,       -5.520582,       -2.158199,       -6.167759,       -8.402464,       -2.414799,       -7.797747,       -3.256992,       -1.782949,       -7.188688,       -2.688931,       -1.564989
                    };
            return _data;
        }
    };
//    H: 3.2183
//    E: -2.4567


// ----------------------------------------------------------------------------
// Ribosum95_45 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.259171    0.219313    0.297394    0.224123
	struct Ribosum95_45 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum95_45>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.967181,       -1.340585,       -0.922442,       -0.984587
-1.340585,       0.997132,       -1.695424,       -0.624451
-0.922442,       -1.695424,       0.854351,       -1.110491
-0.984587,       -0.624451,       -1.110491,       1.380129
                    };
            return _data;
        }
    };
//    H: 0.5598
//    E: -0.0948

// ----------------------------------------------------------------------------
// Ribosum95_45N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum95_45N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum95_45N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.967181,       -1.340585,       -0.922442,       -0.984587,       -1.695424
-1.340585,       0.997132,       -1.695424,       -0.624451,       -1.695424
-0.922442,       -1.695424,       0.854351,       -1.110491,       -1.695424
-0.984587,       -0.624451,       -1.110491,       1.380129,       -1.695424
-1.695424,       -1.695424,       -1.695424,       -1.695424,       -1.695424
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum95_45d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum95_45d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum95_45d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.816417,       -8.527947,       -9.158909,       -4.971985,       -9.958796,       -13.47557,       -3.827892,       -11.928879,       -6.931116,       -5.188805,       -9.653482,       -6.456728,       -2.48737,       -11.822683,       -3.650281,       -8.874524
-8.527947,       -2.055433,       -9.329876,       -1.621266,       -10.350967,       -8.804805,       -5.374923,       -10.606823,       -7.662663,       -2.717294,       -10.136141,       -4.683261,       -5.419415,       -8.898307,       -7.1221,       -8.296808
-9.158909,       -9.329876,       -1.323259,       -5.880519,       -10.340947,       -14.743205,       -2.566467,       -9.49507,       -9.627738,       -6.116045,       -4.360193,       -7.073855,       -2.844962,       -7.958584,       -5.775055,       -9.556415
-4.971985,       -1.621266,       -5.880519,       4.231861,       -5.621895,       -2.488695,       2.047525,       -4.125226,       -3.850375,       2.883654,       -4.808427,       0.740331,       1.898467,       -4.309864,       -0.381716,       -2.398981
-9.958796,       -10.350967,       -10.340947,       -5.621895,       -6.175452,       -11.357674,       -3.140103,       -8.327885,       -8.003544,       -5.350287,       -11.457192,       -6.098413,       -2.898025,       -7.81897,       -6.116606,       -8.858814
-13.47557,       -8.804805,       -14.743205,       -2.488695,       -11.357674,       -3.690455,       -5.034558,       -6.948301,       -12.709478,       -3.707473,       -11.726497,       -6.997739,       -6.321579,       -8.557191,       -8.239784,       -6.500483
-3.827892,       -5.374923,       -2.566467,       2.047525,       -3.140103,       -5.034558,       5.212126,       -4.332743,       -5.852406,       2.80737,       -4.6748,       0.246483,       2.949298,       -4.281054,       1.218574,       -3.038145
-11.928879,       -10.606823,       -9.49507,       -4.125226,       -8.327885,       -6.948301,       -4.332743,       -2.667252,       -7.592346,       -2.203136,       -9.339054,       -4.455002,       -4.3602,       -4.568429,       -6.456004,       -5.38465
-6.931116,       -7.662663,       -9.627738,       -3.850375,       -8.003544,       -12.709478,       -5.852406,       -7.592346,       -1.642462,       -2.613817,       -9.626068,       -6.232607,       -4.74139,       -7.130648,       -7.6242,       -9.794316
-5.188805,       -2.717294,       -6.116045,       2.883654,       -5.350287,       -3.707473,       2.80737,       -2.203136,       -2.613817,       5.495849,       -4.656119,       1.420812,       1.923603,       -4.089485,       0.309179,       -2.962239
-9.653482,       -10.136141,       -4.360193,       -4.808427,       -11.457192,       -11.726497,       -4.6748,       -9.339054,       -9.626068,       -4.656119,       -2.189977,       -5.521249,       -6.237722,       -10.71927,       -4.285239,       -5.028022
-6.456728,       -4.683261,       -7.073855,       0.740331,       -6.098413,       -6.997739,       0.246483,       -4.455002,       -6.232607,       1.420812,       -5.521249,       3.310737,       0.083018,       -4.570283,       -1.338188,       -2.617068
-2.48737,       -5.419415,       -2.844962,       1.898467,       -2.898025,       -6.321579,       2.949298,       -4.3602,       -4.74139,       1.923603,       -6.237722,       0.083018,       4.723309,       -3.542802,       1.04701,       -1.583662
-11.822683,       -8.898307,       -7.958584,       -4.309864,       -7.81897,       -8.557191,       -4.281054,       -4.568429,       -7.130648,       -4.089485,       -10.71927,       -4.570283,       -3.542802,       -3.979611,       -4.259241,       -6.010625
-3.650281,       -7.1221,       -5.775055,       -0.381716,       -6.116606,       -8.239784,       1.218574,       -6.456004,       -7.6242,       0.309179,       -4.285239,       -1.338188,       1.04701,       -4.259241,       3.186335,       -3.70067
-8.874524,       -8.296808,       -9.556415,       -2.398981,       -8.858814,       -6.500483,       -3.038145,       -5.38465,       -9.794316,       -2.962239,       -5.028022,       -2.617068,       -1.583662,       -6.010625,       -3.70067,       -0.721747
                    };
            return _data;
        }
    };
//    H: 3.4620
//    E: -2.5918


// ----------------------------------------------------------------------------
// Ribosum100_75 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.254549    0.220661    0.298271    0.226518
	struct Ribosum100_75 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum100_75>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.341569,       -2.353651,       -2.028491,       -1.979119
-2.353651,       1.322854,       -2.8799,       -1.267596
-2.028491,       -2.8799,       1.153594,       -2.273643
-1.979119,       -1.267596,       -2.273643,       1.778719
                    };
            return _data;
        }
    };
//    H: 1.1188
//    E: -0.3968

// ----------------------------------------------------------------------------
// Ribosum100_75N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum100_75N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum100_75N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.341569,       -2.353651,       -2.028491,       -1.979119,       -2.8799
-2.353651,       1.322854,       -2.8799,       -1.267596,       -2.8799
-2.028491,       -2.8799,       1.153594,       -2.273643,       -2.8799
-1.979119,       -1.267596,       -2.273643,       1.778719,       -2.8799
-2.8799,       -2.8799,       -2.8799,       -2.8799,       -2.8799
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum100_75d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum100_75d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum100_75d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.244797,       -8.379074,       -8.167968,       -5.074021,       -10.322087,       -13.732383,       -5.561516,       -11.859706,       -5.755497,       -4.734509,       -10.32499,       -6.463548,       -4.764667,       -13.095166,       -6.209763,       -8.261559
-8.379074,       -1.306702,       -9.005696,       -2.190853,       -10.121971,       -8.683208,       -5.714094,       -11.175248,       -10.544006,       -3.79172,       -12.680074,       -6.020963,       -6.265288,       -8.805924,       -7.563468,       -7.83516
-8.167968,       -9.005696,       -0.57625,       -6.052019,       -11.066254,       -14.706203,       -4.787599,       -8.830837,       -9.365927,       -6.515494,       -5.213717,       -7.010717,       -6.720464,       -8.113401,       -5.499893,       -10.655012
-5.074021,       -2.190853,       -6.052019,       4.796915,       -6.527505,       -7.386522,       1.124394,       -5.891903,       -7.09412,       2.278823,       -6.77613,       0.349802,       1.004282,       -5.854194,       -1.137752,       -2.948417
-10.322087,       -10.121971,       -11.066254,       -6.527505,       -4.996881,       -11.250053,       -3.749247,       -7.699903,       -8.661854,       -6.170089,       -11.53232,       -8.519339,       -2.583502,       -7.68516,       -6.320071,       -7.910291
-13.732383,       -8.683208,       -14.706203,       -7.386522,       -11.250053,       -2.059856,       -5.168241,       -6.53194,       -13.454829,       -4.01963,       -12.44741,       -8.194804,       -7.494042,       -8.519501,       -8.93342,       -6.372821
-5.561516,       -5.714094,       -4.787599,       1.124394,       -3.749247,       -5.168241,       5.53844,       -4.94248,       -6.904818,       1.520516,       -4.440375,       -0.951658,       2.273173,       -4.72352,       1.052028,       -3.959629
-11.859706,       -11.175248,       -8.830837,       -5.891903,       -7.699903,       -6.53194,       -4.94248,       -1.389168,       -6.413757,       -6.642158,       -12.99957,       -6.779128,       -4.634786,       -4.358848,       -7.916337,       -4.641883
-5.755497,       -10.544006,       -9.365927,       -7.09412,       -8.661854,       -13.454829,       -6.904818,       -6.413757,       -0.829575,       -5.597139,       -9.836313,       -6.637375,       -5.822357,       -6.25813,       -7.63319,       -11.600981
-4.734509,       -3.79172,       -6.515494,       2.278823,       -6.170089,       -4.01963,       1.520516,       -6.642158,       -5.597139,       5.712248,       -5.203433,       0.917578,       0.885641,       -4.81974,       -0.517011,       -4.483046
-10.32499,       -12.680074,       -5.213717,       -6.77613,       -11.53232,       -12.44741,       -4.440375,       -12.99957,       -9.836313,       -5.203433,       -2.160478,       -6.077771,       -6.631491,       -11.825706,       -4.183203,       -11.709187
-6.463548,       -6.020963,       -7.010717,       0.349802,       -8.519339,       -8.194804,       -0.951658,       -6.779128,       -6.637375,       0.917578,       -6.077771,       3.627834,       -1.321071,       -5.231394,       -2.327804,       -5.049924
-4.764667,       -6.265288,       -6.720464,       1.004282,       -2.583502,       -7.494042,       2.273173,       -4.634786,       -5.822357,       0.885641,       -6.631491,       -1.321071,       5.134113,       -3.106317,       0.719052,       -3.895064
-13.095166,       -8.805924,       -8.113401,       -5.854194,       -7.68516,       -8.519501,       -4.72352,       -4.358848,       -6.25813,       -4.81974,       -11.825706,       -5.231394,       -3.106317,       -3.182982,       -5.444693,       -4.771774
-6.209763,       -7.563468,       -5.499893,       -1.137752,       -6.320071,       -8.93342,       1.052028,       -7.916337,       -7.63319,       -0.517011,       -4.183203,       -2.327804,       0.719052,       -5.444693,       3.545746,       -4.476252
-8.261559,       -7.83516,       -10.655012,       -2.948417,       -7.910291,       -6.372821,       -3.959629,       -4.641883,       -11.600981,       -4.483046,       -11.709187,       -5.049924,       -3.895064,       -4.771774,       -4.476252,       0.175916
                    };
            return _data;
        }
    };
//    H: 4.0361
//    E: -2.9113


// ----------------------------------------------------------------------------
// Ribosum85_50 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.259910    0.219850    0.299765    0.220474
	struct Ribosum85_50 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum85_50>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.07191,       -1.509805,       -1.119958,       -1.085369
-1.509805,       1.054569,       -1.995535,       -0.795493
-1.119958,       -1.995535,       0.928387,       -1.327085
-1.085369,       -0.795493,       -1.327085,       1.496334
                    };
            return _data;
        }
    };
//    H: 0.6785
//    E: -0.1464

// ----------------------------------------------------------------------------
// Ribosum85_50N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum85_50N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum85_50N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.07191,       -1.509805,       -1.119958,       -1.085369,       -1.995535
-1.509805,       1.054569,       -1.995535,       -0.795493,       -1.995535
-1.119958,       -1.995535,       0.928387,       -1.327085,       -1.995535
-1.085369,       -0.795493,       -1.327085,       1.496334,       -1.995535
-1.995535,       -1.995535,       -1.995535,       -1.995535,       -1.995535
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum85_50d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum85_50d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum85_50d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.841039,       -7.034155,       -8.53386,       -4.415351,       -9.115332,       -13.594737,       -3.813353,       -12.540535,       -7.16861,       -5.12486,       -8.52747,       -5.858548,       -3.305885,       -11.437013,       -4.759325,       -9.202293
-7.034155,       -2.026736,       -9.150566,       -1.863871,       -9.671772,       -8.961765,       -5.440899,       -10.193126,       -8.529688,       -3.429433,       -10.654394,       -4.224399,       -5.005626,       -8.704441,       -6.775259,       -8.06444
-8.53386,       -9.150566,       -1.072516,       -5.119707,       -10.392874,       -14.297897,       -3.322073,       -10.062745,       -8.502541,       -5.69242,       -4.968861,       -6.647431,       -3.500977,       -8.668814,       -5.822088,       -10.706247
-4.415351,       -1.863871,       -5.119707,       4.329456,       -5.42546,       -3.991208,       1.91287,       -4.366378,       -4.286741,       2.853462,       -5.168353,       0.710387,       1.797622,       -4.458597,       -0.377064,       -2.760961
-9.115332,       -9.671772,       -10.392874,       -5.42546,       -5.44343,       -10.395473,       -3.062908,       -8.397865,       -7.834888,       -5.278996,       -10.977447,       -6.667972,       -2.566352,       -7.254279,       -5.715766,       -8.630261
-13.594737,       -8.961765,       -14.297897,       -3.991208,       -10.395473,       -3.923322,       -4.829343,       -5.949895,       -11.886155,       -3.499739,       -11.985109,       -6.882645,       -5.89025,       -7.654451,       -7.765359,       -5.599284
-3.813353,       -5.440899,       -3.322073,       1.91287,       -3.062908,       -4.829343,       5.271535,       -4.782045,       -5.450275,       2.510532,       -4.667025,       0.034248,       2.893572,       -4.647432,       1.328672,       -3.303629
-12.540535,       -10.193126,       -10.062745,       -4.366378,       -8.397865,       -5.949895,       -4.782045,       -2.653161,       -7.983822,       -3.379691,       -11.381001,       -5.057351,       -4.639924,       -4.210732,       -6.887252,       -5.538492
-7.16861,       -8.529688,       -8.502541,       -4.286741,       -7.834888,       -11.886155,       -5.450275,       -7.983822,       -1.339515,       -3.363668,       -8.897897,       -6.019936,       -5.060762,       -6.9553,       -7.442425,       -11.2738
-5.12486,       -3.429433,       -5.69242,       2.853462,       -5.278996,       -3.499739,       2.510532,       -3.379691,       -3.363668,       5.549197,       -4.098143,       1.368649,       1.862712,       -4.276364,       0.169033,       -3.179849
-8.52747,       -10.654394,       -4.968861,       -5.168353,       -10.977447,       -11.985109,       -4.667025,       -11.381001,       -8.897897,       -4.098143,       -2.016109,       -5.464756,       -5.655939,       -11.103026,       -4.366369,       -7.145249
-5.858548,       -4.224399,       -6.647431,       0.710387,       -6.667972,       -6.882645,       0.034248,       -5.057351,       -6.019936,       1.368649,       -5.464756,       3.353077,       -0.223125,       -4.922163,       -1.712667,       -3.422584
-3.305885,       -5.005626,       -3.500977,       1.797622,       -2.566352,       -5.89025,       2.893572,       -4.639924,       -5.060762,       1.862712,       -5.655939,       -0.223125,       4.815209,       -3.207534,       1.139536,       -2.410429
-11.437013,       -8.704441,       -8.668814,       -4.458597,       -7.254279,       -7.654451,       -4.647432,       -4.210732,       -6.9553,       -4.276364,       -11.103026,       -4.922163,       -3.207534,       -3.596229,       -4.392281,       -6.338567
-4.759325,       -6.775259,       -5.822088,       -0.377064,       -5.715766,       -7.765359,       1.328672,       -6.887252,       -7.442425,       0.169033,       -4.366369,       -1.712667,       1.139536,       -4.392281,       3.258286,       -3.821261
-9.202293,       -8.06444,       -10.706247,       -2.760961,       -8.630261,       -5.599284,       -3.303629,       -5.538492,       -11.2738,       -3.179849,       -7.145249,       -3.422584,       -2.410429,       -6.338567,       -3.821261,       -0.405822
                    };
            return _data;
        }
    };
//    H: 3.5782
//    E: -2.6126


// ----------------------------------------------------------------------------
// Ribosum90 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.260747    0.218638    0.296511    0.224104
	struct Ribosum90 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum90>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.257063,       -1.976785,       -1.590831,       -1.529605
-1.976785,       1.202271,       -2.582207,       -1.107143
-1.590831,       -2.582207,       1.06567,       -1.861238
-1.529605,       -1.107143,       -1.861238,       1.685611
                    };
            return _data;
        }
    };
//    H: 0.5362
//    E: -0.0857

// ----------------------------------------------------------------------------
// Ribosum90N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum90N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum90N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.257063,       -1.976785,       -1.590831,       -1.529605,       -2.582207
-1.976785,       1.202271,       -2.582207,       -1.107143,       -2.582207
-1.590831,       -2.582207,       1.06567,       -1.861238,       -2.582207
-1.529605,       -1.107143,       -1.861238,       1.685611,       -2.582207
-2.582207,       -2.582207,       -2.582207,       -2.582207,       -2.582207
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum90d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum90d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum90d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.972177,       -8.148276,       -8.791773,       -4.702553,       -9.718125,       -13.069951,       -3.776277,       -12.182084,       -7.196477,       -5.1267,       -9.25665,       -6.150642,       -2.50804,       -11.293492,       -3.6474,       -8.928745
-8.148276,       -2.146518,       -9.266277,       -1.614982,       -10.224148,       -8.719885,       -5.273223,       -10.341839,       -7.788389,       -2.744093,       -10.032955,       -4.579648,       -5.240062,       -8.802055,       -6.966146,       -8.156342
-8.791773,       -9.266277,       -1.377843,       -5.63824,       -9.725863,       -14.715259,       -2.525007,       -9.400564,       -9.309859,       -5.892476,       -4.546348,       -7.065862,       -2.836635,       -8.016485,       -5.7678,       -9.991753
-4.702553,       -1.614982,       -5.63824,       4.185443,       -5.471836,       -2.554371,       2.081599,       -4.033799,       -3.914444,       2.909999,       -4.703337,       0.760609,       1.916038,       -4.201708,       -0.366015,       -2.38278
-9.718125,       -10.224148,       -9.725863,       -5.471836,       -6.053334,       -11.242347,       -2.998185,       -8.252639,       -7.808572,       -5.251188,       -11.107627,       -6.105457,       -2.815869,       -7.571364,       -6.08866,       -8.839702
-13.069951,       -8.719885,       -14.715259,       -2.554371,       -11.242347,       -3.865908,       -4.984706,       -6.829857,       -12.227284,       -3.522321,       -12.095426,       -6.709444,       -6.061146,       -8.447139,       -8.004082,       -6.389603
-3.776277,       -5.273223,       -2.525007,       2.081599,       -2.998185,       -4.984706,       5.200851,       -4.326191,       -5.749151,       2.838449,       -4.618483,       0.296649,       2.993925,       -4.319268,       1.260633,       -3.004115
-12.182084,       -10.341839,       -9.400564,       -4.033799,       -8.252639,       -6.829857,       -4.326191,       -2.780404,       -7.852477,       -2.205468,       -9.083927,       -4.449605,       -4.367149,       -4.616948,       -6.376702,       -5.365342
-7.196477,       -7.788389,       -9.309859,       -3.914444,       -7.808572,       -12.227284,       -5.749151,       -7.852477,       -1.676206,       -2.641659,       -9.103235,       -6.399163,       -4.62304,       -7.17515,       -7.765229,       -10.257248
-5.1267,       -2.744093,       -5.892476,       2.909999,       -5.251188,       -3.522321,       2.838449,       -2.205468,       -2.641659,       5.496056,       -4.538097,       1.445735,       1.990012,       -3.94039,       0.348946,       -2.840078
-9.25665,       -10.032955,       -4.546348,       -4.703337,       -11.107627,       -12.095426,       -4.618483,       -9.083927,       -9.103235,       -4.538097,       -2.121235,       -5.690294,       -6.107148,       -10.66514,       -4.265491,       -5.116918
-6.150642,       -4.579648,       -7.065862,       0.760609,       -6.105457,       -6.709444,       0.296649,       -4.449605,       -6.399163,       1.445735,       -5.690294,       3.291127,       0.089157,       -4.725416,       -1.330361,       -2.675022
-2.50804,       -5.240062,       -2.836635,       1.916038,       -2.815869,       -6.061146,       2.993925,       -4.367149,       -4.62304,       1.990012,       -6.107148,       0.089157,       4.69501,       -3.494389,       1.065249,       -1.616379
-11.293492,       -8.802055,       -8.016485,       -4.201708,       -7.571364,       -8.447139,       -4.319268,       -4.616948,       -7.17515,       -3.94039,       -10.66514,       -4.725416,       -3.494389,       -4.00793,       -4.282265,       -6.175548
-3.6474,       -6.966146,       -5.7678,       -0.366015,       -6.08866,       -8.004082,       1.260633,       -6.376702,       -7.765229,       0.348946,       -4.265491,       -1.330361,       1.065249,       -4.282265,       3.167771,       -3.659601
-8.928745,       -8.156342,       -9.991753,       -2.38278,       -8.839702,       -6.389603,       -3.004115,       -5.365342,       -10.257248,       -2.840078,       -5.116918,       -2.675022,       -1.616379,       -6.175548,       -3.659601,       -0.767236
                    };
            return _data;
        }
    };
//    H: 3.4428
//    E: -2.5635


// ----------------------------------------------------------------------------
// Ribosum95_95 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.256593    0.218634    0.293799    0.230975
	struct Ribosum95_95 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum95_95>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.512232,       -5.564475,       -5.066604,       -5.060932
-5.564475,       1.699756,       -5.911098,       -3.988181
-5.066604,       -5.911098,       1.394526,       -5.522276
-5.060932,       -3.988181,       -5.522276,       2.045924
                    };
            return _data;
        }
    };
//    H: 1.8665
//    E: -1.4737

// ----------------------------------------------------------------------------
// Ribosum95_95N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum95_95N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum95_95N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.512232,       -5.564475,       -5.066604,       -5.060932,       -5.911098
-5.564475,       1.699756,       -5.911098,       -3.988181,       -5.911098
-5.066604,       -5.911098,       1.394526,       -5.522276,       -5.911098
-5.060932,       -3.988181,       -5.522276,       2.045924,       -5.911098
-5.911098,       -5.911098,       -5.911098,       -5.911098,       -5.911098
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum95_95d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum95_95d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum95_95d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-0.88917,       -8.892653,       -8.501385,       -6.763221,       -999.0,       -999.0,       -12.653784,       -13.620582,       -8.239196,       -9.240083,       -11.237484,       -11.276444,       -7.330413,       -999.0,       -9.834767,       -999.0
-8.892653,       -0.257793,       -10.711335,       -5.046739,       -11.412078,       -8.93933,       -11.937514,       -999.0,       -999.0,       -5.206258,       -11.166786,       -9.046222,       -10.491299,       -7.791484,       -11.974629,       -12.295433
-8.501385,       -10.711335,       -0.330886,       -7.641741,       -13.540924,       -999.0,       -6.910055,       -999.0,       -9.669759,       -10.302109,       -9.294972,       -11.291932,       -9.512132,       -11.879293,       -8.801008,       -12.122563
-6.763221,       -5.046739,       -7.641741,       5.288135,       -9.144031,       -10.523369,       -3.449706,       -6.529142,       -13.620631,       -1.436769,       -9.061736,       -1.940563,       -3.305226,       -8.421178,       -5.476239,       -5.589483
-999.0,       -11.412078,       -13.540924,       -9.144031,       -1.462121,       -9.827476,       -4.892668,       -10.226387,       -10.423354,       -10.445411,       -10.053919,       -13.101686,       -4.953849,       -11.461968,       -8.66353,       -11.754593
-999.0,       -8.93933,       -999.0,       -10.523369,       -9.827476,       -1.201276,       -6.233577,       -7.6782,       -14.514318,       -5.71688,       -12.802776,       -10.269675,       -8.831197,       -9.238466,       -12.470495,       -999.0
-12.653784,       -11.937514,       -6.910055,       -3.449706,       -4.892668,       -6.233577,       5.880812,       -6.174925,       -9.455281,       -3.119711,       -6.490472,       -4.777164,       -1.402468,       -10.272698,       -1.261145,       -8.277627
-13.620582,       -999.0,       -999.0,       -6.529142,       -10.226387,       -7.6782,       -6.174925,       -0.658202,       -13.593539,       -8.283714,       -15.373851,       -7.087585,       -9.528791,       -9.282161,       -9.814605,       -7.830848
-8.239196,       -999.0,       -9.669759,       -13.620631,       -10.423354,       -14.514318,       -9.455281,       -13.593539,       -0.540741,       -6.859892,       -9.244899,       -7.428595,       -8.44645,       -999.0,       -10.612079,       -999.0
-9.240083,       -5.206258,       -10.302109,       -1.436769,       -10.445411,       -5.71688,       -3.119711,       -8.283714,       -6.859892,       6.003788,       -6.068602,       -1.548385,       -3.865559,       -6.049876,       -4.772666,       -8.089051
-11.237484,       -11.166786,       -9.294972,       -9.061736,       -10.053919,       -12.802776,       -6.490472,       -15.373851,       -9.244899,       -6.068602,       -1.494985,       -7.790152,       -16.970943,       -999.0,       -8.00271,       -16.090502
-11.276444,       -9.046222,       -11.291932,       -1.940563,       -13.101686,       -10.269675,       -4.777164,       -7.087585,       -7.428595,       -1.548385,       -7.790152,       3.967277,       -5.339284,       -10.928268,       -6.352017,       -7.084722
-7.330413,       -10.491299,       -9.512132,       -3.305226,       -4.953849,       -8.831197,       -1.402468,       -9.528791,       -8.44645,       -3.865559,       -16.970943,       -5.339284,       5.510212,       -6.589518,       -1.971203,       -5.665304
-999.0,       -7.791484,       -11.879293,       -8.421178,       -11.461968,       -9.238466,       -10.272698,       -9.282161,       -999.0,       -6.049876,       -999.0,       -10.928268,       -6.589518,       -1.06869,       -7.243733,       -6.050974
-9.834767,       -11.974629,       -8.801008,       -5.476239,       -8.66353,       -12.470495,       -1.261145,       -9.814605,       -10.612079,       -4.772666,       -8.00271,       -6.352017,       -1.971203,       -7.243733,       4.000777,       -6.955989
-999.0,       -12.295433,       -12.122563,       -5.589483,       -11.754593,       -999.0,       -8.277627,       -7.830848,       -999.0,       -8.089051,       -16.090502,       -7.084722,       -5.665304,       -6.050974,       -6.955989,       0.577555
                    };
            return _data;
        }
    };
//    H: 5.1321
//    E: -46.4133


// ----------------------------------------------------------------------------
// Ribosum85 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.263287    0.216847    0.294851    0.225014
	struct Ribosum85 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum85>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.290452,       -2.49427,       -2.182482,       -2.118713
-2.49427,       1.430028,       -2.880684,       -1.463693
-2.182482,       -2.880684,       1.223905,       -2.409368
-2.118713,       -1.463693,       -2.409368,       1.767624
                    };
            return _data;
        }
    };
//    H: 0.4985
//    E: -0.0717

// ----------------------------------------------------------------------------
// Ribosum85N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum85N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum85N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.290452,       -2.49427,       -2.182482,       -2.118713,       -2.880684
-2.49427,       1.430028,       -2.880684,       -1.463693,       -2.880684
-2.182482,       -2.880684,       1.223905,       -2.409368,       -2.880684
-2.118713,       -1.463693,       -2.409368,       1.767624,       -2.880684
-2.880684,       -2.880684,       -2.880684,       -2.880684,       -2.880684
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum85d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum85d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum85d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.488349,       -7.042094,       -8.238017,       -4.317463,       -8.842033,       -14.373559,       -4.678511,       -12.640723,       -6.858807,       -5.030739,       -8.393424,       -5.83531,       -4.006673,       -11.323969,       -6.161755,       -9.04821
-7.042094,       -2.108879,       -8.895066,       -2.038769,       -9.372576,       -9.081234,       -5.856881,       -10.446549,       -9.72831,       -3.812753,       -11.052794,       -4.720463,       -5.324754,       -8.66576,       -6.925209,       -7.827377
-8.238017,       -8.895066,       -0.803423,       -5.133726,       -10.407814,       -14.496253,       -4.567757,       -10.140939,       -8.609094,       -5.770632,       -5.383659,       -6.596424,       -5.430794,       -8.871719,       -5.941616,       -11.073954
-4.317463,       -2.038769,       -5.133726,       4.4927,       -5.564446,       -6.705747,       1.673203,       -5.173809,       -5.328293,       2.70482,       -5.60769,       0.593694,       1.608648,       -4.812943,       -0.505944,       -2.979395
-8.842033,       -9.372576,       -10.407814,       -5.564446,       -5.125312,       -10.448895,       -3.567043,       -8.485494,       -7.981155,       -5.949981,       -11.357831,       -7.929741,       -2.415577,       -7.084955,       -5.629131,       -8.393641
-14.373559,       -9.081234,       -14.496253,       -6.705747,       -10.448895,       -3.593042,       -5.704751,       -5.771068,       -12.429263,       -3.701762,       -12.578234,       -7.873675,       -6.87695,       -7.402874,       -8.412817,       -5.406597
-4.678511,       -5.856881,       -4.567757,       1.673203,       -3.567043,       -5.704751,       5.360799,       -4.963137,       -5.996523,       2.11256,       -4.664596,       -0.270488,       2.748442,       -4.909116,       1.31953,       -3.67199
-12.640723,       -10.446549,       -10.140939,       -5.173809,       -8.485494,       -5.771068,       -4.963137,       -2.275363,       -7.708326,       -5.842817,       -13.694318,       -5.612507,       -4.717212,       -3.834964,       -7.352963,       -5.212174
-6.858807,       -9.72831,       -8.609094,       -5.328293,       -7.981155,       -12.429263,       -5.996523,       -7.708326,       -1.046177,       -4.876907,       -8.670446,       -6.09495,       -5.847454,       -6.628842,       -7.551171,       -11.540895
-5.030739,       -3.812753,       -5.770632,       2.70482,       -5.949981,       -3.701762,       2.11256,       -5.842817,       -4.876907,       5.616325,       -4.130013,       1.205393,       1.596571,       -4.485037,       -0.077872,       -3.899205
-8.393424,       -11.052794,       -5.383659,       -5.60769,       -11.357831,       -12.578234,       -4.664596,       -13.694318,       -8.670446,       -4.130013,       -1.97512,       -5.767859,       -5.746373,       -12.010797,       -4.273159,       -10.78661
-5.83531,       -4.720463,       -6.596424,       0.593694,       -7.929741,       -7.873675,       -0.270488,       -5.612507,       -6.09495,       1.205393,       -5.767859,       3.468458,       -0.565905,       -5.302508,       -2.088271,       -4.444826
-4.006673,       -5.324754,       -5.430794,       1.608648,       -2.415577,       -6.87695,       2.748442,       -4.717212,       -5.847454,       1.596571,       -5.746373,       -0.565905,       4.967781,       -2.981881,       1.136473,       -3.387513
-11.323969,       -8.66576,       -8.871719,       -4.812943,       -7.084955,       -7.402874,       -4.909116,       -3.834964,       -6.628842,       -4.485037,       -12.010797,       -5.302508,       -2.981881,       -3.208242,       -4.762134,       -5.975262
-6.161755,       -6.925209,       -5.941616,       -0.505944,       -5.629131,       -8.412817,       1.31953,       -7.352963,       -7.551171,       -0.077872,       -4.273159,       -2.088271,       1.136473,       -4.762134,       3.364318,       -4.27782
-9.04821,       -7.827377,       -11.073954,       -2.979395,       -8.393641,       -5.406597,       -3.67199,       -5.212174,       -11.540895,       -3.899205,       -10.78661,       -4.444826,       -3.387513,       -5.975262,       -4.27782,       -0.018299
                    };
            return _data;
        }
    };
//    H: 3.4063
//    E: -2.5277


// ----------------------------------------------------------------------------
// Ribosum90_90 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.258073    0.217624    0.293749    0.230553
	struct Ribosum90_90 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum90_90>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.470121,       -4.35949,       -3.911999,       -3.854849
-4.35949,       1.652862,       -4.871689,       -3.030291
-3.911999,       -4.871689,       1.367978,       -4.214891
-3.854849,       -3.030291,       -4.214891,       1.993115
                    };
            return _data;
        }
    };
//    H: 1.6999
//    E: -1.0529

// ----------------------------------------------------------------------------
// Ribosum90_90N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum90_90N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum90_90N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.470121,       -4.35949,       -3.911999,       -3.854849,       -4.871689
-4.35949,       1.652862,       -4.871689,       -3.030291,       -4.871689
-3.911999,       -4.871689,       1.367978,       -4.214891,       -4.871689
-3.854849,       -3.030291,       -4.214891,       1.993115,       -4.871689
-4.871689,       -4.871689,       -4.871689,       -4.871689,       -4.871689
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum90_90d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum90_90d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum90_90d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.122622,       -8.482101,       -8.456973,       -5.655468,       -10.232575,       -999.0,       -7.87925,       -13.365341,       -7.500237,       -7.703081,       -11.073213,       -8.70426,       -6.031922,       -11.892994,       -8.875981,       -12.446177
-8.482101,       -0.359293,       -9.748469,       -4.521469,       -9.973788,       -8.462128,       -9.39636,       -14.070125,       -17.70918,       -4.533887,       -13.184596,       -7.68209,       -8.375963,       -7.726164,       -10.143671,       -9.978417
-8.456973,       -9.748469,       -0.406724,       -7.041642,       -12.630193,       -16.878276,       -6.315466,       -15.22457,       -10.219877,       -8.008211,       -7.87366,       -9.611948,       -8.056409,       -11.955527,       -7.336381,       -11.143271
-5.655468,       -4.521469,       -7.041642,       5.210046,       -8.875835,       -9.809593,       -1.870124,       -5.831061,       -9.175916,       0.163153,       -7.796089,       -1.058337,       -1.511826,       -8.213346,       -3.748842,       -4.673357
-10.232575,       -9.973788,       -12.630193,       -8.875835,       -1.670035,       -10.410417,       -4.347853,       -9.399849,       -9.59428,       -8.890298,       -9.434166,       -10.249287,       -4.074271,       -13.255771,       -7.579143,       -10.519148
-999.0,       -8.462128,       -16.878276,       -9.809593,       -10.410417,       -1.395395,       -5.892222,       -8.104919,       -11.739618,       -5.18225,       -13.856099,       -9.289559,       -8.958255,       -8.151476,       -10.023849,       -9.491011
-7.87925,       -9.39636,       -6.315466,       -1.870124,       -4.347853,       -5.892222,       5.853051,       -5.908536,       -8.484755,       -1.511288,       -5.865816,       -3.542405,       0.120267,       -8.174401,       -0.370603,       -6.892109
-13.365341,       -14.070125,       -15.22457,       -5.831061,       -9.399849,       -8.104919,       -5.908536,       -0.724568,       -14.988624,       -7.077492,       -14.485374,       -6.547229,       -8.383193,       -5.995978,       -8.494846,       -7.3931
-7.500237,       -17.70918,       -10.219877,       -9.175916,       -9.59428,       -11.739618,       -8.484755,       -14.988624,       -0.528171,       -6.501283,       -8.798829,       -6.825822,       -6.883633,       -18.546498,       -9.879095,       -14.100903
-7.703081,       -4.533887,       -8.008211,       0.163153,       -8.890298,       -5.18225,       -1.511288,       -7.077492,       -6.501283,       5.982557,       -5.634964,       -0.518612,       -2.151804,       -5.551325,       -3.437934,       -6.633758
-11.073213,       -13.184596,       -7.87366,       -7.796089,       -9.434166,       -13.856099,       -5.865816,       -14.485374,       -8.798829,       -5.634964,       -1.47959,       -6.848522,       -9.074518,       -12.183772,       -6.616257,       -12.153474
-8.70426,       -7.68209,       -9.611948,       -1.058337,       -10.249287,       -9.289559,       -3.542405,       -6.547229,       -6.825822,       -0.518612,       -6.848522,       3.905031,       -3.699278,       -7.53871,       -4.627415,       -5.805152
-6.031922,       -8.375963,       -8.056409,       -1.511826,       -4.074271,       -8.958255,       0.120267,       -8.383193,       -6.883633,       -2.151804,       -9.074518,       -3.699278,       5.46846,       -5.898515,       -0.929142,       -5.004325
-11.892994,       -7.726164,       -11.955527,       -8.213346,       -13.255771,       -8.151476,       -8.174401,       -5.995978,       -18.546498,       -5.551325,       -12.183772,       -7.53871,       -5.898515,       -1.266303,       -6.597319,       -5.813501
-8.875981,       -10.143671,       -7.336381,       -3.748842,       -7.579143,       -10.023849,       -0.370603,       -8.494846,       -9.879095,       -3.437934,       -6.616257,       -4.627415,       -0.929142,       -6.597319,       3.919039,       -5.790344
-12.446177,       -9.978417,       -11.143271,       -4.673357,       -10.519148,       -9.491011,       -6.892109,       -7.3931,       -14.100903,       -6.633758,       -12.153474,       -5.805152,       -5.004325,       -5.813501,       -5.790344,       0.487781
                    };
            return _data;
        }
    };
//    H: 4.9213
//    E: -6.7901


// ----------------------------------------------------------------------------
// Ribosum85_65 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.259510    0.219848    0.301808    0.218834
	struct Ribosum85_65 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum85_65>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.247382,       -1.960672,       -1.531066,       -1.492029
-1.960672,       1.187463,       -2.619014,       -1.12547
-1.531066,       -2.619014,       1.056323,       -1.823714
-1.492029,       -1.12547,       -1.823714,       1.683375
                    };
            return _data;
        }
    };
//    H: 0.9334
//    E: -0.2793

// ----------------------------------------------------------------------------
// Ribosum85_65N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum85_65N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum85_65N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.247382,       -1.960672,       -1.531066,       -1.492029,       -2.619014
-1.960672,       1.187463,       -2.619014,       -1.12547,       -2.619014
-1.531066,       -2.619014,       1.056323,       -1.823714,       -2.619014
-1.492029,       -1.12547,       -1.823714,       1.683375,       -2.619014
-2.619014,       -2.619014,       -2.619014,       -2.619014,       -2.619014
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum85_65d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum85_65d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum85_65d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.460952,       -7.693205,       -8.154093,       -4.277674,       -8.864174,       -14.705726,       -4.771054,       -12.844289,       -6.728268,       -5.055148,       -8.256692,       -5.823039,       -4.077484,       -11.235882,       -6.303388,       -8.957302
-7.693205,       -2.158582,       -8.989557,       -2.03295,       -9.338454,       -10.557961,       -6.103045,       -10.538449,       -10.00414,       -3.799348,       -11.234957,       -5.702367,       -5.603628,       -8.659726,       -7.04203,       -7.810362
-8.154093,       -8.989557,       -0.759812,       -5.293111,       -10.409894,       -15.247626,       -4.799765,       -10.068292,       -9.192748,       -5.956787,       -5.436769,       -6.637451,       -6.08619,       -8.741523,       -5.942439,       -11.133432
-4.277674,       -2.03295,       -5.293111,       4.520473,       -5.593031,       -7.205858,       1.600817,       -5.322201,       -5.647492,       2.668134,       -5.700901,       0.560894,       1.578853,       -4.832692,       -0.534666,       -3.028299
-8.864174,       -9.338454,       -10.409894,       -5.593031,       -5.109847,       -11.354512,       -3.623236,       -8.418932,       -7.908373,       -6.145332,       -12.138272,       -8.298048,       -2.367591,       -6.983057,       -5.663228,       -8.433434
-14.705726,       -10.557961,       -15.247626,       -7.205858,       -11.354512,       -3.52274,       -5.962584,       -6.082615,       -12.980039,       -3.744168,       -12.680852,       -8.278623,       -7.283919,       -7.395109,       -9.010823,       -5.550282
-4.771054,       -6.103045,       -4.799765,       1.600817,       -3.623236,       -5.962584,       5.393804,       -4.931532,       -6.096143,       1.987237,       -4.688736,       -0.375213,       2.712834,       -4.937195,       1.292316,       -4.05225
-12.844289,       -10.538449,       -10.068292,       -5.322201,       -8.418932,       -6.082615,       -4.931532,       -2.186096,       -7.609203,       -5.91619,       -13.805963,       -6.238425,       -4.760028,       -3.769427,       -7.518689,       -5.157158
-6.728268,       -10.00414,       -9.192748,       -5.647492,       -7.908373,       -12.980039,       -6.096143,       -7.609203,       -1.03998,       -5.356784,       -8.664164,       -6.304988,       -6.147298,       -6.504469,       -7.51428,       -12.252395
-5.055148,       -3.799348,       -5.956787,       2.668134,       -6.145332,       -3.744168,       1.987237,       -5.91619,       -5.356784,       5.641845,       -4.241964,       1.126785,       1.519293,       -4.495001,       -0.126557,       -4.121988
-8.256692,       -11.234957,       -5.436769,       -5.700901,       -12.138272,       -12.680852,       -4.688736,       -13.805963,       -8.664164,       -4.241964,       -1.923693,       -5.96068,       -5.900906,       -12.149309,       -4.227946,       -10.728074
-5.823039,       -5.702367,       -6.637451,       0.560894,       -8.298048,       -8.278623,       -0.375213,       -6.238425,       -6.304988,       1.126785,       -5.96068,       3.502818,       -0.603326,       -5.882161,       -2.121668,       -4.633123
-4.077484,       -5.603628,       -6.08619,       1.578853,       -2.367591,       -7.283919,       2.712834,       -4.760028,       -6.147298,       1.519293,       -5.900906,       -0.603326,       5.001578,       -2.937507,       1.096722,       -3.545601
-11.235882,       -8.659726,       -8.741523,       -4.832692,       -6.983057,       -7.395109,       -4.937195,       -3.769427,       -6.504469,       -4.495001,       -12.149309,       -5.882161,       -2.937507,       -3.056922,       -4.891833,       -5.945342
-6.303388,       -7.04203,       -5.942439,       -0.534666,       -5.663228,       -9.010823,       1.292316,       -7.518689,       -7.51428,       -0.126557,       -4.227946,       -2.121668,       1.096722,       -4.891833,       3.385876,       -4.580744
-8.957302,       -7.810362,       -11.133432,       -3.028299,       -8.433434,       -5.550282,       -4.05225,       -5.157158,       -12.252395,       -4.121988,       -10.728074,       -4.633123,       -3.545601,       -5.945342,       -4.580744,       0.084454
                    };
            return _data;
        }
    };
//    H: 3.8109
//    E: -2.8384


// ----------------------------------------------------------------------------
// Ribosum75_70 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.262827    0.211736    0.284260    0.241177
	struct Ribosum75_70 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum75_70>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.158164,       -1.978836,       -1.709571,       -1.573777
-1.978836,       1.336856,       -2.60815,       -1.034386
-1.709571,       -2.60815,       1.153394,       -1.950002
-1.573777,       -1.034386,       -1.950002,       1.606197
                    };
            return _data;
        }
    };
//    H: 0.9353
//    E: -0.2855

// ----------------------------------------------------------------------------
// Ribosum75_70N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum75_70N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum75_70N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.158164,       -1.978836,       -1.709571,       -1.573777,       -2.60815
-1.978836,       1.336856,       -2.60815,       -1.034386,       -2.60815
-1.709571,       -2.60815,       1.153394,       -1.950002,       -2.60815
-1.573777,       -1.034386,       -1.950002,       1.606197,       -2.60815
-2.60815,       -2.60815,       -2.60815,       -2.60815,       -2.60815
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum75_70d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum75_70d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum75_70d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.353701,       -8.203103,       -8.569072,       -5.128036,       -10.169731,       -14.242433,       -4.607151,       -12.265384,       -6.612981,       -5.187012,       -10.398087,       -6.737201,       -3.881141,       -12.564474,       -6.835454,       -8.200409
-8.203103,       -0.746689,       -9.262809,       -1.883138,       -10.000712,       -8.319686,       -5.6517,       -10.13869,       -10.021676,       -3.438957,       -11.77973,       -5.783174,       -5.233095,       -8.766847,       -7.861221,       -7.931402
-8.569072,       -9.262809,       -0.648428,       -4.861519,       -11.14401,       -15.040383,       -4.526206,       -9.224646,       -9.062735,       -6.284113,       -4.495587,       -4.7793,       -6.142181,       -8.803623,       -5.649153,       -10.634464
-5.128036,       -1.883138,       -4.861519,       4.632203,       -6.25761,       -6.303622,       1.225871,       -5.847035,       -6.532232,       2.408784,       -6.404804,       0.392819,       1.183168,       -5.283763,       -1.105482,       -2.779305
-10.169731,       -10.000712,       -11.14401,       -6.25761,       -3.911475,       -10.896978,       -2.923447,       -7.664594,       -8.509196,       -5.711866,       -11.221628,       -8.538594,       -2.305388,       -7.850961,       -5.656555,       -7.179499
-14.242433,       -8.319686,       -15.040383,       -6.303622,       -10.896978,       -1.16545,       -5.168036,       -5.695584,       -11.610678,       -2.732759,       -11.422877,       -7.183031,       -7.226495,       -7.934633,       -8.651119,       -3.779216
-4.607151,       -5.6517,       -4.526206,       1.225871,       -2.923447,       -5.168036,       5.662172,       -4.174922,       -6.794678,       1.713925,       -4.619025,       -0.608388,       2.454537,       -4.942334,       1.117583,       -3.070264
-12.265384,       -10.13869,       -9.224646,       -5.847035,       -7.664594,       -5.695584,       -4.174922,       -0.984117,       -7.139153,       -6.36204,       -13.319887,       -6.103926,       -4.513499,       -4.600535,       -4.885306,       -4.605371
-6.612981,       -10.021676,       -9.062735,       -6.532232,       -8.509196,       -11.610678,       -6.794678,       -7.139153,       -0.643222,       -5.049081,       -9.571993,       -5.851955,       -6.179392,       -6.928047,       -7.867173,       -12.428539
-5.187012,       -3.438957,       -6.284113,       2.408784,       -5.711866,       -2.732759,       1.713925,       -6.36204,       -5.049081,       5.843324,       -4.78435,       1.26587,       1.102151,       -4.889106,       -0.487224,       -3.649577
-10.398087,       -11.77973,       -4.495587,       -6.404804,       -11.221628,       -11.422877,       -4.619025,       -13.319887,       -9.571993,       -4.78435,       -2.152475,       -5.301888,       -6.309484,       -12.028834,       -4.125762,       -12.119739
-6.737201,       -5.783174,       -4.7793,       0.392819,       -8.538594,       -7.183031,       -0.608388,       -6.103926,       -5.851955,       1.26587,       -5.301888,       3.481202,       -0.957246,       -4.837699,       -2.143625,       -3.701326
-3.881141,       -5.233095,       -6.142181,       1.183168,       -2.305388,       -7.226495,       2.454537,       -4.513499,       -6.179392,       1.102151,       -6.309484,       -0.957246,       4.898658,       -3.633256,       0.835426,       -3.318968
-12.564474,       -8.766847,       -8.803623,       -5.283763,       -7.850961,       -7.934633,       -4.942334,       -4.600535,       -6.928047,       -4.889106,       -12.028834,       -4.837699,       -3.633256,       -3.712512,       -5.638194,       -5.222705
-6.835454,       -7.861221,       -5.649153,       -1.105482,       -5.656555,       -8.651119,       1.117583,       -4.885306,       -7.867173,       -0.487224,       -4.125762,       -2.143625,       0.835426,       -5.638194,       3.464634,       -3.538954
-8.200409,       -7.931402,       -10.634464,       -2.779305,       -7.179499,       -3.779216,       -3.070264,       -4.605371,       -12.428539,       -3.649577,       -12.119739,       -3.701326,       -3.318968,       -5.222705,       -3.538954,       -0.462609
                    };
            return _data;
        }
    };
//    H: 3.9044
//    E: -2.7607


// ----------------------------------------------------------------------------
// Ribosum80_35 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.267502    0.213600    0.288926    0.229972
	struct Ribosum80_35 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum80_35>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.756267,       -1.060801,       -0.729211,       -0.698446
-1.060801,       0.910491,       -1.519461,       -0.476674
-0.729211,       -1.519461,       0.791327,       -0.925731
-0.698446,       -0.476674,       -0.925731,       1.188929
                    };
            return _data;
        }
    };
//    H: 0.4174
//    E: -0.0425

// ----------------------------------------------------------------------------
// Ribosum80_35N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum80_35N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum80_35N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.756267,       -1.060801,       -0.729211,       -0.698446,       -1.519461
-1.060801,       0.910491,       -1.519461,       -0.476674,       -1.519461
-0.729211,       -1.519461,       0.791327,       -0.925731,       -1.519461
-0.698446,       -0.476674,       -0.925731,       1.188929,       -1.519461
-1.519461,       -1.519461,       -1.519461,       -1.519461,       -1.519461
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum80_35d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum80_35d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum80_35d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-3.596622,       -6.498481,       -9.399311,       -4.444135,       -10.188375,       -13.011706,       -3.610261,       -12.29005,       -7.530649,       -5.306453,       -8.51588,       -5.715024,       -3.01755,       -12.462911,       -3.861199,       -8.858801
-6.498481,       -1.765882,       -9.665856,       -1.641354,       -9.703914,       -7.722225,       -4.804815,       -9.709449,       -7.030328,       -2.898142,       -9.843378,       -4.005969,       -3.998738,       -8.553744,       -6.205439,       -8.170963
-9.399311,       -9.665856,       -1.922953,       -4.944724,       -10.333535,       -13.620734,       -2.222073,       -10.825773,       -8.180075,       -4.990504,       -4.454384,       -6.627233,       -2.719096,       -9.184127,       -5.639809,       -8.576317
-4.444135,       -1.641354,       -4.944724,       3.962961,       -4.972506,       -2.722921,       2.267576,       -3.564235,       -3.71557,       3.107887,       -4.522382,       0.871168,       2.009254,       -3.858762,       -0.142113,       -2.45962
-10.188375,       -9.703914,       -10.333535,       -4.972506,       -5.741875,       -9.760976,       -2.602597,       -8.332407,       -6.87896,       -4.407172,       -10.399816,       -5.484814,       -2.840802,       -7.553688,       -5.765214,       -9.026926
-13.011706,       -7.722225,       -13.620734,       -2.722921,       -9.760976,       -3.987806,       -4.073351,       -5.569397,       -10.367967,       -2.847844,       -10.787733,       -5.870994,       -4.797721,       -7.275495,       -6.604873,       -5.301867
-3.610261,       -4.804815,       -2.222073,       2.267576,       -2.602597,       -4.073351,       5.194445,       -4.323472,       -4.522894,       3.020375,       -4.316013,       0.457751,       3.142292,       -4.280455,       1.462739,       -2.654007
-12.29005,       -9.709449,       -10.825773,       -3.564235,       -8.332407,       -5.569397,       -4.323472,       -3.341102,       -8.131279,       -2.437138,       -8.333698,       -4.225426,       -3.961709,       -4.981209,       -5.674289,       -5.886695
-7.530649,       -7.030328,       -8.180075,       -3.71557,       -6.87896,       -10.367967,       -4.522894,       -8.131279,       -1.952476,       -2.432503,       -8.342799,       -5.350733,       -4.101155,       -7.572451,       -6.917317,       -9.425763
-5.306453,       -2.898142,       -4.990504,       3.107887,       -4.407172,       -2.847844,       3.020375,       -2.437138,       -2.432503,       5.511289,       -3.76027,       1.680561,       2.319441,       -3.738842,       0.628421,       -2.475196
-8.51588,       -9.843378,       -4.454384,       -4.522382,       -10.399816,       -10.787733,       -4.316013,       -8.333698,       -8.342799,       -3.76027,       -2.247223,       -5.172605,       -5.304428,       -10.301341,       -4.364734,       -5.955983
-5.715024,       -4.005969,       -6.627233,       0.871168,       -5.484814,       -5.870994,       0.457751,       -4.225426,       -5.350733,       1.680561,       -5.172605,       3.115038,       0.206922,       -4.721191,       -1.193524,       -3.019503
-3.01755,       -3.998738,       -2.719096,       2.009254,       -2.840802,       -4.797721,       3.142292,       -3.961709,       -4.101155,       2.319441,       -5.304428,       0.206922,       4.437239,       -3.405645,       1.206588,       -1.709989
-12.462911,       -8.553744,       -9.184127,       -3.858762,       -7.553688,       -7.275495,       -4.280455,       -4.981209,       -7.572451,       -3.738842,       -10.301341,       -4.721191,       -3.405645,       -4.70991,       -3.943201,       -6.945428
-3.861199,       -6.205439,       -5.639809,       -0.142113,       -5.765214,       -6.604873,       1.462739,       -5.674289,       -6.917317,       0.628421,       -4.364734,       -1.193524,       1.206588,       -3.943201,       2.982298,       -3.144713
-8.858801,       -8.170963,       -8.576317,       -2.45962,       -9.026926,       -5.301867,       -2.654007,       -5.886695,       -9.425763,       -2.475196,       -5.955983,       -3.019503,       -1.709989,       -6.945428,       -3.144713,       -1.27895
                    };
            return _data;
        }
    };
//    H: 3.3118
//    E: -2.4266


// ----------------------------------------------------------------------------
// Ribosum55_30 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.269988    0.206158    0.280560    0.243294
	struct Ribosum55_30 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum55_30>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.677641,       -1.055662,       -0.706313,       -0.656647
-1.055662,       0.896519,       -1.546258,       -0.40621
-0.706313,       -1.546258,       0.759168,       -0.798374
-0.656647,       -0.40621,       -0.798374,       1.14527
                    };
            return _data;
        }
    };
//    H: 0.3817
//    E: -0.0318

// ----------------------------------------------------------------------------
// Ribosum55_30N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum55_30N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum55_30N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.677641,       -1.055662,       -0.706313,       -0.656647,       -1.546258
-1.055662,       0.896519,       -1.546258,       -0.40621,       -1.546258
-0.706313,       -1.546258,       0.759168,       -0.798374,       -1.546258
-0.656647,       -0.40621,       -0.798374,       1.14527,       -1.546258
-1.546258,       -1.546258,       -1.546258,       -1.546258,       -1.546258
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum55_30d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum55_30d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum55_30d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.991425,       -8.659196,       -9.057261,       -5.312449,       -10.29675,       -11.628466,       -3.910937,       -12.394819,       -6.857478,       -4.08982,       -9.691038,       -6.430034,       -2.378152,       -12.56417,       -3.827234,       -9.327631
-8.659196,       -1.93556,       -9.684569,       -1.911673,       -10.626449,       -8.791148,       -5.291498,       -10.809358,       -7.261273,       -2.612948,       -10.324948,       -5.055824,       -4.211046,       -9.019977,       -7.306073,       -8.714806
-9.057261,       -9.684569,       -1.40994,       -6.06251,       -10.734335,       -15.094043,       -2.50271,       -9.499034,       -9.488629,       -6.06551,       -4.164875,       -7.237305,       -2.32996,       -8.146606,       -5.958381,       -10.107594
-5.312449,       -1.911673,       -6.06251,       3.851873,       -5.28584,       -2.492023,       2.2717,       -4.445639,       -4.056113,       2.990522,       -5.042918,       0.744812,       1.873487,       -4.83808,       -0.052465,       -2.97059
-10.29675,       -10.626449,       -10.734335,       -5.28584,       -6.286815,       -11.622638,       -3.164021,       -8.393144,       -7.832576,       -4.92195,       -11.420786,       -6.239707,       -3.104078,       -8.151401,       -6.321753,       -9.18404
-11.628466,       -8.791148,       -15.094043,       -2.492023,       -11.622638,       -3.222928,       -4.840509,       -6.816239,       -12.814732,       -3.522209,       -11.840457,       -7.042913,       -6.410257,       -8.928358,       -8.286171,       -6.827679
-3.910937,       -5.291498,       -2.50271,       2.2717,       -3.164021,       -4.840509,       5.452905,       -4.353649,       -5.957281,       3.096189,       -4.482013,       0.445104,       3.138131,       -4.311064,       1.290204,       -3.189415
-12.394819,       -10.809358,       -9.499034,       -4.445639,       -8.393144,       -6.816239,       -4.353649,       -2.734897,       -7.257934,       -2.164612,       -9.136388,       -4.578332,       -4.592953,       -4.835151,       -6.651977,       -5.815372
-6.857478,       -7.261273,       -9.488629,       -4.056113,       -7.832576,       -12.814732,       -5.957281,       -7.257934,       -1.706348,       -2.502782,       -9.839444,       -6.316557,       -5.125622,       -7.08705,       -7.794812,       -10.493874
-4.08982,       -2.612948,       -6.06551,       2.990522,       -4.92195,       -3.522209,       3.096189,       -2.164612,       -2.502782,       5.724476,       -4.565668,       1.501461,       2.132803,       -4.137738,       0.385466,       -3.215391
-9.691038,       -10.324948,       -4.164875,       -5.042918,       -11.420786,       -11.840457,       -4.482013,       -9.136388,       -9.839444,       -4.565668,       -2.098152,       -5.52467,       -6.293157,       -10.536513,       -4.330789,       -5.206727
-6.430034,       -5.055824,       -7.237305,       0.744812,       -6.239707,       -7.042913,       0.445104,       -4.578332,       -6.316557,       1.501461,       -5.52467,       3.155826,       0.309926,       -4.775552,       -1.397979,       -2.941872
-2.378152,       -4.211046,       -2.32996,       1.873487,       -3.104078,       -6.410257,       3.138131,       -4.592953,       -5.125622,       2.132803,       -6.293157,       0.309926,       4.368814,       -3.814687,       0.9484,       -2.069726
-12.56417,       -9.019977,       -8.146606,       -4.83808,       -8.151401,       -8.928358,       -4.311064,       -4.835151,       -7.08705,       -4.137738,       -10.536513,       -4.775552,       -3.814687,       -4.294055,       -4.372547,       -6.28283
-3.827234,       -7.306073,       -5.958381,       -0.052465,       -6.321753,       -8.286171,       1.290204,       -6.651977,       -7.794812,       0.385466,       -4.330789,       -1.397979,       0.9484,       -4.372547,       3.004188,       -4.013877
-9.327631,       -8.714806,       -10.107594,       -2.97059,       -9.18404,       -6.827679,       -3.189415,       -5.815372,       -10.493874,       -3.215391,       -5.206727,       -2.941872,       -2.069726,       -6.28283,       -4.013877,       -1.294939
                    };
            return _data;
        }
    };
//    H: 3.4282
//    E: -2.5882


// ----------------------------------------------------------------------------
// Ribosum65_25 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.290877    0.192342    0.262480    0.254301
	struct Ribosum65_25 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum65_25>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.392605,       -0.790414,       -0.503501,       -0.467605
-0.790414,       0.83912,       -1.506739,       -0.294424
-0.503501,       -1.506739,       0.767386,       -0.719101
-0.467605,       -0.294424,       -0.719101,       0.875074
                    };
            return _data;
        }
    };
//    H: 0.2679
//    E: 0.0026

// ----------------------------------------------------------------------------
// Ribosum65_25N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum65_25N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum65_25N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.392605,       -0.790414,       -0.503501,       -0.467605,       -1.506739
-0.790414,       0.83912,       -1.506739,       -0.294424,       -1.506739
-0.503501,       -1.506739,       0.767386,       -0.719101,       -1.506739
-0.467605,       -0.294424,       -0.719101,       0.875074,       -1.506739
-1.506739,       -1.506739,       -1.506739,       -1.506739,       -1.506739
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum65_25d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum65_25d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum65_25d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-4.440319,       -6.43275,       -10.868632,       -4.119415,       -12.168313,       -11.950009,       -3.905748,       -13.073792,       -9.165628,       -4.927979,       -11.599261,       -4.784329,       -3.645801,       -13.407677,       -4.573276,       -10.996448
-6.43275,       -2.441286,       -10.689428,       -1.970096,       -11.800014,       -8.029638,       -4.285291,       -10.396477,       -8.820816,       -1.967242,       -8.96263,       -5.542482,       -4.076586,       -10.061884,       -5.604215,       -8.77048
-10.868632,       -10.689428,       -2.937225,       -5.252453,       -11.592776,       -14.51664,       -1.867297,       -11.246183,       -8.802127,       -5.225137,       -4.798858,       -8.461189,       -2.623399,       -10.112834,       -5.997456,       -7.17173
-4.119415,       -1.970096,       -5.252453,       3.572021,       -5.293475,       -2.016081,       2.557285,       -4.145471,       -4.021339,       3.448099,       -4.776899,       0.943506,       2.074407,       -4.38173,       0.016099,       -3.142817
-12.168313,       -11.800014,       -11.592776,       -5.293475,       -7.021382,       -8.559584,       -3.019612,       -8.744694,       -9.155865,       -3.950636,       -10.836502,       -5.719794,       -3.126406,       -8.479838,       -6.894162,       -10.559221
-11.950009,       -8.029638,       -14.51664,       -2.016081,       -8.559584,       -3.519524,       -2.978936,       -5.491704,       -10.541743,       -2.53426,       -10.792684,       -4.881508,       -3.53005,       -7.623436,       -5.451803,       -5.063224
-3.905748,       -4.285291,       -1.867297,       2.557285,       -3.019612,       -2.978936,       5.439588,       -3.847949,       -4.367927,       3.317222,       -3.883555,       0.62156,       3.527422,       -3.859203,       1.562799,       -3.322875
-13.073792,       -10.396477,       -11.246183,       -4.145471,       -8.744694,       -5.491704,       -3.847949,       -4.254227,       -9.475743,       -2.875216,       -10.473138,       -4.83299,       -2.928727,       -6.847812,       -5.088961,       -7.252821
-9.165628,       -8.820816,       -8.802127,       -4.021339,       -9.155865,       -10.541743,       -4.367927,       -9.475743,       -3.214236,       -2.370309,       -10.703145,       -5.875777,       -3.560168,       -9.273404,       -8.652758,       -12.175209
-4.927979,       -1.967242,       -5.225137,       3.448099,       -3.950636,       -2.53426,       3.317222,       -2.875216,       -2.370309,       5.801459,       -3.325014,       1.938801,       2.761166,       -3.540847,       0.662278,       -2.565574
-11.599261,       -8.96263,       -4.798858,       -4.776899,       -10.836502,       -10.792684,       -3.883555,       -10.473138,       -10.703145,       -3.325014,       -2.60793,       -5.018976,       -4.92245,       -11.239632,       -4.334128,       -6.980118
-4.784329,       -5.542482,       -8.461189,       0.943506,       -5.719794,       -4.881508,       0.62156,       -4.83299,       -5.875777,       1.938801,       -5.018976,       2.896175,       0.440919,       -5.022532,       -1.196296,       -4.348435
-3.645801,       -4.076586,       -2.623399,       2.074407,       -3.126406,       -3.53005,       3.527422,       -2.928727,       -3.560168,       2.761166,       -4.92245,       0.440919,       3.969391,       -3.380392,       1.096273,       -1.98157
-13.407677,       -10.061884,       -10.112834,       -4.38173,       -8.479838,       -7.623436,       -3.859203,       -6.847812,       -9.273404,       -3.540847,       -11.239632,       -5.022532,       -3.380392,       -6.251895,       -3.383958,       -7.808008
-4.573276,       -5.604215,       -5.997456,       0.016099,       -6.894162,       -5.451803,       1.562799,       -5.088961,       -8.652758,       0.662278,       -4.334128,       -1.196296,       1.096273,       -3.383958,       2.590667,       -2.499327
-10.996448,       -8.77048,       -7.17173,       -3.142817,       -10.559221,       -5.063224,       -3.322875,       -7.252821,       -12.175209,       -2.565574,       -6.980118,       -4.348435,       -1.98157,       -7.808008,       -2.499327,       -1.866694
                    };
            return _data;
        }
    };
//    H: 3.2635
//    E: -2.6333


// ----------------------------------------------------------------------------
// Ribosum70_80 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.259018    0.212248    0.281236    0.247497
	struct Ribosum70_80 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum70_80>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.280031,       -2.685537,       -2.466786,       -2.462755
-2.685537,       1.548936,       -3.016331,       -1.41467
-2.466786,       -3.016331,       1.291765,       -2.617619
-2.462755,       -1.41467,       -2.617619,       1.743728
                    };
            return _data;
        }
    };
//    H: 1.2272
//    E: -0.4900

// ----------------------------------------------------------------------------
// Ribosum70_80N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum70_80N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum70_80N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.280031,       -2.685537,       -2.466786,       -2.462755,       -3.016331
-2.685537,       1.548936,       -3.016331,       -1.41467,       -3.016331
-2.466786,       -3.016331,       1.291765,       -2.617619,       -3.016331
-2.462755,       -1.41467,       -2.617619,       1.743728,       -3.016331
-3.016331,       -3.016331,       -3.016331,       -3.016331,       -3.016331
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum70_80d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum70_80d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum70_80d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-0.540614,       -8.667434,       -7.962251,       -5.221485,       -9.71057,       -12.849279,       -6.011264,       -12.06713,       -6.135393,       -5.018093,       -10.020335,       -6.669681,       -4.902564,       -12.454015,       -7.241488,       -8.216835
-8.667434,       -0.283052,       -8.989161,       -2.368697,       -10.541129,       -7.651961,       -5.425898,       -11.184414,       -10.924659,       -3.366923,       -11.801959,       -5.743762,       -6.519418,       -8.549094,       -7.693907,       -7.644086
-7.962251,       -8.989161,       -0.578039,       -5.959113,       -10.639313,       -14.030714,       -4.628556,       -11.150412,       -8.551863,       -6.722643,       -4.72911,       -7.069682,       -7.474251,       -9.891715,       -5.769309,       -11.250019
-5.221485,       -2.368697,       -5.959113,       4.952428,       -7.109434,       -7.757354,       0.22475,       -5.734217,       -7.931323,       1.646339,       -7.145367,       0.148613,       -0.320243,       -6.035106,       -2.381652,       -2.855968
-9.71057,       -10.541129,       -10.639313,       -7.109434,       -3.007489,       -10.704845,       -3.271393,       -8.497832,       -8.827634,       -6.088101,       -9.641131,       -8.204363,       -2.39697,       -9.020727,       -6.247709,       -7.385747
-12.849279,       -7.651961,       -14.030714,       -7.757354,       -10.704845,       -0.762542,       -4.815325,       -6.734439,       -14.014431,       -3.775277,       -12.256058,       -8.181371,       -7.038026,       -8.196059,       -8.383894,       -5.882606
-6.011264,       -5.425898,       -4.628556,       0.22475,       -3.271393,       -4.815325,       5.830033,       -4.69424,       -7.329059,       1.011335,       -4.639702,       -1.360221,       1.648885,       -5.396255,       0.867161,       -4.096694
-12.06713,       -11.184414,       -11.150412,       -5.734217,       -8.497832,       -6.734439,       -4.69424,       -0.784282,       -9.29822,       -6.761777,       -11.839859,       -6.499092,       -5.571589,       -5.428443,       -7.688394,       -5.852813
-6.135393,       -10.924659,       -8.551863,       -7.931323,       -8.827634,       -14.014431,       -7.329059,       -9.29822,       -0.509816,       -5.721741,       -9.41672,       -6.158615,       -6.446224,       -8.817713,       -8.307235,       -13.463452
-5.018093,       -3.366923,       -6.722643,       1.646339,       -6.088101,       -3.775277,       1.011335,       -6.761777,       -5.721741,       5.948278,       -4.78869,       0.802049,       -0.072875,       -4.313432,       -1.264352,       -4.284558
-10.020335,       -11.801959,       -4.72911,       -7.145367,       -9.641131,       -12.256058,       -4.639702,       -11.839859,       -9.41672,       -4.78869,       -2.2699,       -5.715046,       -6.84126,       -11.782579,       -4.249597,       -11.886218
-6.669681,       -5.743762,       -7.069682,       0.148613,       -8.204363,       -8.181371,       -1.360221,       -6.499092,       -6.158615,       0.802049,       -5.715046,       3.703017,       -2.340539,       -4.413497,       -2.930641,       -4.840546
-4.902564,       -6.519418,       -7.474251,       -0.320243,       -2.39697,       -7.038026,       1.648885,       -5.571589,       -6.446224,       -0.072875,       -6.84126,       -2.340539,       5.118889,       -4.379417,       0.032694,       -4.220371
-12.454015,       -8.549094,       -9.891715,       -6.035106,       -9.020727,       -8.196059,       -5.396255,       -5.428443,       -8.817713,       -4.313432,       -11.782579,       -4.413497,       -4.379417,       -2.370078,       -6.30009,       -4.266739
-7.241488,       -7.693907,       -5.769309,       -2.381652,       -6.247709,       -8.383894,       0.867161,       -7.688394,       -8.307235,       -1.264352,       -4.249597,       -2.930641,       0.032694,       -6.30009,       3.647107,       -4.954619
-8.216835,       -7.644086,       -11.250019,       -2.855968,       -7.385747,       -5.882606,       -4.096694,       -5.852813,       -13.463452,       -4.284558,       -11.886218,       -4.840546,       -4.220371,       -4.266739,       -4.954619,       0.163387
                    };
            return _data;
        }
    };
//    H: 4.3200
//    E: -2.9359


// ----------------------------------------------------------------------------
// Ribosum80_25 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.267891    0.213118    0.288339    0.230653
	struct Ribosum80_25 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum80_25>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.745607,       -1.051871,       -0.721439,       -0.688374
-1.051871,       0.906313,       -1.514616,       -0.468194
-0.721439,       -1.514616,       0.787357,       -0.913103
-0.688374,       -0.468194,       -0.913103,       1.18014
                    };
            return _data;
        }
    };
//    H: 0.4113
//    E: -0.0404

// ----------------------------------------------------------------------------
// Ribosum80_25N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum80_25N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum80_25N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.745607,       -1.051871,       -0.721439,       -0.688374,       -1.514616
-1.051871,       0.906313,       -1.514616,       -0.468194,       -1.514616
-0.721439,       -1.514616,       0.787357,       -0.913103,       -1.514616
-0.688374,       -0.468194,       -0.913103,       1.18014,       -1.514616
-1.514616,       -1.514616,       -1.514616,       -1.514616,       -1.514616
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum80_25d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum80_25d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum80_25d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-3.609728,       -6.506098,       -9.407384,       -4.455473,       -10.196117,       -12.957827,       -3.612281,       -12.299958,       -7.538722,       -5.260089,       -8.518225,       -5.719589,       -3.004715,       -12.472819,       -3.871386,       -8.876238
-6.506098,       -1.768262,       -9.668566,       -1.650784,       -9.706294,       -7.719242,       -4.800436,       -9.713995,       -7.033038,       -2.89501,       -9.841055,       -4.010676,       -3.973207,       -8.55829,       -6.210094,       -8.183037
-9.407384,       -9.668566,       -1.925993,       -4.949754,       -10.336244,       -13.618081,       -2.219728,       -10.830649,       -8.183115,       -4.985797,       -4.452391,       -6.631674,       -2.696889,       -9.189002,       -5.644804,       -8.588721
-4.455473,       -1.650784,       -4.949754,       3.94843,       -4.961891,       -2.726595,       2.276059,       -3.57531,       -3.725269,       3.111328,       -4.52578,       0.87116,       2.006324,       -3.870116,       -0.129174,       -2.478503
-10.196117,       -9.706294,       -10.336244,       -4.961891,       -5.744254,       -9.757993,       -2.599836,       -8.336953,       -6.88167,       -4.397927,       -10.397493,       -5.487686,       -2.848065,       -7.558234,       -5.770089,       -9.039
-12.957827,       -7.719242,       -13.618081,       -2.726595,       -9.757993,       -3.97946,       -4.065233,       -5.568579,       -10.365314,       -2.83973,       -10.780047,       -5.869784,       -4.796336,       -7.274677,       -6.604385,       -5.308578
-3.612281,       -4.800436,       -2.219728,       2.276059,       -2.599836,       -4.065233,       5.202415,       -4.322762,       -4.520571,       3.030664,       -4.308394,       0.463827,       3.14992,       -4.279775,       1.466062,       -2.660992
-12.299958,       -9.713995,       -10.830649,       -3.57531,       -8.336953,       -5.568579,       -4.322762,       -3.347813,       -8.136154,       -2.436123,       -8.33354,       -4.232369,       -3.97251,       -4.98792,       -5.681152,       -5.900934
-7.538722,       -7.033038,       -8.183115,       -3.725269,       -6.88167,       -10.365314,       -4.520571,       -8.136154,       -1.955516,       -2.43018,       -8.340805,       -5.355803,       -4.109674,       -7.577327,       -6.921332,       -9.438167
-5.260089,       -2.89501,       -4.985797,       3.111328,       -4.397927,       -2.83973,       3.030664,       -2.436123,       -2.43018,       5.519457,       -3.752767,       1.682486,       2.325917,       -3.73793,       0.630533,       -2.482237
-8.518225,       -9.841055,       -4.452391,       -4.52578,       -10.397493,       -10.780047,       -4.308394,       -8.33354,       -8.340805,       -3.752767,       -2.240197,       -5.172777,       -5.305995,       -10.301183,       -4.364906,       -5.963354
-5.719589,       -4.010676,       -6.631674,       0.87116,       -5.487686,       -5.869784,       0.463827,       -4.232369,       -5.355803,       1.682486,       -5.172777,       3.108478,       0.216764,       -4.728095,       -1.199191,       -3.032991
-3.004715,       -3.973207,       -2.696889,       2.006324,       -2.848065,       -4.796336,       3.14992,       -3.97251,       -4.109674,       2.325917,       -5.305995,       0.216764,       4.424367,       -3.416238,       1.202786,       -1.728436
-12.472819,       -8.55829,       -9.189002,       -3.870116,       -7.558234,       -7.274677,       -4.279775,       -4.98792,       -7.577327,       -3.73793,       -10.301183,       -4.728095,       -3.416238,       -4.716621,       -3.949802,       -6.959667
-3.871386,       -6.210094,       -5.644804,       -0.129174,       -5.770089,       -6.604385,       1.466062,       -5.681152,       -6.921332,       0.630533,       -4.364906,       -1.199191,       1.202786,       -3.949802,       2.974974,       -3.158685
-8.876238,       -8.183037,       -8.588721,       -2.478503,       -9.039,       -5.308578,       -2.660992,       -5.900934,       -9.438167,       -2.482237,       -5.963354,       -3.032991,       -1.728436,       -6.959667,       -3.158685,       -1.300718
                    };
            return _data;
        }
    };
//    H: 3.3108
//    E: -2.4265


// ----------------------------------------------------------------------------
// Ribosum65_40 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.288709    0.194857    0.266007    0.250427
	struct Ribosum65_40 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum65_40>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.457223,       -0.851391,       -0.540369,       -0.505995
-0.851391,       0.874225,       -1.561815,       -0.339933
-0.540369,       -1.561815,       0.796179,       -0.783263
-0.505995,       -0.339933,       -0.783263,       0.926819
                    };
            return _data;
        }
    };
//    H: 0.2993
//    E: -0.0066

// ----------------------------------------------------------------------------
// Ribosum65_40N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum65_40N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum65_40N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.457223,       -0.851391,       -0.540369,       -0.505995,       -1.561815
-0.851391,       0.874225,       -1.561815,       -0.339933,       -1.561815
-0.540369,       -1.561815,       0.796179,       -0.783263,       -1.561815
-0.505995,       -0.339933,       -0.783263,       0.926819,       -1.561815
-1.561815,       -1.561815,       -1.561815,       -1.561815,       -1.561815
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum65_40d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum65_40d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum65_40d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-4.324515,       -6.34707,       -10.782877,       -4.036363,       -12.082048,       -12.06499,       -4.090445,       -12.976174,       -9.079873,       -5.151275,       -11.578046,       -4.930652,       -3.76667,       -13.310059,       -4.486265,       -10.857939
-6.34707,       -2.384727,       -10.633211,       -1.909411,       -11.743287,       -8.010596,       -4.466011,       -10.328397,       -8.764599,       -2.071401,       -8.936461,       -5.50012,       -4.217864,       -10.032004,       -5.551549,       -8.661509
-10.782877,       -10.633211,       -2.881518,       -5.194482,       -11.58369,       -14.489961,       -1.843842,       -11.178613,       -8.74642,       -5.222465,       -4.773199,       -8.409726,       -2.679379,       -10.074039,       -5.941416,       -7.080228
-4.036363,       -1.909411,       -5.194482,       3.650298,       -5.432868,       -2.079788,       2.498338,       -4.110472,       -3.931717,       3.422422,       -4.738411,       0.943748,       2.085749,       -4.335674,       -0.04932,       -3.080606
-12.082048,       -11.743287,       -11.58369,       -5.432868,       -6.964655,       -8.532395,       -3.018571,       -8.676614,       -9.099648,       -3.978258,       -10.810333,       -5.728172,       -3.095399,       -8.411759,       -6.829659,       -10.45025
-12.06499,       -8.010596,       -14.489961,       -2.079788,       -8.532395,       -3.521873,       -2.993335,       -5.453162,       -10.515065,       -2.544167,       -10.796053,       -4.855169,       -3.532959,       -7.584894,       -5.438914,       -4.983791
-4.090445,       -4.466011,       -1.843842,       2.498338,       -3.018571,       -2.993335,       5.406877,       -3.820677,       -4.348801,       3.241358,       -3.90735,       0.553499,       3.490818,       -3.849325,       1.533516,       -3.268514
-12.976174,       -10.328397,       -11.178613,       -4.110472,       -8.676614,       -5.453162,       -3.820677,       -4.174794,       -9.408173,       -2.894782,       -10.476726,       -4.776496,       -2.910925,       -6.768379,       -5.264931,       -7.138694
-9.079873,       -8.764599,       -8.74642,       -3.931717,       -9.099648,       -10.515065,       -4.348801,       -9.408173,       -3.158529,       -2.393972,       -10.677486,       -5.813157,       -3.478321,       -9.205834,       -8.654198,       -12.066749
-5.151275,       -2.071401,       -5.222465,       3.422422,       -3.978258,       -2.544167,       3.241358,       -2.894782,       -2.393972,       5.76567,       -3.380957,       1.923119,       2.7134,       -3.532329,       0.62354,       -2.63855
-11.578046,       -8.936461,       -4.773199,       -4.738411,       -10.810333,       -10.796053,       -3.90735,       -10.476726,       -10.677486,       -3.380957,       -2.612319,       -4.987291,       -4.940667,       -11.20211,       -4.300012,       -6.901706
-4.930652,       -5.50012,       -8.409726,       0.943748,       -5.728172,       -4.855169,       0.553499,       -4.776496,       -5.813157,       1.923119,       -4.987291,       2.918291,       0.387246,       -4.949363,       -1.245321,       -4.246113
-3.76667,       -4.217864,       -2.679379,       2.085749,       -3.095399,       -3.532959,       3.490818,       -2.910925,       -3.478321,       2.7134,       -4.940667,       0.387246,       4.045941,       -3.301908,       1.10863,       -1.932117
-13.310059,       -10.032004,       -10.074039,       -4.335674,       -8.411759,       -7.584894,       -3.849325,       -6.768379,       -9.205834,       -3.532329,       -11.20211,       -4.949363,       -3.301908,       -6.172462,       -3.410667,       -7.687684
-4.486265,       -5.551549,       -5.941416,       -0.04932,       -6.829659,       -5.438914,       1.533516,       -5.264931,       -8.654198,       0.62354,       -4.300012,       -1.245321,       1.10863,       -3.410667,       2.648377,       -2.518695
-10.857939,       -8.661509,       -7.080228,       -3.080606,       -10.45025,       -4.983791,       -3.268514,       -7.138694,       -12.066749,       -2.63855,       -6.901706,       -4.246113,       -1.932117,       -7.687684,       -2.518695,       -1.705758
                    };
            return _data;
        }
    };
//    H: 3.2789
//    E: -2.6269


// ----------------------------------------------------------------------------
// Ribosum85_55 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.259344    0.220363    0.301153    0.219139
	struct Ribosum85_55 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum85_55>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.193237,       -1.777623,       -1.387417,       -1.303486
-1.777623,       1.137091,       -2.384084,       -0.997886
-1.387417,       -2.384084,       1.013151,       -1.659189
-1.303486,       -0.997886,       -1.659189,       1.622654
                    };
            return _data;
        }
    };
//    H: 0.8411
//    E: -0.2274

// ----------------------------------------------------------------------------
// Ribosum85_55N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum85_55N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum85_55N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.193237,       -1.777623,       -1.387417,       -1.303486,       -2.384084
-1.777623,       1.137091,       -2.384084,       -0.997886,       -2.384084
-1.387417,       -2.384084,       1.013151,       -1.659189,       -2.384084
-1.303486,       -0.997886,       -1.659189,       1.622654,       -2.384084
-2.384084,       -2.384084,       -2.384084,       -2.384084,       -2.384084
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum85_55d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum85_55d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum85_55d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.550205,       -6.76114,       -8.318361,       -4.373653,       -8.839318,       -14.262642,       -4.480442,       -12.468346,       -6.957286,       -5.032707,       -8.492602,       -5.681735,       -4.008867,       -11.349517,       -6.140346,       -9.142814
-6.76114,       -2.058667,       -8.94768,       -2.015191,       -9.430898,       -8.80835,       -5.756935,       -10.07606,       -9.653326,       -3.804447,       -10.962508,       -4.295157,       -5.216297,       -8.682537,       -6.928763,       -7.784372
-8.318361,       -8.94768,       -0.844055,       -4.962592,       -10.337924,       -14.266132,       -4.430114,       -10.224709,       -8.321969,       -5.72083,       -5.322809,       -6.600452,       -4.877005,       -8.955172,       -5.922902,       -11.054885
-4.373653,       -2.015191,       -4.962592,       4.45673,       -5.514157,       -6.291328,       1.730863,       -5.101502,       -5.137243,       2.745334,       -5.53372,       0.61994,       1.654191,       -4.764198,       -0.473391,       -2.942215
-8.839318,       -9.430898,       -10.337924,       -5.514157,       -5.176181,       -10.162859,       -3.513999,       -8.511644,       -7.986785,       -5.78888,       -10.794193,       -7.574878,       -2.44304,       -7.14393,       -5.619155,       -8.432832
-14.262642,       -8.80835,       -14.266132,       -6.291328,       -10.162859,       -3.654339,       -5.426765,       -5.671979,       -12.291739,       -3.57763,       -12.48409,       -7.43403,       -6.364389,       -7.447558,       -7.807159,       -5.314689
-4.480442,       -5.756935,       -4.430114,       1.730863,       -3.513999,       -5.426765,       5.343121,       -4.937891,       -5.902053,       2.18714,       -4.654997,       -0.199093,       2.784805,       -4.90092,       1.334302,       -3.552458
-12.468346,       -10.07606,       -10.224709,       -5.101502,       -8.511644,       -5.671979,       -4.937891,       -2.361279,       -7.787426,       -5.512324,       -13.634485,       -5.353713,       -4.553081,       -3.920087,       -7.0413,       -5.247889
-6.957286,       -9.653326,       -8.321969,       -5.137243,       -7.986785,       -12.291739,       -5.902053,       -7.787426,       -1.070092,       -4.549705,       -8.709285,       -5.975418,       -5.739436,       -6.722766,       -7.580211,       -11.403792
-5.032707,       -3.804447,       -5.72083,       2.745334,       -5.78888,       -3.57763,       2.18714,       -5.512324,       -4.549705,       5.603028,       -4.027308,       1.262291,       1.668162,       -4.465817,       -0.045668,       -3.687786
-8.492602,       -10.962508,       -5.322809,       -5.53372,       -10.794193,       -12.48409,       -4.654997,       -13.634485,       -8.709285,       -4.027308,       -2.002064,       -5.586184,       -5.601423,       -11.91073,       -4.307557,       -10.820515
-5.681735,       -4.295157,       -6.600452,       0.61994,       -7.574878,       -7.43403,       -0.199093,       -5.353713,       -5.975418,       1.262291,       -5.586184,       3.439454,       -0.502583,       -5.116977,       -2.037093,       -4.322698
-4.008867,       -5.216297,       -4.877005,       1.654191,       -2.44304,       -6.364389,       2.784805,       -4.553081,       -5.739436,       1.668162,       -5.601423,       -0.502583,       4.933143,       -3.032819,       1.156416,       -3.307716
-11.349517,       -8.682537,       -8.955172,       -4.764198,       -7.14393,       -7.447558,       -4.90092,       -3.920087,       -6.722766,       -4.465817,       -11.91073,       -5.116977,       -3.032819,       -3.31655,       -4.678669,       -6.046336
-6.140346,       -6.928763,       -5.922902,       -0.473391,       -5.619155,       -7.807159,       1.334302,       -7.0413,       -7.580211,       -0.045668,       -4.307557,       -2.037093,       1.156416,       -4.678669,       3.343639,       -4.036184
-9.142814,       -7.784372,       -11.054885,       -2.942215,       -8.432832,       -5.314689,       -3.552458,       -5.247889,       -11.403792,       -3.687786,       -10.820515,       -4.322698,       -3.307716,       -6.046336,       -4.036184,       -0.110619
                    };
            return _data;
        }
    };
//    H: 3.7205
//    E: -2.7284


// ----------------------------------------------------------------------------
// Ribosum100_70 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.256139    0.220411    0.300635    0.222816
	struct Ribosum100_70 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum100_70>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.320541,       -2.231425,       -1.833467,       -1.792873
-2.231425,       1.269088,       -2.824501,       -1.212901
-1.833467,       -2.824501,       1.117602,       -2.102652
-1.792873,       -1.212901,       -2.102652,       1.746682
                    };
            return _data;
        }
    };
//    H: 1.0575
//    E: -0.3554

// ----------------------------------------------------------------------------
// Ribosum100_70N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum100_70N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum100_70N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.320541,       -2.231425,       -1.833467,       -1.792873,       -2.824501
-2.231425,       1.269088,       -2.824501,       -1.212901,       -2.824501
-1.833467,       -2.824501,       1.117602,       -2.102652,       -2.824501
-1.792873,       -1.212901,       -2.102652,       1.746682,       -2.824501
-2.824501,       -2.824501,       -2.824501,       -2.824501,       -2.824501
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum100_70d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum100_70d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum100_70d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.703145,       -8.211591,       -8.040203,       -4.756908,       -10.012751,       -14.266123,       -5.254592,       -12.088621,       -5.977747,       -4.739147,       -9.943507,       -6.361926,       -4.748701,       -12.079609,       -6.331764,       -8.53774
-8.211591,       -1.725132,       -9.20356,       -2.105388,       -9.994887,       -9.178498,       -5.924383,       -11.162301,       -10.288542,       -3.827728,       -12.644759,       -5.98255,       -6.108603,       -8.820282,       -7.719497,       -7.963526
-8.040203,       -9.20356,       -0.603006,       -6.014027,       -10.679351,       -14.944294,       -4.932505,       -8.737385,       -9.287549,       -6.441716,       -5.497689,       -6.951016,       -6.691594,       -8.158144,       -5.724277,       -10.520543
-4.756908,       -2.105388,       -6.014027,       4.667685,       -6.247342,       -7.141924,       1.386009,       -5.847668,       -6.36341,       2.497235,       -6.338763,       0.408832,       1.321993,       -5.60362,       -0.788403,       -3.103611
-10.012751,       -9.994887,       -10.679351,       -6.247342,       -5.445048,       -11.501062,       -3.922886,       -7.530077,       -8.665794,       -6.238581,       -11.664405,       -8.535328,       -2.630317,       -7.341975,       -6.306437,       -8.229087
-14.266123,       -9.178498,       -14.944294,       -7.141924,       -11.501062,       -2.598791,       -5.391205,       -6.214233,       -13.820173,       -4.132315,       -12.298865,       -8.271675,       -7.465565,       -8.472784,       -8.996709,       -6.311603
-5.254592,       -5.924383,       -4.932505,       1.386009,       -3.922886,       -5.391205,       5.471921,       -4.931516,       -6.672951,       1.691269,       -4.507889,       -0.67152,       2.489035,       -4.64871,       1.122412,       -4.05272
-12.088621,       -11.162301,       -8.737385,       -5.847668,       -7.530077,       -6.214233,       -4.931516,       -1.684884,       -6.453816,       -6.306902,       -13.424512,       -6.551935,       -4.322171,       -3.996025,       -7.998916,       -4.644843
-5.977747,       -10.288542,       -9.287549,       -6.36341,       -8.665794,       -13.820173,       -6.672951,       -6.453816,       -0.916635,       -5.504109,       -9.760613,       -6.712992,       -6.094447,       -6.26789,       -7.653393,       -11.758867
-4.739147,       -3.827728,       -6.441716,       2.497235,       -6.238581,       -4.132315,       1.691269,       -6.306902,       -5.504109,       5.672192,       -4.920262,       0.985053,       1.195213,       -4.95725,       -0.276364,       -4.475588
-9.943507,       -12.644759,       -5.497689,       -6.338763,       -11.664405,       -12.298865,       -4.507889,       -13.424512,       -9.760613,       -4.920262,       -2.097276,       -5.856316,       -6.345562,       -11.842313,       -4.121574,       -11.746757
-6.361926,       -5.98255,       -6.951016,       0.408832,       -8.535328,       -8.271675,       -0.67152,       -6.551935,       -6.712992,       0.985053,       -5.856316,       3.591458,       -0.948852,       -5.505561,       -2.162804,       -5.118361
-4.748701,       -6.108603,       -6.691594,       1.321993,       -2.630317,       -7.465565,       2.489035,       -4.322171,       -6.094447,       1.195213,       -6.345562,       -0.948852,       5.087487,       -2.990877,       0.941894,       -3.783171
-12.079609,       -8.820282,       -8.158144,       -5.60362,       -7.341975,       -8.472784,       -4.64871,       -3.996025,       -6.26789,       -4.95725,       -11.842313,       -5.505561,       -2.990877,       -3.318828,       -5.118118,       -5.083615
-6.331764,       -7.719497,       -5.724277,       -0.788403,       -6.306437,       -8.996709,       1.122412,       -7.998916,       -7.653393,       -0.276364,       -4.121574,       -2.162804,       0.941894,       -5.118118,       3.474026,       -4.575589
-8.53774,       -7.963526,       -10.520543,       -3.103611,       -8.229087,       -6.311603,       -4.05272,       -4.644843,       -11.758867,       -4.475588,       -11.746757,       -5.118361,       -3.783171,       -5.083615,       -4.575589,       0.159259
                    };
            return _data;
        }
    };
//    H: 3.9326
//    E: -2.9031


// ----------------------------------------------------------------------------
// Ribosum90_30 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.260678    0.218719    0.296609    0.223993
	struct Ribosum90_30 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum90_30>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.93758,       -1.296921,       -0.889804,       -0.925552
-1.296921,       0.978998,       -1.671104,       -0.604338
-0.889804,       -1.671104,       0.843501,       -1.087336
-0.925552,       -0.604338,       -1.087336,       1.356328
                    };
            return _data;
        }
    };
//    H: 0.5377
//    E: -0.0863

// ----------------------------------------------------------------------------
// Ribosum90_30N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum90_30N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum90_30N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.93758,       -1.296921,       -0.889804,       -0.925552,       -1.671104
-1.296921,       0.978998,       -1.671104,       -0.604338,       -1.671104
-0.889804,       -1.671104,       0.843501,       -1.087336,       -1.671104
-0.925552,       -0.604338,       -1.087336,       1.356328,       -1.671104
-1.671104,       -1.671104,       -1.671104,       -1.671104,       -1.671104
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum90_30d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum90_30d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum90_30d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.977945,       -8.15184,       -8.795526,       -4.705614,       -9.721865,       -13.048848,       -3.773426,       -12.186424,       -7.20023,       -5.11412,       -9.257957,       -6.137568,       -2.508329,       -11.297832,       -3.651482,       -8.935713
-8.15184,       -2.148227,       -9.268002,       -1.618315,       -10.22586,       -8.719379,       -5.264178,       -10.344152,       -7.790114,       -2.739545,       -10.032665,       -4.581666,       -5.224272,       -8.804034,       -6.966455,       -8.161283
-8.795526,       -9.268002,       -1.37958,       -5.640008,       -9.727013,       -14.714956,       -2.524617,       -9.402889,       -9.311596,       -5.890965,       -4.54607,       -7.067918,       -2.832882,       -8.018564,       -5.769898,       -9.993828
-4.705614,       -1.618315,       -5.640008,       4.180265,       -5.465875,       -2.552387,       2.084474,       -4.036368,       -3.918418,       2.911613,       -4.704882,       0.760314,       1.916236,       -4.204834,       -0.362239,       -2.38838
-9.721865,       -10.22586,       -9.727013,       -5.465875,       -6.055046,       -11.242032,       -2.99723,       -8.254951,       -7.810297,       -5.246229,       -11.107336,       -6.104922,       -2.81836,       -7.573677,       -6.090903,       -8.844642
-13.048848,       -8.719379,       -14.714956,       -2.552387,       -11.242032,       -3.863565,       -4.981628,       -6.830142,       -12.226981,       -3.519758,       -12.093108,       -6.708662,       -6.052339,       -8.447424,       -8.001502,       -6.392516
-3.773426,       -5.264178,       -2.524617,       2.084474,       -2.99723,       -4.981628,       5.203709,       -4.32617,       -5.74849,       2.842501,       -4.61552,       0.299444,       2.996129,       -4.318939,       1.262035,       -3.00652
-12.186424,       -10.344152,       -9.402889,       -4.036368,       -8.254951,       -6.830142,       -4.32617,       -2.783317,       -7.854802,       -2.204952,       -9.083559,       -4.451986,       -4.362091,       -4.619861,       -6.36557,       -5.370787
-7.20023,       -7.790114,       -9.311596,       -3.918418,       -7.810297,       -12.226981,       -5.74849,       -7.854802,       -1.677943,       -2.640046,       -9.102957,       -6.401223,       -4.626179,       -7.177475,       -7.766547,       -10.262201
-5.11412,       -2.739545,       -5.890965,       2.911613,       -5.246229,       -3.519758,       2.842501,       -2.204952,       -2.640046,       5.499012,       -4.533673,       1.447073,       1.993532,       -3.939841,       0.350393,       -2.839185
-9.257957,       -10.032665,       -4.54607,       -4.704882,       -11.107336,       -12.093108,       -4.61552,       -9.083559,       -9.102957,       -4.533673,       -2.118941,       -5.690383,       -6.1047,       -10.665449,       -4.265754,       -5.119855
-6.137568,       -4.581666,       -7.067918,       0.760314,       -6.104922,       -6.708662,       0.299444,       -4.451986,       -6.401223,       1.447073,       -5.690383,       3.289295,       0.092178,       -4.728148,       -1.329941,       -2.680333
-2.508329,       -5.224272,       -2.832882,       1.916236,       -2.81836,       -6.052339,       2.996129,       -4.362091,       -4.626179,       1.993532,       -6.1047,       0.092178,       4.68996,       -3.498069,       1.063939,       -1.620816
-11.297832,       -8.804034,       -8.018564,       -4.204834,       -7.573677,       -8.447424,       -4.318939,       -4.619861,       -7.177475,       -3.939841,       -10.665449,       -4.728148,       -3.498069,       -4.010843,       -4.27946,       -6.181089
-3.651482,       -6.966455,       -5.769898,       -0.362239,       -6.090903,       -8.001502,       1.262035,       -6.36557,       -7.766547,       0.350393,       -4.265754,       -1.329941,       1.063939,       -4.27946,       3.165202,       -3.655476
-8.935713,       -8.161283,       -9.993828,       -2.38838,       -8.844642,       -6.392516,       -3.00652,       -5.370787,       -10.262201,       -2.839185,       -5.119855,       -2.680333,       -1.620816,       -6.181089,       -3.655476,       -0.775393
                    };
            return _data;
        }
    };
//    H: 3.4430
//    E: -2.5635


// ----------------------------------------------------------------------------
// Ribosum80 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.267892    0.213117    0.288337    0.230654
	struct Ribosum80 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum80>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.300649,       -2.808815,       -2.553742,       -2.495199
-2.808815,       1.54996,       -3.190544,       -1.549013
-2.553742,       -3.190544,       1.298684,       -2.724668
-2.495199,       -1.549013,       -2.724668,       1.770859
                    };
            return _data;
        }
    };
//    H: 0.4112
//    E: -0.0404

// ----------------------------------------------------------------------------
// Ribosum80N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum80N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum80N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.300649,       -2.808815,       -2.553742,       -2.495199,       -3.190544
-2.808815,       1.54996,       -3.190544,       -1.549013,       -3.190544
-2.553742,       -3.190544,       1.298684,       -2.724668,       -3.190544
-2.495199,       -1.549013,       -2.724668,       1.770859,       -3.190544
-3.190544,       -3.190544,       -3.190544,       -3.190544,       -3.190544
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum80d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum80d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum80d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.539432,       -7.590322,       -8.073846,       -4.469009,       -10.110594,       -15.350293,       -4.605988,       -12.214108,       -6.198828,       -5.350877,       -8.070475,       -5.722538,       -4.17293,       -12.56039,       -7.087744,       -7.374248
-7.590322,       -1.824698,       -9.834644,       -1.827782,       -8.695714,       -9.889655,       -6.22914,       -9.718467,       -10.924192,       -3.961356,       -11.2733,       -5.190459,       -5.153736,       -7.977698,       -7.06764,       -7.297175
-8.073846,       -9.834644,       -0.932609,       -5.639223,       -9.868979,       -14.616858,       -4.250419,       -10.434834,       -8.865969,       -6.064918,       -4.990023,       -6.735776,       -4.973881,       -8.609444,       -5.79424,       -11.128745
-4.469009,       -1.827782,       -5.639223,       4.47922,       -5.209219,       -6.76394,       1.656431,       -5.104869,       -5.230235,       2.720412,       -5.648157,       0.703867,       1.545417,       -4.571378,       -0.45766,       -2.707641
-10.110594,       -8.695714,       -9.868979,       -5.209219,       -4.858985,       -13.824309,       -3.438715,       -8.720286,       -7.234536,       -6.212093,       -12.060227,       -7.727793,       -2.383247,       -6.954462,       -5.516708,       -8.462881
-15.350293,       -9.889655,       -14.616858,       -6.76394,       -13.824309,       -3.109679,       -6.028958,       -5.868635,       -11.634522,       -3.304979,       -12.28584,       -8.330991,       -7.275222,       -6.467858,       -8.721698,       -4.643464
-4.605988,       -6.22914,       -4.250419,       1.656431,       -3.438715,       -6.028958,       5.373913,       -4.721639,       -5.559626,       2.066343,       -4.635651,       -0.267582,       2.728001,       -4.86137,       1.338728,       -3.686681
-12.214108,       -9.718467,       -10.434834,       -5.104869,       -8.720286,       -5.868635,       -4.721639,       -2.266349,       -7.058957,       -6.426334,       -12.859818,       -5.636526,       -4.495862,       -3.968336,       -6.867033,       -4.739407
-6.198828,       -10.924192,       -8.865969,       -5.230235,       -7.234536,       -11.634522,       -5.559626,       -7.058957,       -1.024431,       -5.277549,       -7.39896,       -5.685353,       -5.542046,       -6.381743,       -6.841952,       -11.707113
-5.350877,       -3.961356,       -6.064918,       2.720412,       -6.212093,       -3.304979,       2.066343,       -6.426334,       -5.277549,       5.620506,       -4.143658,       1.249048,       1.608067,       -4.582172,       -0.002684,       -3.601243
-8.070475,       -11.2733,       -4.990023,       -5.648157,       -12.060227,       -12.28584,       -4.635651,       -12.859818,       -7.39896,       -4.143658,       -2.099462,       -5.344964,       -5.669779,       -11.799445,       -4.313019,       -11.386242
-5.722538,       -5.190459,       -6.735776,       0.703867,       -7.727793,       -8.330991,       -0.267582,       -5.636526,       -5.685353,       1.249048,       -5.344964,       3.438393,       -0.507126,       -5.794829,       -2.058801,       -4.454194
-4.17293,       -5.153736,       -4.973881,       1.545417,       -2.383247,       -7.275222,       2.728001,       -4.495862,       -5.542046,       1.608067,       -5.669779,       -0.507126,       4.947173,       -3.153331,       1.206587,       -3.150603
-12.56039,       -7.977698,       -8.609444,       -4.571378,       -6.954462,       -6.467858,       -4.86137,       -3.968336,       -6.381743,       -4.582172,       -11.799445,       -5.794829,       -3.153331,       -3.515066,       -5.140607,       -5.786982
-7.087744,       -7.06764,       -5.79424,       -0.45766,       -5.516708,       -8.721698,       1.338728,       -6.867033,       -6.841952,       -0.002684,       -4.313019,       -2.058801,       1.206587,       -5.140607,       3.33804,       -4.331371
-7.374248,       -7.297175,       -11.128745,       -2.707641,       -8.462881,       -4.643464,       -3.686681,       -4.739407,       -11.707113,       -3.601243,       -11.386242,       -4.454194,       -3.150603,       -5.786982,       -4.331371,       -0.015489
                    };
            return _data;
        }
    };
//    H: 3.3108
//    E: -2.4265


// ----------------------------------------------------------------------------
// Ribosum60_95 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.327040    0.161969    0.221916    0.289075
	struct Ribosum60_95 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum60_95>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.990286,       -5.941408,       -5.501211,       -5.318322
-5.941408,       2.18911,       -5.322768,       -4.17137
-5.501211,       -5.322768,       1.863995,       -5.606217
-5.318322,       -4.17137,       -5.606217,       1.620006
                    };
            return _data;
        }
    };
//    H: 1.7588
//    E: -1.4656

// ----------------------------------------------------------------------------
// Ribosum60_95N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum60_95N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum60_95N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.990286,       -5.941408,       -5.501211,       -5.318322,       -5.941408
-5.941408,       2.18911,       -5.322768,       -4.17137,       -5.941408
-5.501211,       -5.322768,       1.863995,       -5.606217,       -5.941408
-5.318322,       -4.17137,       -5.606217,       1.620006,       -5.941408
-5.941408,       -5.941408,       -5.941408,       -5.941408,       -5.941408
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum60_95d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum60_95d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum60_95d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.681443,       -9.157538,       -9.468097,       -9.37659,       -999.0,       -999.0,       -12.142402,       -13.693756,       -8.474329,       -9.203803,       -10.557168,       -12.447611,       -9.741722,       -999.0,       -11.624489,       -999.0
-9.157538,       -0.065535,       -10.0644,       -6.358366,       -14.858033,       -9.200426,       -11.713614,       -999.0,       -999.0,       -1.6845,       -11.752871,       -9.379413,       -12.234325,       -8.979566,       -11.964375,       -13.193801
-9.468097,       -10.0644,       -1.049695,       -9.253233,       -12.504972,       -999.0,       -6.649583,       -999.0,       -9.883978,       -10.29344,       -9.479245,       -12.78124,       -10.790498,       -12.326945,       -9.049436,       -14.385061
-9.37659,       -6.358366,       -9.253233,       4.681043,       -11.234325,       -12.358078,       -3.631966,       -8.248943,       -14.563088,       -1.766749,       -9.112861,       -2.37742,       -3.797233,       -9.608838,       -6.2118,       -7.630353
-999.0,       -14.858033,       -12.504972,       -11.234325,       -2.471093,       -9.937392,       -4.70799,       -12.680006,       -13.312327,       -10.839145,       -10.109015,       -13.549338,       -6.345028,       -10.358078,       -9.776748,       -12.930767
-999.0,       -9.200426,       -999.0,       -12.358078,       -9.937392,       -0.358857,       -5.354089,       -6.688976,       -12.713614,       -5.296142,       -13.739121,       -10.661118,       -9.510081,       -9.759365,       -10.950625,       -999.0
-12.142402,       -11.713614,       -6.649583,       -3.631966,       -4.70799,       -5.354089,       7.077572,       -5.858455,       -9.665408,       -1.803219,       -5.76715,       -4.2129,       -1.725572,       -9.313195,       -0.890972,       -8.890184
-13.693756,       -999.0,       -999.0,       -8.248943,       -12.680006,       -6.688976,       -5.858455,       -1.314627,       -12.549338,       -7.930725,       -13.574844,       -7.816722,       -10.306276,       -9.643998,       -9.496841,       -9.250239
-8.474329,       -999.0,       -9.883978,       -14.563088,       -13.312327,       -12.713614,       -9.665408,       -12.549338,       -1.179664,       -6.845981,       -9.683604,       -8.137383,       -10.447611,       -999.0,       -11.888155,       -999.0
-9.203803,       -1.6845,       -10.29344,       -1.766749,       -10.839145,       -5.296142,       -1.803219,       -7.930725,       -6.845981,       7.211991,       -2.5141,       -0.85599,       -4.309341,       -5.550694,       -4.280223,       -8.616423
-10.557168,       -11.752871,       -9.479245,       -9.112861,       -10.109015,       -13.739121,       -5.76715,       -13.574844,       -9.683604,       -2.5141,       -0.732227,       -7.537285,       -15.588594,       -999.0,       -8.110275,       -15.410567
-12.447611,       -9.379413,       -12.78124,       -2.37742,       -13.549338,       -10.661118,       -4.2129,       -7.816722,       -8.137383,       -0.85599,       -7.537285,       3.895929,       -6.71028,       -11.255833,       -6.625933,       -8.497376
-9.741722,       -12.234325,       -10.790498,       -3.797233,       -6.345028,       -9.510081,       -1.725572,       -10.306276,       -10.447611,       -4.309341,       -15.588594,       -6.71028,       4.773986,       -5.33349,       -2.998704,       -7.61336
-999.0,       -8.979566,       -12.326945,       -9.608838,       -10.358078,       -9.759365,       -9.313195,       -9.643998,       -999.0,       -5.550694,       -999.0,       -11.255833,       -5.33349,       0.204238,       -5.446003,       -6.870096
-11.624489,       -11.964375,       -9.049436,       -6.2118,       -9.776748,       -10.950625,       -0.890972,       -9.496841,       -11.888155,       -4.280223,       -8.110275,       -6.625933,       -2.998704,       -5.446003,       3.743334,       -8.715181
-999.0,       -13.193801,       -14.385061,       -7.630353,       -12.930767,       -999.0,       -8.890184,       -9.250239,       -999.0,       -8.616423,       -15.410567,       -8.497376,       -7.61336,       -6.870096,       -8.715181,       -0.176465
                    };
            return _data;
        }
    };
//    H: 5.2326
//    E: -51.6730


// ----------------------------------------------------------------------------
// Ribosum95_55 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.257351    0.220669    0.300896    0.221085
	struct Ribosum95_55 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum95_55>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.264083,       -1.993093,       -1.613481,       -1.542942
-1.993093,       1.207293,       -2.575096,       -1.107716
-1.613481,       -2.575096,       1.06694,       -1.860443
-1.542942,       -1.107716,       -1.860443,       1.686763
                    };
            return _data;
        }
    };
//    H: 0.9493
//    E: -0.2869

// ----------------------------------------------------------------------------
// Ribosum95_55N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum95_55N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum95_55N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.264083,       -1.993093,       -1.613481,       -1.542942,       -2.575096
-1.993093,       1.207293,       -2.575096,       -1.107716,       -2.575096
-1.613481,       -2.575096,       1.06694,       -1.860443,       -2.575096
-1.542942,       -1.107716,       -1.860443,       1.686763,       -2.575096
-2.575096,       -2.575096,       -2.575096,       -2.575096,       -2.575096
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum95_55d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum95_55d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum95_55d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.100601,       -7.881291,       -8.597064,       -4.6721,       -9.306714,       -13.889132,       -4.756214,       -11.926448,       -6.505684,       -4.79027,       -9.750259,       -6.067665,       -4.498726,       -11.485364,       -6.161361,       -8.970566
-7.881291,       -1.945432,       -9.009228,       -2.105119,       -9.836664,       -9.140719,       -5.759887,       -10.6223,       -10.07676,       -3.751635,       -11.795174,       -4.54217,       -5.600256,       -8.64904,       -7.265232,       -7.818984
-8.597064,       -9.009228,       -0.700638,       -5.542724,       -10.212056,       -14.320451,       -4.627765,       -9.186324,       -9.118221,       -6.153941,       -5.511552,       -6.866189,       -5.208073,       -8.26539,       -5.741266,       -10.341633
-4.6721,       -2.105119,       -5.542724,       4.570415,       -5.866584,       -6.573584,       1.590806,       -5.404424,       -5.72586,       2.607715,       -5.85899,       0.496325,       1.527553,       -5.21521,       -0.654353,       -3.052231
-9.306714,       -9.836664,       -10.212056,       -5.866584,       -5.533846,       -10.822629,       -3.791877,       -7.753226,       -8.469071,       -5.944223,       -10.993139,       -7.885612,       -2.667387,       -7.219968,       -6.07432,       -8.337097
-13.889132,       -9.140719,       -14.320451,       -6.573584,       -10.822629,       -3.047401,       -5.248837,       -6.283066,       -13.294611,       -3.948486,       -11.86058,       -7.658321,       -6.850342,       -7.944295,       -8.333358,       -5.862389
-4.756214,       -5.759887,       -4.627765,       1.590806,       -3.791877,       -5.248837,       5.401351,       -4.872971,       -6.196287,       1.986879,       -4.581151,       -0.436037,       2.633089,       -4.629531,       1.204205,       -3.664378
-11.926448,       -10.6223,       -9.186324,       -5.404424,       -7.753226,       -6.283066,       -4.872971,       -1.969596,       -7.162443,       -5.666374,       -13.35887,       -5.73125,       -4.364834,       -3.879693,       -7.355416,       -4.671433
-6.505684,       -10.07676,       -9.118221,       -5.72586,       -8.469071,       -13.294611,       -6.196287,       -7.162443,       -0.989832,       -4.879258,       -9.251902,       -6.318094,       -5.955525,       -6.644352,       -7.580494,       -11.552199
-4.79027,       -3.751635,       -6.153941,       2.607715,       -5.944223,       -3.948486,       1.986879,       -5.666374,       -4.879258,       5.63393,       -4.458496,       1.125995,       1.460123,       -4.774244,       -0.186433,       -4.016484
-9.750259,       -11.795174,       -5.511552,       -5.85899,       -10.993139,       -11.86058,       -4.581151,       -13.35887,       -9.251902,       -4.458496,       -2.030731,       -5.587208,       -6.013031,       -11.39872,       -4.222031,       -11.113958
-6.067665,       -4.54217,       -6.866189,       0.496325,       -7.885612,       -7.658321,       -0.436037,       -5.73125,       -6.318094,       1.125995,       -5.587208,       3.523704,       -0.688306,       -5.085652,       -2.134423,       -4.852544
-4.498726,       -5.600256,       -5.208073,       1.527553,       -2.667387,       -6.850342,       2.633089,       -4.364834,       -5.955525,       1.460123,       -6.013031,       -0.688306,       5.021018,       -3.078977,       1.035093,       -3.450502
-11.485364,       -8.64904,       -8.26539,       -5.21521,       -7.219968,       -7.944295,       -4.629531,       -3.879693,       -6.644352,       -4.774244,       -11.39872,       -5.085652,       -3.078977,       -3.294627,       -4.755745,       -5.310544
-6.161361,       -7.265232,       -5.741266,       -0.654353,       -6.07432,       -8.333358,       1.204205,       -7.355416,       -7.580494,       -0.186433,       -4.222031,       -2.134423,       1.035093,       -4.755745,       3.419178,       -4.112126
-8.970566,       -7.818984,       -10.341633,       -3.052231,       -8.337097,       -5.862389,       -3.664378,       -4.671433,       -11.552199,       -4.016484,       -11.113958,       -4.852544,       -3.450502,       -5.310544,       -4.112126,       0.022383
                    };
            return _data;
        }
    };
//    H: 3.8216
//    E: -2.7956


// ----------------------------------------------------------------------------
// Ribosum60_45 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.288719    0.193486    0.266385    0.251410
	struct Ribosum60_45 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum60_45>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.555338,       -1.022031,       -0.638619,       -0.609606
-1.022031,       0.915514,       -1.705318,       -0.383592
-0.638619,       -1.705318,       0.857559,       -0.894027
-0.609606,       -0.383592,       -0.894027,       1.024594
                    };
            return _data;
        }
    };
//    H: 0.3634
//    E: -0.0273

// ----------------------------------------------------------------------------
// Ribosum60_45N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum60_45N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum60_45N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.555338,       -1.022031,       -0.638619,       -0.609606,       -1.705318
-1.022031,       0.915514,       -1.705318,       -0.383592,       -1.705318
-0.638619,       -1.705318,       0.857559,       -0.894027,       -1.705318
-0.609606,       -0.383592,       -0.894027,       1.024594,       -1.705318
-1.705318,       -1.705318,       -1.705318,       -1.705318,       -1.705318
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum60_45d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum60_45d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum60_45d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-4.360169,       -9.886956,       -10.276344,       -4.052277,       -11.44063,       -14.552642,       -4.631272,       -13.548448,       -8.075652,       -5.40214,       -10.814104,       -7.692272,       -3.833237,       -13.719063,       -4.557844,       -10.620797
-9.886956,       -2.936625,       -10.69676,       -1.900795,       -11.639375,       -9.422985,       -4.286311,       -11.776066,       -8.282664,       -1.840854,       -10.902728,       -5.757615,       -4.81422,       -9.882747,       -3.914336,       -9.728813
-10.276344,       -10.69676,       -2.456143,       -6.099948,       -11.765745,       -15.935394,       -2.231731,       -10.485678,       -10.536713,       -5.947867,       -5.039868,       -7.997331,       -2.016838,       -9.132041,       -6.831007,       -11.187192
-4.052277,       -1.900795,       -6.099948,       3.688227,       -5.853737,       -3.067126,       2.545098,       -5.285093,       -4.601124,       3.425398,       -5.429262,       0.865719,       2.0756,       -4.58797,       0.067074,       -3.475505
-11.44063,       -11.639375,       -11.765745,       -5.853737,       -7.0068,       -12.448101,       -3.59959,       -9.357092,       -8.885772,       -5.688169,       -12.280809,       -6.868192,       -3.460075,       -9.019951,       -7.137502,       -10.286844
-14.552642,       -9.422985,       -15.935394,       -3.067126,       -12.448101,       -3.859266,       -4.303739,       -7.591476,       -13.672925,       -3.708053,       -12.524659,       -7.714744,       -6.531461,       -9.703563,       -8.858043,       -7.741805
-4.631272,       -4.286311,       -2.231731,       2.545098,       -3.59959,       -4.303739,       5.558153,       -4.895054,       -5.994706,       3.072791,       -4.937507,       0.860651,       3.323509,       -3.967729,       1.255127,       -3.661604
-13.548448,       -11.776066,       -10.485678,       -5.285093,       -9.357092,       -7.591476,       -4.895054,       -3.647956,       -8.238504,       -2.973925,       -9.962466,       -5.322248,       -4.011515,       -5.740665,       -7.642217,       -6.869017
-8.075652,       -8.282664,       -10.536713,       -4.601124,       -8.885772,       -13.672925,       -5.994706,       -8.238504,       -2.752719,       -2.898812,       -10.770834,       -5.860745,       -2.885755,       -8.067491,       -8.573355,       -11.628683
-5.40214,       -1.840854,       -5.947867,       3.425398,       -5.688169,       -3.708053,       3.072791,       -2.973925,       -2.898812,       5.87738,       -3.891611,       1.608886,       2.543003,       -3.816393,       0.532832,       -4.111021
-10.814104,       -10.902728,       -5.039868,       -5.429262,       -12.280809,       -12.524659,       -4.937507,       -9.962466,       -10.770834,       -3.891611,       -2.800794,       -5.404119,       -6.424932,       -11.312388,       -5.111521,       -6.160798
-7.692272,       -5.757615,       -7.997331,       0.865719,       -6.868192,       -7.714744,       0.860651,       -5.322248,       -5.860745,       1.608886,       -5.404119,       2.944371,       0.341448,       -4.973322,       -1.75738,       -3.886287
-3.833237,       -4.81422,       -2.016838,       2.0756,       -3.460075,       -6.531461,       3.323509,       -4.011515,       -2.885755,       2.543003,       -6.424932,       0.341448,       4.187324,       -2.72943,       0.885529,       -1.785732
-13.719063,       -9.882747,       -9.132041,       -4.58797,       -9.019951,       -9.703563,       -3.967729,       -5.740665,       -8.067491,       -3.816393,       -11.312388,       -4.973322,       -2.72943,       -5.09285,       -3.588962,       -7.233469
-4.557844,       -3.914336,       -6.831007,       0.067074,       -7.137502,       -8.858043,       1.255127,       -7.642217,       -8.573355,       0.532832,       -5.111521,       -1.75738,       0.885529,       -3.588962,       2.80552,       -3.271974
-10.620797,       -9.728813,       -11.187192,       -3.475505,       -10.286844,       -7.741805,       -3.661604,       -6.869017,       -11.628683,       -4.111021,       -6.160798,       -3.886287,       -1.785732,       -7.233469,       -3.271974,       -2.028815
                    };
            return _data;
        }
    };
//    H: 3.4146
//    E: -2.8359


// ----------------------------------------------------------------------------
// Ribosum75_25 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.279400    0.201371    0.273597    0.245632
	struct Ribosum75_25 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum75_25>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.526075,       -0.895653,       -0.600491,       -0.559602
-0.895653,       0.89022,       -1.374978,       -0.337875
-0.600491,       -1.374978,       0.779231,       -0.798464
-0.559602,       -0.337875,       -0.798464,       0.98071
                    };
            return _data;
        }
    };
//    H: 0.3135
//    E: -0.0081

// ----------------------------------------------------------------------------
// Ribosum75_25N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum75_25N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum75_25N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.526075,       -0.895653,       -0.600491,       -0.559602,       -1.374978
-0.895653,       0.89022,       -1.374978,       -0.337875,       -1.374978
-0.600491,       -1.374978,       0.779231,       -0.798464,       -1.374978
-0.559602,       -0.337875,       -0.798464,       0.98071,       -1.374978
-1.374978,       -1.374978,       -1.374978,       -1.374978,       -1.374978
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum75_25d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum75_25d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum75_25d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-3.68564,       -6.120801,       -11.007995,       -4.480758,       -10.593527,       -12.629466,       -3.498286,       -11.904096,       -9.582377,       -4.95671,       -12.343126,       -5.389749,       -3.251703,       -12.611937,       -3.800291,       -10.807521
-6.120801,       -1.65707,       -9.125449,       -1.713159,       -9.786788,       -6.518941,       -4.318311,       -9.4023,       -6.332919,       -2.542494,       -9.168148,       -3.818767,       -3.605786,       -9.780669,       -5.863633,       -8.463481
-11.007995,       -9.125449,       -2.513652,       -4.289079,       -10.269579,       -12.730633,       -1.725424,       -10.456927,       -7.399875,       -4.0862,       -4.263663,       -5.878619,       -2.52552,       -10.207834,       -5.829682,       -8.241941
-4.480758,       -1.713159,       -4.289079,       3.790888,       -4.873697,       -2.333646,       2.39799,       -3.436355,       -3.726114,       3.279757,       -4.282177,       0.926249,       2.011669,       -4.298434,       -0.006243,       -2.749085
-10.593527,       -9.786788,       -10.269579,       -4.873697,       -5.67521,       -9.867131,       -2.245289,       -8.593783,       -6.537225,       -4.172453,       -10.591893,       -5.347386,       -3.092834,       -8.514333,       -6.033165,       -8.92966
-12.629466,       -6.518941,       -12.730633,       -2.333646,       -9.867131,       -3.110012,       -3.356347,       -5.054785,       -9.418352,       -2.463322,       -10.92898,       -5.294004,       -4.396319,       -7.610335,       -6.311129,       -5.352738
-3.498286,       -4.318311,       -1.725424,       2.39799,       -2.245289,       -3.356347,       5.290537,       -3.919925,       -4.234705,       3.199554,       -3.9091,       0.640814,       3.316591,       -4.100113,       1.568732,       -2.211918
-11.904096,       -9.4023,       -10.456927,       -3.436355,       -8.593783,       -5.054785,       -3.919925,       -3.019027,       -8.944179,       -2.37978,       -7.217847,       -4.216243,       -3.510616,       -5.414638,       -5.066141,       -6.469604
-9.582377,       -6.332919,       -7.399875,       -3.726114,       -6.537225,       -9.418352,       -4.234705,       -8.944179,       -2.240168,       -1.962801,       -10.227073,       -4.984758,       -3.630522,       -8.830893,       -7.683788,       -8.802124
-4.95671,       -2.542494,       -4.0862,       3.279757,       -4.172453,       -2.463322,       3.199554,       -2.37978,       -1.962801,       5.633242,       -3.513952,       1.905669,       2.560007,       -3.557772,       0.805617,       -2.389187
-12.343126,       -9.168148,       -4.263663,       -4.282177,       -10.591893,       -10.92898,       -3.9091,       -7.217847,       -10.227073,       -3.513952,       -2.48922,       -4.725913,       -5.050039,       -9.923377,       -4.23316,       -7.183505
-5.389749,       -3.818767,       -5.878619,       0.926249,       -5.347386,       -5.294004,       0.640814,       -4.216243,       -4.984758,       1.905669,       -4.725913,       2.955489,       0.3363,       -4.6685,       -1.082282,       -3.225047
-3.251703,       -3.605786,       -2.52552,       2.011669,       -3.092834,       -4.396319,       3.316591,       -3.510616,       -3.630522,       2.560007,       -5.050039,       0.3363,       4.149085,       -3.253526,       1.195219,       -1.769916
-12.611937,       -9.780669,       -10.207834,       -4.298434,       -8.514333,       -7.610335,       -4.100113,       -5.414638,       -8.830893,       -3.557772,       -9.923377,       -4.6685,       -3.253526,       -5.382939,       -3.602864,       -7.446776
-3.800291,       -5.863633,       -5.829682,       -0.006243,       -6.033165,       -6.311129,       1.568732,       -5.066141,       -7.683788,       0.805617,       -4.23316,       -1.082282,       1.195219,       -3.602864,       2.796623,       -2.823756
-10.807521,       -8.463481,       -8.241941,       -2.749085,       -8.92966,       -5.352738,       -2.211918,       -6.469604,       -8.802124,       -2.389187,       -7.183505,       -3.225047,       -1.769916,       -7.446776,       -2.823756,       -1.99378
                    };
            return _data;
        }
    };
//    H: 3.2083
//    E: -2.4211


// ----------------------------------------------------------------------------
// Ribosum65_70 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.257519    0.217583    0.294369    0.230529
	struct Ribosum65_70 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum65_70>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.270949,       -2.191211,       -1.843683,       -1.825692
-2.191211,       1.312949,       -2.687248,       -1.14507
-1.843683,       -2.687248,       1.143858,       -2.091787
-1.825692,       -1.14507,       -2.091787,       1.70672
                    };
            return _data;
        }
    };
//    H: 1.0316
//    E: -0.3398

// ----------------------------------------------------------------------------
// Ribosum65_70N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum65_70N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum65_70N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.270949,       -2.191211,       -1.843683,       -1.825692,       -2.687248
-2.191211,       1.312949,       -2.687248,       -1.14507,       -2.687248
-1.843683,       -2.687248,       1.143858,       -2.091787,       -2.687248
-1.825692,       -1.14507,       -2.091787,       1.70672,       -2.687248
-2.687248,       -2.687248,       -2.687248,       -2.687248,       -2.687248
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum65_70d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum65_70d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum65_70d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.295455,       -8.037657,       -8.11922,       -4.795541,       -9.941102,       -13.830688,       -5.281395,       -11.750468,       -6.193216,       -4.807157,       -10.02912,       -6.435574,       -4.676536,       -12.060499,       -6.497475,       -8.165375
-8.037657,       -1.234813,       -9.064742,       -2.070547,       -9.59023,       -8.651725,       -5.605415,       -10.725728,       -10.417985,       -3.571402,       -12.381636,       -5.763161,       -5.996413,       -8.413822,       -7.639613,       -7.587238
-8.11922,       -9.064742,       -0.647517,       -5.97515,       -10.823818,       -14.716286,       -4.685119,       -9.01636,       -9.061503,       -6.469534,       -5.1475,       -6.782847,       -6.826261,       -8.393216,       -5.473727,       -10.399798
-4.795541,       -2.070547,       -5.97515,       4.715578,       -6.164419,       -6.944192,       1.266693,       -5.804368,       -6.510955,       2.406464,       -6.314778,       0.428698,       1.071105,       -5.502319,       -0.98037,       -2.881962
-9.941102,       -9.59023,       -10.823818,       -6.164419,       -4.881602,       -11.018571,       -3.573931,       -7.568074,       -8.628272,       -5.952206,       -10.904434,       -8.357241,       -2.427032,       -7.432135,       -6.133671,       -7.873654
-13.830688,       -8.651725,       -14.716286,       -6.944192,       -11.018571,       -1.95851,       -5.229286,       -5.629834,       -13.852088,       -3.883285,       -11.157738,       -7.932972,       -7.152836,       -8.02086,       -8.622801,       -5.841397
-5.281395,       -5.605415,       -4.685119,       1.266693,       -3.573931,       -5.229286,       5.549566,       -4.731488,       -6.628387,       1.702946,       -4.460154,       -0.714364,       2.392805,       -4.685418,       1.105283,       -3.836863
-11.750468,       -10.725728,       -9.01636,       -5.804368,       -7.568074,       -5.629834,       -4.731488,       -1.340032,       -6.731975,       -6.232411,       -12.963138,       -6.384183,       -4.439077,       -4.239659,       -7.791589,       -4.296987
-6.193216,       -10.417985,       -9.061503,       -6.510955,       -8.628272,       -13.852088,       -6.628387,       -6.731975,       -0.790469,       -5.413364,       -9.429976,       -6.61361,       -6.193586,       -6.536983,       -7.632433,       -11.905868
-4.807157,       -3.571402,       -6.469534,       2.406464,       -5.952206,       -3.883285,       1.702946,       -6.232411,       -5.413364,       5.733322,       -4.722018,       1.044744,       1.076479,       -4.677903,       -0.360613,       -4.225777
-10.02912,       -12.381636,       -5.1475,       -6.314778,       -10.904434,       -11.157738,       -4.460154,       -12.963138,       -9.429976,       -4.722018,       -2.170467,       -5.813903,       -6.244422,       -11.682542,       -3.960362,       -11.669194
-6.435574,       -5.763161,       -6.782847,       0.428698,       -8.357241,       -7.932972,       -0.714364,       -6.384183,       -6.61361,       1.044744,       -5.813903,       3.570008,       -1.103336,       -5.219343,       -2.253489,       -4.839641
-4.676536,       -5.996413,       -6.826261,       1.071105,       -2.427032,       -7.152836,       2.392805,       -4.439077,       -6.193586,       1.076479,       -6.244422,       -1.103336,       5.053706,       -3.187104,       0.820775,       -3.75219
-12.060499,       -8.413822,       -8.393216,       -5.502319,       -7.432135,       -8.02086,       -4.685418,       -4.239659,       -6.536983,       -4.677903,       -11.682542,       -5.219343,       -3.187104,       -3.368043,       -5.315706,       -4.795837
-6.497475,       -7.639613,       -5.473727,       -0.98037,       -6.133671,       -8.622801,       1.105283,       -7.791589,       -7.632433,       -0.360613,       -3.960362,       -2.253489,       0.820775,       -5.315706,       3.471995,       -4.533533
-8.165375,       -7.587238,       -10.399798,       -2.881962,       -7.873654,       -5.841397,       -3.836863,       -4.296987,       -11.905868,       -4.225777,       -11.669194,       -4.839641,       -3.75219,       -4.795837,       -4.533533,       0.037579
                    };
            return _data;
        }
    };
//    H: 3.9545
//    E: -2.8317


// ----------------------------------------------------------------------------
// Ribosum65_35 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.289767    0.194029    0.264505    0.251699
	struct Ribosum65_35 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum65_35>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.4315,       -0.818626,       -0.528545,       -0.483165
-0.818626,       0.858906,       -1.538799,       -0.32537
-0.528545,       -1.538799,       0.786592,       -0.765883
-0.483165,       -0.32537,       -0.765883,       0.904574
                    };
            return _data;
        }
    };
//    H: 0.2866
//    E: -0.0028

// ----------------------------------------------------------------------------
// Ribosum65_35N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum65_35N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum65_35N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.4315,       -0.818626,       -0.528545,       -0.483165,       -1.538799
-0.818626,       0.858906,       -1.538799,       -0.32537,       -1.538799
-0.528545,       -1.538799,       0.786592,       -0.765883,       -1.538799
-0.483165,       -0.32537,       -0.765883,       0.904574,       -1.538799
-1.538799,       -1.538799,       -1.538799,       -1.538799,       -1.538799
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum65_35d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum65_35d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum65_35d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-4.392614,       -6.40375,       -10.837532,       -4.073914,       -12.138727,       -12.11025,       -3.897379,       -13.034889,       -9.134527,       -5.141673,       -11.619256,       -4.755791,       -3.766155,       -13.368774,       -4.533263,       -10.930109
-6.40375,       -2.429819,       -10.676446,       -1.934016,       -11.788547,       -8.036289,       -4.298211,       -10.375693,       -8.807834,       -1.974062,       -8.966251,       -5.522982,       -4.226545,       -10.0411,       -5.582751,       -8.72226
-10.837532,       -10.676446,       -2.922728,       -5.239779,       -11.579794,       -14.521777,       -1.87104,       -11.223884,       -8.78763,       -5.248467,       -4.800965,       -8.452971,       -2.732127,       -10.090535,       -5.974994,       -7.121994
-4.073914,       -1.934016,       -5.239779,       3.624205,       -5.366324,       -1.998159,       2.517931,       -4.102277,       -3.982858,       3.433876,       -4.760169,       0.938755,       2.087728,       -4.337575,       -0.039901,       -3.070971
-12.138727,       -11.788547,       -11.579794,       -5.366324,       -7.009915,       -8.566235,       -3.025484,       -8.723909,       -9.142883,       -3.986716,       -10.840123,       -5.708718,       -3.102386,       -8.459054,       -6.871862,       -10.511
-12.11025,       -8.036289,       -14.521777,       -1.998159,       -8.566235,       -3.544293,       -3.002596,       -5.489038,       -10.54688,       -2.558147,       -10.814424,       -4.879815,       -3.522901,       -7.620769,       -5.447622,       -5.033122
-3.897379,       -4.298211,       -1.87104,       2.517931,       -3.025484,       -3.002596,       5.415896,       -3.844794,       -4.371548,       3.278308,       -3.905411,       0.592205,       3.495983,       -3.855962,       1.548876,       -3.291749
-13.034889,       -10.375693,       -11.223884,       -4.102277,       -8.723909,       -5.489038,       -3.844794,       -4.224125,       -9.453443,       -2.87599,       -10.467442,       -4.802212,       -2.883364,       -6.81771,       -5.058012,       -7.195283
-9.134527,       -8.807834,       -8.78763,       -3.982858,       -9.142883,       -10.54688,       -4.371548,       -9.453443,       -3.199739,       -2.37393,       -10.705251,       -5.85307,       -3.523638,       -9.251104,       -8.650576,       -12.125474
-5.141673,       -1.974062,       -5.248467,       3.433876,       -3.986716,       -2.558147,       3.278308,       -2.87599,       -2.37393,       5.776582,       -3.346068,       1.934786,       2.737389,       -3.539159,       0.655538,       -2.533957
-11.619256,       -8.966251,       -4.800965,       -4.760169,       -10.840123,       -10.814424,       -3.905411,       -10.467442,       -10.705251,       -3.346068,       -2.62664,       -5.011765,       -4.913384,       -11.233936,       -4.326917,       -6.946987
-4.755791,       -5.522982,       -8.452971,       0.938755,       -5.708718,       -4.879815,       0.592205,       -4.802212,       -5.85307,       1.934786,       -5.011765,       2.924283,       0.40262,       -4.991871,       -1.171973,       -4.300304
-3.766155,       -4.226545,       -2.732127,       2.087728,       -3.102386,       -3.522901,       3.495983,       -2.883364,       -3.523638,       2.737389,       -4.913384,       0.40262,       4.012136,       -3.338087,       1.103801,       -1.910752
-13.368774,       -10.0411,       -10.090535,       -4.337575,       -8.459054,       -7.620769,       -3.855962,       -6.81771,       -9.251104,       -3.539159,       -11.233936,       -4.991871,       -3.338087,       -6.221793,       -3.353875,       -7.75047
-4.533263,       -5.582751,       -5.974994,       -0.039901,       -6.871862,       -5.447622,       1.548876,       -5.058012,       -8.650576,       0.655538,       -4.326917,       -1.171973,       1.103801,       -3.353875,       2.62348,       -2.441845
-10.930109,       -8.72226,       -7.121994,       -3.070971,       -10.511,       -5.033122,       -3.291749,       -7.195283,       -12.125474,       -2.533957,       -6.946987,       -4.300304,       -1.910752,       -7.75047,       -2.441845,       -1.78172
                    };
            return _data;
        }
    };
//    H: 3.2704
//    E: -2.6332


// ----------------------------------------------------------------------------
// Ribosum75_80 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.258968    0.212317    0.282603    0.246112
	struct Ribosum75_80 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum75_80>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.289088,       -2.712111,       -2.48495,       -2.468329
-2.712111,       1.546399,       -3.058217,       -1.451743
-2.48495,       -3.058217,       1.291265,       -2.639623
-2.468329,       -1.451743,       -2.639623,       1.753264
                    };
            return _data;
        }
    };
//    H: 1.2385
//    E: -0.4987

// ----------------------------------------------------------------------------
// Ribosum75_80N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum75_80N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum75_80N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.289088,       -2.712111,       -2.48495,       -2.468329,       -3.058217
-2.712111,       1.546399,       -3.058217,       -1.451743,       -3.058217
-2.48495,       -3.058217,       1.291265,       -2.639623,       -3.058217
-2.468329,       -1.451743,       -2.639623,       1.753264,       -3.058217
-3.058217,       -3.058217,       -3.058217,       -3.058217,       -3.058217
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum75_80d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum75_80d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum75_80d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-0.587752,       -8.745399,       -8.041608,       -5.261993,       -9.599949,       -12.933034,       -6.07126,       -12.141033,       -6.175846,       -5.096408,       -10.104386,       -6.740726,       -4.953177,       -12.525989,       -7.271419,       -8.281121
-8.745399,       -0.288177,       -9.071129,       -2.420266,       -10.620973,       -7.720724,       -5.450976,       -11.106671,       -10.976685,       -3.372292,       -11.896193,       -5.770243,       -6.492404,       -8.618454,       -7.763834,       -7.664206
-8.041608,       -9.071129,       -0.563773,       -5.939305,       -10.693471,       -14.119482,       -4.66647,       -11.193216,       -8.077394,       -6.755974,       -4.809972,       -7.047053,       -7.398264,       -9.925874,       -5.844733,       -11.319161
-5.261993,       -2.420266,       -5.939305,       4.960307,       -7.138914,       -7.602205,       0.203662,       -5.664831,       -7.957599,       1.638259,       -7.089397,       0.119047,       -0.297321,       -6.041833,       -2.389529,       -2.882534
-9.599949,       -10.620973,       -10.693471,       -7.138914,       -2.910443,       -10.28274,       -3.290492,       -8.566928,       -8.630777,       -6.053625,       -9.743368,       -8.249388,       -2.449435,       -9.092574,       -6.263356,       -7.4233
-12.933034,       -7.720724,       -14.119482,       -7.602205,       -10.28274,       -0.836416,       -4.830329,       -6.813151,       -11.827215,       -3.76947,       -12.350689,       -8.032314,       -7.036289,       -8.221825,       -8.39074,       -5.95114
-6.07126,       -5.450976,       -4.66647,       0.203662,       -3.290492,       -4.830329,       5.82469,       -4.760926,       -7.384166,       0.983343,       -4.667589,       -1.408716,       1.644969,       -5.398487,       0.843098,       -4.142786
-12.141033,       -11.106671,       -11.193216,       -5.664831,       -8.566928,       -6.813151,       -4.760926,       -0.783104,       -9.328597,       -6.799308,       -11.928014,       -6.477237,       -5.634874,       -5.455651,       -7.754456,       -5.906277
-6.175846,       -10.976685,       -8.077394,       -7.957599,       -8.630777,       -11.827215,       -7.384166,       -9.328597,       -0.520298,       -5.723248,       -9.145035,       -6.034239,       -6.400151,       -8.845955,       -8.224025,       -13.531546
-5.096408,       -3.372292,       -6.755974,       1.638259,       -6.053625,       -3.76947,       0.983343,       -6.799308,       -5.723248,       5.941168,       -4.796418,       0.764537,       -0.089705,       -4.300947,       -1.307251,       -4.332901
-10.104386,       -11.896193,       -4.809972,       -7.089397,       -9.743368,       -12.350689,       -4.667589,       -11.928014,       -9.145035,       -4.796418,       -2.136389,       -5.563312,       -6.736699,       -11.854178,       -4.310499,       -11.951112
-6.740726,       -5.770243,       -7.047053,       0.119047,       -8.249388,       -8.032314,       -1.408716,       -6.477237,       -6.034239,       0.764537,       -5.563312,       3.708901,       -2.351695,       -4.465197,       -2.945342,       -4.82648
-4.953177,       -6.492404,       -7.398264,       -0.297321,       -2.449435,       -7.036289,       1.644969,       -5.634874,       -6.400151,       -0.089705,       -6.736699,       -2.351695,       5.13307,       -4.430418,       0.030298,       -4.246788
-12.525989,       -8.618454,       -9.925874,       -6.041833,       -9.092574,       -8.221825,       -5.398487,       -5.455651,       -8.845955,       -4.300947,       -11.854178,       -4.465197,       -4.430418,       -2.359132,       -6.29423,       -4.323864
-7.271419,       -7.763834,       -5.844733,       -2.389529,       -6.263356,       -8.39074,       0.843098,       -7.754456,       -8.224025,       -1.307251,       -4.310499,       -2.945342,       0.030298,       -6.29423,       3.656127,       -4.93664
-8.281121,       -7.664206,       -11.319161,       -2.882534,       -7.4233,       -5.95114,       -4.142786,       -5.906277,       -13.531546,       -4.332901,       -11.951112,       -4.82648,       -4.246788,       -4.323864,       -4.93664,       0.162305
                    };
            return _data;
        }
    };
//    H: 4.3301
//    E: -2.9342


// ----------------------------------------------------------------------------
// Ribosum70_45 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.274714    0.206603    0.278555    0.240128
	struct Ribosum70_45 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum70_45>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.579342,       -0.899154,       -0.63268,       -0.603674
-0.899154,       0.889556,       -1.362162,       -0.341408
-0.63268,       -1.362162,       0.791166,       -0.839205
-0.603674,       -0.341408,       -0.839205,       1.019163
                    };
            return _data;
        }
    };
//    H: 0.3318
//    E: -0.0134

// ----------------------------------------------------------------------------
// Ribosum70_45N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum70_45N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum70_45N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.579342,       -0.899154,       -0.63268,       -0.603674,       -1.362162
-0.899154,       0.889556,       -1.362162,       -0.341408,       -1.362162
-0.63268,       -1.362162,       0.791166,       -0.839205,       -1.362162
-0.603674,       -0.341408,       -0.839205,       1.019163,       -1.362162
-1.362162,       -1.362162,       -1.362162,       -1.362162,       -1.362162
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum70_45d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum70_45d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum70_45d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-3.379427,       -5.443034,       -10.538361,       -4.215986,       -11.511085,       -12.291074,       -3.903364,       -11.781491,       -9.152573,       -5.134004,       -11.990356,       -6.265015,       -3.497713,       -12.237325,       -3.549434,       -10.482296
-5.443034,       -1.720849,       -8.674713,       -1.698615,       -10.324199,       -6.170319,       -4.245567,       -9.194075,       -7.876715,       -2.857181,       -9.61212,       -3.760583,       -3.177312,       -9.51908,       -5.421946,       -8.399426
-10.538361,       -8.674713,       -2.603986,       -4.317929,       -11.101298,       -12.522681,       -1.83364,       -10.694873,       -6.996297,       -4.130816,       -4.964264,       -6.794887,       -2.431217,       -9.723117,       -5.649854,       -8.185035
-4.215986,       -1.698615,       -4.317929,       3.916317,       -5.432777,       -2.704613,       2.309532,       -3.163497,       -3.347711,       3.237553,       -4.862175,       0.973967,       1.986903,       -4.350627,       -0.111272,       -2.96411
-11.511085,       -10.324199,       -11.101298,       -5.432777,       -5.720084,       -9.381904,       -2.229292,       -8.229221,       -9.0188,       -4.328002,       -11.009049,       -6.619345,       -3.129531,       -8.67417,       -5.962299,       -8.716213
-12.291074,       -6.170319,       -12.522681,       -2.704613,       -9.381904,       -3.775058,       -3.548452,       -4.679087,       -9.201016,       -2.587851,       -10.647354,       -5.362949,       -4.200261,       -7.127589,       -5.92805,       -5.337688
-3.903364,       -4.245567,       -1.83364,       2.309532,       -2.229292,       -3.548452,       5.240006,       -4.157464,       -4.371239,       3.040457,       -4.001361,       0.514858,       3.293383,       -3.802033,       1.569667,       -2.076338
-11.781491,       -9.194075,       -10.694873,       -3.163497,       -8.229221,       -4.679087,       -4.157464,       -3.232318,       -8.498566,       -2.569632,       -6.935963,       -4.18734,       -3.578824,       -4.891983,       -5.491115,       -5.946856
-9.152573,       -7.876715,       -6.996297,       -3.347711,       -9.0188,       -9.201016,       -4.371239,       -8.498566,       -2.146273,       -2.094615,       -10.207825,       -4.63755,       -3.510969,       -8.298985,       -7.632414,       -8.418961
-5.134004,       -2.857181,       -4.130816,       3.237553,       -4.328002,       -2.587851,       3.040457,       -2.569632,       -2.094615,       5.579768,       -3.863946,       1.868386,       2.442984,       -3.61014,       0.789921,       -2.598341
-11.990356,       -9.61212,       -4.964264,       -4.862175,       -11.009049,       -10.647354,       -4.001361,       -6.935963,       -10.207825,       -3.863946,       -2.55223,       -4.71509,       -5.176893,       -9.671985,       -4.228475,       -7.621833
-6.265015,       -3.760583,       -6.794887,       0.973967,       -6.619345,       -5.362949,       0.514858,       -4.18734,       -4.63755,       1.868386,       -4.71509,       3.019242,       0.216016,       -4.725543,       -1.137666,       -3.098416
-3.497713,       -3.177312,       -2.431217,       1.986903,       -3.129531,       -4.200261,       3.293383,       -3.578824,       -3.510969,       2.442984,       -5.176893,       0.216016,       4.259574,       -2.869938,       1.166714,       -1.772016
-12.237325,       -9.51908,       -9.723117,       -4.350627,       -8.67417,       -7.127589,       -3.802033,       -4.891983,       -8.298985,       -3.61014,       -9.671985,       -4.725543,       -2.869938,       -4.766384,       -3.459133,       -6.946207
-3.549434,       -5.421946,       -5.649854,       -0.111272,       -5.962299,       -5.92805,       1.569667,       -5.491115,       -7.632414,       0.789921,       -4.228475,       -1.137666,       1.166714,       -3.459133,       2.864947,       -2.80151
-10.482296,       -8.399426,       -8.185035,       -2.96411,       -8.716213,       -5.337688,       -2.076338,       -5.946856,       -8.418961,       -2.598341,       -7.621833,       -3.098416,       -1.772016,       -6.946207,       -2.80151,       -1.346077
                    };
            return _data;
        }
    };
//    H: 3.2423
//    E: -2.4370


// ----------------------------------------------------------------------------
// Ribosum75_60 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.270866    0.206392    0.277641    0.245100
	struct Ribosum75_60 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum75_60>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.845408,       -1.29993,       -1.086153,       -0.937429
-1.29993,       1.158859,       -1.830999,       -0.59942
-1.086153,       -1.830999,       1.007707,       -1.294162
-0.937429,       -0.59942,       -1.294162,       1.282785
                    };
            return _data;
        }
    };
//    H: 0.5687
//    E: -0.1004

// ----------------------------------------------------------------------------
// Ribosum75_60N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum75_60N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum75_60N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.845408,       -1.29993,       -1.086153,       -0.937429,       -1.830999
-1.29993,       1.158859,       -1.830999,       -0.59942,       -1.830999
-1.086153,       -1.830999,       1.007707,       -1.294162,       -1.830999
-0.937429,       -0.59942,       -1.294162,       1.282785,       -1.830999
-1.830999,       -1.830999,       -1.830999,       -1.830999,       -1.830999
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum75_60d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum75_60d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum75_60d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.015259,       -4.924178,       -10.150016,       -4.692715,       -9.220862,       -13.386838,       -3.830646,       -10.760149,       -8.398618,       -5.022776,       -11.603325,       -6.366579,       -3.073408,       -12.175728,       -4.908033,       -9.592596
-4.924178,       -0.84347,       -7.830565,       -2.196253,       -8.302154,       -5.582593,       -4.348862,       -9.397302,       -7.810121,       -3.523432,       -10.765518,       -3.542473,       -3.871076,       -9.015939,       -6.10151,       -7.710572
-10.150016,       -7.830565,       -1.259971,       -3.794363,       -9.293977,       -12.32992,       -3.126899,       -9.753914,       -6.517246,       -4.242876,       -3.848405,       -5.324612,       -3.68651,       -10.093001,       -5.317962,       -10.664192
-4.692715,       -2.196253,       -3.794363,       4.356643,       -4.62669,       -4.535155,       1.658321,       -4.083812,       -3.69012,       2.907447,       -4.591457,       0.864938,       1.490416,       -4.317297,       -0.384836,       -2.555347
-9.220862,       -8.302154,       -9.293977,       -4.62669,       -4.177203,       -8.952209,       -2.490285,       -7.904605,       -8.994253,       -4.580538,       -10.062921,       -7.173893,       -2.59853,       -7.628883,       -5.297211,       -7.598638
-13.386838,       -5.582593,       -12.32992,       -4.535155,       -8.952209,       -1.647011,       -3.794271,       -3.769143,       -9.505692,       -2.392117,       -11.230999,       -6.249688,       -5.497477,       -6.71577,       -6.558178,       -4.217127
-3.830646,       -4.348862,       -3.126899,       1.658321,       -2.490285,       -3.794271,       5.544184,       -4.373045,       -4.885817,       2.191054,       -4.088379,       -0.053644,       2.897273,       -4.149214,       1.477575,       -2.315571
-10.760149,       -9.397302,       -9.753914,       -4.083812,       -7.904605,       -3.769143,       -4.373045,       -1.584871,       -8.861465,       -5.184994,       -12.551304,       -4.087825,       -4.132203,       -4.610951,       -5.296026,       -5.345952
-8.398618,       -7.810121,       -6.517246,       -3.69012,       -8.994253,       -9.505692,       -4.885817,       -8.861465,       -0.855416,       -2.724008,       -9.553377,       -4.724052,       -3.899541,       -8.470884,       -7.271576,       -9.205728
-5.022776,       -3.523432,       -4.242876,       2.907447,       -4.580538,       -2.392117,       2.191054,       -5.184994,       -2.724008,       5.802293,       -3.59294,       1.723027,       1.699448,       -4.384724,       0.034409,       -2.496241
-11.603325,       -10.765518,       -3.848405,       -4.591457,       -10.062921,       -11.230999,       -4.088379,       -12.551304,       -9.553377,       -3.59294,       -3.033458,       -4.196083,       -4.968196,       -10.95065,       -3.842696,       -11.103039
-6.366579,       -3.542473,       -5.324612,       0.864938,       -7.173893,       -6.249688,       -0.053644,       -4.087825,       -4.724052,       1.723027,       -4.196083,       3.226579,       -0.48915,       -4.036986,       -2.12609,       -2.935983
-3.073408,       -3.871076,       -3.68651,       1.490416,       -2.59853,       -5.497477,       2.897273,       -4.132203,       -3.899541,       1.699448,       -4.968196,       -0.48915,       4.56067,       -3.159769,       1.282234,       -2.850039
-12.175728,       -9.015939,       -10.093001,       -4.317297,       -7.628883,       -6.71577,       -4.149214,       -4.610951,       -8.470884,       -4.384724,       -10.95065,       -4.036986,       -3.159769,       -4.858971,       -4.43609,       -6.07231
-4.908033,       -6.10151,       -5.317962,       -0.384836,       -5.297211,       -6.558178,       1.477575,       -5.296026,       -7.271576,       0.034409,       -3.842696,       -2.12609,       1.282234,       -4.43609,       3.231088,       -3.818604
-9.592596,       -7.710572,       -10.664192,       -2.555347,       -7.598638,       -4.217127,       -2.315571,       -5.345952,       -9.205728,       -2.496241,       -11.103039,       -2.935983,       -2.850039,       -6.07231,       -3.818604,       -1.111996
                    };
            return _data;
        }
    };
//    H: 3.5371
//    E: -2.4341


// ----------------------------------------------------------------------------
// Ribosum65 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.290878    0.192340    0.262477    0.254305
	struct Ribosum65 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum65>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.270949,       -2.191211,       -1.843683,       -1.825692
-2.191211,       1.312949,       -2.687248,       -1.14507
-1.843683,       -2.687248,       1.143858,       -2.091787
-1.825692,       -1.14507,       -2.091787,       1.70672
                    };
            return _data;
        }
    };
//    H: 0.2678
//    E: 0.0026

// ----------------------------------------------------------------------------
// Ribosum65N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum65N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum65N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.270949,       -2.191211,       -1.843683,       -1.825692,       -2.687248
-2.191211,       1.312949,       -2.687248,       -1.14507,       -2.687248
-1.843683,       -2.687248,       1.143858,       -2.091787,       -2.687248
-1.825692,       -1.14507,       -2.091787,       1.70672,       -2.687248
-2.687248,       -2.687248,       -2.687248,       -2.687248,       -2.687248
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum65d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum65d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum65d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-4.42127,       -6.420786,       -10.855804,       -4.100629,       -12.156349,       -11.945129,       -3.900116,       -13.058258,       -9.1528,       -4.958993,       -11.592653,       -4.768908,       -3.689178,       -13.392143,       -4.557013,       -10.97026
-6.420786,       -2.436406,       -10.683684,       -1.95523,       -11.795134,       -8.031843,       -4.287074,       -10.388028,       -8.815072,       -1.96867,       -8.963106,       -5.535568,       -4.143217,       -10.053435,       -5.595737,       -8.751377
-10.855804,       -10.683684,       -2.930617,       -5.247568,       -11.587032,       -14.51798,       -1.867773,       -11.236869,       -8.795519,       -5.23309,       -4.79847,       -8.459905,       -2.670236,       -10.10352,       -5.987278,       -7.151762
-4.100629,       -1.95523,       -5.247568,       3.592766,       -5.31643,       -2.008152,       2.539907,       -4.127152,       -4.00531,       3.441772,       -4.771036,       0.938531,       2.081664,       -4.364289,       -0.009989,       -3.114835
-12.156349,       -11.795134,       -11.587032,       -5.31643,       -7.016502,       -8.561788,       -3.02132,       -8.736245,       -9.150121,       -3.953908,       -10.836978,       -5.713647,       -3.11697,       -8.471389,       -6.884848,       -10.540117
-11.945129,       -8.031843,       -14.51798,       -2.008152,       -8.561788,       -3.528812,       -2.987496,       -5.490339,       -10.543084,       -2.542895,       -10.800244,       -4.879661,       -3.524714,       -7.62207,       -5.449574,       -5.051204
-3.900116,       -4.287074,       -1.867773,       2.539907,       -3.02132,       -2.987496,       5.431507,       -3.84572,       -4.368403,       3.302685,       -3.890523,       0.61166,       3.51281,       -3.85735,       1.556141,       -3.309991
-13.058258,       -10.388028,       -11.236869,       -4.127152,       -8.736245,       -5.490339,       -3.84572,       -4.242207,       -9.466429,       -2.874319,       -10.470045,       -4.820386,       -2.910163,       -6.835793,       -5.076412,       -7.230148
-9.1528,       -8.815072,       -8.795519,       -4.00531,       -9.150121,       -10.543084,       -4.368403,       -9.466429,       -3.207628,       -2.370785,       -10.702757,       -5.865599,       -3.54645,       -9.26409,       -8.647646,       -12.155242
-4.958993,       -1.96867,       -5.23309,       3.441772,       -3.953908,       -2.542895,       3.302685,       -2.874319,       -2.370785,       5.792786,       -3.33171,       1.938752,       2.751597,       -3.539373,       0.657756,       -2.55269
-11.592653,       -8.963106,       -4.79847,       -4.771036,       -10.836978,       -10.800244,       -3.890523,       -10.470045,       -10.702757,       -3.33171,       -2.613762,       -5.015018,       -4.91934,       -11.236538,       -4.33017,       -6.966371
-4.768908,       -5.535568,       -8.459905,       0.938531,       -5.713647,       -4.879661,       0.61166,       -4.820386,       -5.865599,       1.938752,       -5.015018,       2.908208,       0.422732,       -5.009649,       -1.185994,       -4.330045
-3.689178,       -4.143217,       -2.670236,       2.081664,       -3.11697,       -3.524714,       3.51281,       -2.910163,       -3.54645,       2.751597,       -4.91934,       0.422732,       3.986926,       -3.364798,       1.096319,       -1.952669
-13.392143,       -10.053435,       -10.10352,       -4.364289,       -8.471389,       -7.62207,       -3.85735,       -6.835793,       -9.26409,       -3.539373,       -11.236538,       -5.009649,       -3.364798,       -6.239876,       -3.371075,       -7.785335
-4.557013,       -5.595737,       -5.987278,       -0.009989,       -6.884848,       -5.449574,       1.556141,       -5.076412,       -8.647646,       0.657756,       -4.33017,       -1.185994,       1.096319,       -3.371075,       2.604374,       -2.47579
-10.97026,       -8.751377,       -7.151762,       -3.114835,       -10.540117,       -5.051204,       -3.309991,       -7.230148,       -12.155242,       -2.55269,       -6.966371,       -4.330045,       -1.952669,       -7.785335,       -2.47579,       -1.833367
                    };
            return _data;
        }
    };
//    H: 3.2635
//    E: -2.6333


// ----------------------------------------------------------------------------
// Ribosum45_30 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.258386    0.219471    0.297294    0.224849
	struct Ribosum45_30 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum45_30>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.97217,       -1.344996,       -0.922728,       -1.005383
-1.344996,       1.001545,       -1.702347,       -0.614802
-0.922728,       -1.702347,       0.854756,       -1.113508
-1.005383,       -0.614802,       -1.113508,       1.383052
                    };
            return _data;
        }
    };
//    H: 0.5625
//    E: -0.0960

// ----------------------------------------------------------------------------
// Ribosum45_30N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum45_30N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum45_30N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.97217,       -1.344996,       -0.922728,       -1.005383,       -1.702347
-1.344996,       1.001545,       -1.702347,       -0.614802,       -1.702347
-0.922728,       -1.702347,       0.854756,       -1.113508,       -1.702347
-1.005383,       -0.614802,       -1.113508,       1.383052,       -1.702347
-1.702347,       -1.702347,       -1.702347,       -1.702347,       -1.702347
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum45_30d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum45_30d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum45_30d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.614066,       -8.459906,       -8.825299,       -5.068194,       -10.071488,       -13.456166,       -3.87375,       -12.119182,       -6.625515,       -5.221288,       -9.682435,       -6.512469,       -2.489662,       -12.288533,       -3.54637,       -8.847974
-8.459906,       -1.863943,       -9.606251,       -1.655843,       -10.554832,       -8.873175,       -5.431086,       -10.687365,       -7.182955,       -2.697136,       -10.393572,       -4.929393,       -5.592758,       -8.897984,       -7.177379,       -8.388793
-8.825299,       -9.606251,       -1.324921,       -6.071387,       -10.656017,       -15.169368,       -2.572672,       -9.37034,       -9.403609,       -6.296991,       -4.226799,       -7.124704,       -2.824848,       -8.017911,       -5.832336,       -9.77488
-5.068194,       -1.655843,       -6.071387,       4.252172,       -5.768624,       -2.374722,       2.029669,       -4.177138,       -3.791151,       2.876917,       -4.932442,       0.74423,       1.878489,       -4.548402,       -0.393049,       -2.459956
-10.071488,       -10.554832,       -10.656017,       -5.768624,       -6.215198,       -11.704665,       -3.242227,       -8.334748,       -7.754257,       -5.398507,       -11.48941,       -6.201114,       -2.910304,       -8.029408,       -6.193058,       -8.858027
-13.456166,       -8.873175,       -15.169368,       -2.374722,       -11.704665,       -3.458598,       -5.075512,       -6.84789,       -12.890057,       -3.756016,       -12.062726,       -7.115611,       -6.472701,       -8.960009,       -8.311121,       -6.65531
-3.87375,       -5.431086,       -2.572672,       2.029669,       -3.242227,       -5.075512,       5.222799,       -4.38042,       -6.025906,       2.799947,       -4.710315,       0.249853,       2.927741,       -4.336014,       1.190509,       -3.011722
-12.119182,       -10.687365,       -9.37034,       -4.177138,       -8.334748,       -6.84789,       -4.38042,       -2.562528,       -7.12924,       -2.204812,       -9.154637,       -4.402871,       -4.326824,       -4.662782,       -6.480514,       -5.438983
-6.625515,       -7.182955,       -9.403609,       -3.791151,       -7.754257,       -12.890057,       -6.025906,       -7.12924,       -1.621329,       -2.571406,       -9.901367,       -6.193157,       -4.881857,       -6.958356,       -7.681778,       -10.16116
-5.221288,       -2.697136,       -6.296991,       2.876917,       -5.398507,       -3.756016,       2.799947,       -2.204812,       -2.571406,       5.49015,       -4.781236,       1.423889,       1.889001,       -4.168971,       0.329359,       -3.036321
-9.682435,       -10.393572,       -4.226799,       -4.932442,       -11.48941,       -12.062726,       -4.710315,       -9.154637,       -9.901367,       -4.781236,       -2.307019,       -5.536218,       -6.328064,       -10.554762,       -4.342337,       -5.020956
-6.512469,       -4.929393,       -7.124704,       0.74423,       -6.201114,       -7.115611,       0.249853,       -4.402871,       -6.193157,       1.423889,       -5.536218,       3.320758,       0.06271,       -4.604772,       -1.262458,       -2.579565
-2.489662,       -5.592758,       -2.824848,       1.878489,       -2.910304,       -6.472701,       2.927741,       -4.326824,       -4.881857,       1.889001,       -6.328064,       0.06271,       4.723765,       -3.524418,       1.044236,       -1.584161
-12.288533,       -8.897984,       -8.017911,       -4.548402,       -8.029408,       -8.960009,       -4.336014,       -4.662782,       -6.958356,       -4.168971,       -10.554762,       -4.604772,       -3.524418,       -4.121686,       -4.196606,       -5.906441
-3.54637,       -7.177379,       -5.832336,       -0.393049,       -6.193058,       -8.311121,       1.190509,       -6.480514,       -7.681778,       0.329359,       -4.342337,       -1.262458,       1.044236,       -4.196606,       3.189392,       -3.651593
-8.847974,       -8.388793,       -9.77488,       -2.459956,       -8.858027,       -6.65531,       -3.011722,       -5.438983,       -10.16116,       -3.036321,       -5.020956,       -2.579565,       -1.584161,       -5.906441,       -3.651593,       -0.714531
                    };
            return _data;
        }
    };
//    H: 3.4648
//    E: -2.6056


// ----------------------------------------------------------------------------
// Ribosum100_80 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.255013    0.217125    0.290546    0.237316
	struct Ribosum100_80 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum100_80>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.353471,       -2.703177,       -2.442752,       -2.42213
-2.703177,       1.465394,       -3.155099,       -1.444741
-2.442752,       -3.155099,       1.240617,       -2.618404
-2.42213,       -1.444741,       -2.618404,       1.804112
                    };
            return _data;
        }
    };
//    H: 1.2498
//    E: -0.5028

// ----------------------------------------------------------------------------
// Ribosum100_80N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum100_80N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum100_80N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.353471,       -2.703177,       -2.442752,       -2.42213,       -3.155099
-2.703177,       1.465394,       -3.155099,       -1.444741,       -3.155099
-2.442752,       -3.155099,       1.240617,       -2.618404,       -3.155099
-2.42213,       -1.444741,       -2.618404,       1.804112,       -3.155099
-3.155099,       -3.155099,       -3.155099,       -3.155099,       -3.155099
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum100_80d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum100_80d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum100_80d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-0.723866,       -8.764302,       -8.159055,       -5.218447,       -9.813197,       -13.065888,       -6.045632,       -12.170165,       -5.641676,       -5.053036,       -10.032773,       -6.622601,       -4.85053,       -12.512473,       -7.093479,       -8.249301
-8.764302,       -0.595922,       -9.082784,       -2.461999,       -10.724723,       -7.932774,       -5.64834,       -11.345245,       -10.550475,       -3.686635,       -12.102323,       -5.883695,       -6.512001,       -8.61429,       -7.775778,       -7.717822
-8.159055,       -9.082784,       -0.529435,       -5.997131,       -10.295902,       -14.263796,       -4.77176,       -10.743551,       -8.73214,       -6.831355,       -4.997538,       -6.863692,       -7.268355,       -9.391469,       -5.779041,       -11.270383
-5.218447,       -2.461999,       -5.997131,       4.957374,       -7.046539,       -7.797591,       0.403287,       -5.677605,       -7.825673,       1.802809,       -7.049328,       0.192146,       0.093795,       -6.115591,       -2.05353,       -2.82428
-9.813197,       -10.724723,       -10.295902,       -7.046539,       -3.933582,       -10.934071,       -3.475717,       -8.80843,       -8.374936,       -6.348158,       -11.214006,       -8.271175,       -2.491132,       -9.778283,       -6.319312,       -7.470867
-13.065888,       -7.932774,       -14.263796,       -7.797591,       -10.934071,       -1.309628,       -4.88094,       -7.391548,       -13.829393,       -4.037818,       -12.53732,       -8.373367,       -7.843394,       -8.387486,       -9.019101,       -6.056988
-6.045632,       -5.64834,       -4.77176,       0.403287,       -3.475717,       -4.88094,       5.722116,       -4.812892,       -7.456384,       0.979798,       -4.780093,       -1.350299,       1.810315,       -5.317918,       0.872926,       -4.097012
-12.170165,       -11.345245,       -10.743551,       -5.677605,       -8.80843,       -7.391548,       -4.812892,       -0.945813,       -8.768247,       -6.929722,       -12.065211,       -6.502445,       -5.625295,       -4.965787,       -7.710225,       -5.891765
-5.641676,       -10.550475,       -8.73214,       -7.825673,       -8.374936,       -13.829393,       -7.456384,       -8.768247,       -0.641513,       -5.887489,       -9.755302,       -6.194848,       -6.404824,       -8.246319,       -8.393779,       -13.444413
-5.053036,       -3.686635,       -6.831355,       1.802809,       -6.348158,       -4.037818,       0.979798,       -6.929722,       -5.887489,       5.847096,       -5.13338,       0.724821,       0.109208,       -4.517665,       -1.227574,       -4.428825
-10.032773,       -12.102323,       -4.997538,       -7.049328,       -11.214006,       -12.53732,       -4.780093,       -12.065211,       -9.755302,       -5.13338,       -2.225543,       -5.773624,       -7.072079,       -11.731733,       -4.404854,       -11.768261
-6.622601,       -5.883695,       -6.863692,       0.192146,       -8.271175,       -8.373367,       -1.350299,       -6.502445,       -6.194848,       0.724821,       -5.773624,       3.704143,       -2.066647,       -4.583631,       -2.759245,       -5.017149
-4.85053,       -6.512001,       -7.268355,       0.093795,       -2.491132,       -7.843394,       1.810315,       -5.625295,       -6.404824,       0.109208,       -7.072079,       -2.066647,       5.181746,       -4.24258,       0.185033,       -4.117413
-12.512473,       -8.61429,       -9.391469,       -6.115591,       -9.778283,       -8.387486,       -5.317918,       -4.965787,       -8.246319,       -4.517665,       -11.731733,       -4.583631,       -4.24258,       -2.48508,       -6.004854,       -4.327443
-7.093479,       -7.775778,       -5.779041,       -2.05353,       -6.319312,       -9.019101,       0.872926,       -7.710225,       -8.393779,       -1.227574,       -4.404854,       -2.759245,       0.185033,       -6.004854,       3.655424,       -4.926034
-8.249301,       -7.717822,       -11.270383,       -2.82428,       -7.470867,       -6.056988,       -4.097012,       -5.891765,       -13.444413,       -4.428825,       -11.768261,       -5.017149,       -4.117413,       -4.327443,       -4.926034,       0.201487
                    };
            return _data;
        }
    };
//    H: 4.2836
//    E: -2.9751


// ----------------------------------------------------------------------------
// Ribosum45 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.258409    0.219444    0.297262    0.224885
	struct Ribosum45 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum45>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.35427,       -2.705193,       -2.445162,       -2.422928
-2.705193,       1.464897,       -3.161729,       -1.448115
-2.445162,       -3.161729,       1.240467,       -2.620187
-2.422928,       -1.448115,       -2.620187,       1.805203
                    };
            return _data;
        }
    };
//    H: 0.5620
//    E: -0.0958

// ----------------------------------------------------------------------------
// Ribosum45N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum45N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum45N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.35427,       -2.705193,       -2.445162,       -2.422928,       -3.161729
-2.705193,       1.464897,       -3.161729,       -1.448115,       -3.161729
-2.445162,       -3.161729,       1.240467,       -2.620187,       -3.161729
-2.422928,       -1.448115,       -2.620187,       1.805203,       -3.161729
-3.161729,       -3.161729,       -3.161729,       -3.161729,       -3.161729
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum45d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum45d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum45d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.253125,       -8.347016,       -8.177647,       -5.068275,       -10.333412,       -13.752063,       -5.568768,       -11.87354,       -5.758211,       -4.735587,       -10.347261,       -6.475998,       -4.776024,       -13.119223,       -6.216271,       -8.22034
-8.347016,       -1.317302,       -9.013856,       -2.193397,       -10.130453,       -8.7068,       -5.718052,       -11.19084,       -10.509841,       -3.790607,       -12.677913,       -6.024995,       -6.241904,       -8.817803,       -7.562063,       -7.855607
-8.177647,       -9.013856,       -0.574264,       -6.053782,       -11.085373,       -14.74064,       -4.789855,       -8.843149,       -9.37453,       -6.518914,       -5.217476,       -7.009471,       -6.722398,       -8.113333,       -5.504391,       -10.658833
-5.068275,       -2.193397,       -6.053782,       4.795871,       -6.534578,       -7.403656,       1.126651,       -5.897232,       -7.087765,       2.281607,       -6.78372,       0.348998,       1.008934,       -5.855429,       -1.133332,       -2.951793
-10.333412,       -10.130453,       -11.085373,       -6.534578,       -5.005943,       -11.24943,       -3.756481,       -7.710264,       -8.672947,       -6.185746,       -11.536982,       -8.533553,       -2.588722,       -7.692851,       -6.305839,       -7.915273
-13.752063,       -8.7068,       -14.74064,       -7.403656,       -11.24943,       -2.067926,       -5.177087,       -6.518363,       -13.472152,       -4.028186,       -12.468911,       -8.209928,       -7.498655,       -8.535405,       -8.940924,       -6.375848
-5.568768,       -5.718052,       -4.789855,       1.126651,       -3.756481,       -5.177087,       5.537445,       -4.943429,       -6.917017,       1.522105,       -4.443616,       -0.952316,       2.276037,       -4.719632,       1.052441,       -3.964041
-11.87354,       -11.19084,       -8.843149,       -5.897232,       -7.710264,       -6.518363,       -4.943429,       -1.395756,       -6.399919,       -6.649298,       -13.018565,       -6.791389,       -4.637663,       -4.353505,       -7.923899,       -4.655126
-5.758211,       -10.509841,       -9.37453,       -7.087765,       -8.672947,       -13.472152,       -6.917017,       -6.399919,       -0.829967,       -5.606806,       -9.83484,       -6.646264,       -5.821973,       -6.243736,       -7.646264,       -11.609985
-4.735587,       -3.790607,       -6.518914,       2.281607,       -6.185746,       -4.028186,       1.522105,       -6.649298,       -5.606806,       5.711774,       -5.206258,       0.9167,       0.888662,       -4.828831,       -0.515715,       -4.492582
-10.347261,       -12.677913,       -5.217476,       -6.78372,       -11.536982,       -12.468911,       -4.443616,       -13.018565,       -9.83484,       -5.206258,       -2.160374,       -6.080512,       -6.636908,       -11.834471,       -4.182172,       -11.727597
-6.475998,       -6.024995,       -7.009471,       0.348998,       -8.533553,       -8.209928,       -0.952316,       -6.791389,       -6.646264,       0.9167,       -6.080512,       3.628191,       -1.318408,       -5.231761,       -2.327794,       -5.05233
-4.776024,       -6.241904,       -6.722398,       1.008934,       -2.588722,       -7.498655,       2.276037,       -4.637663,       -5.821973,       0.888662,       -6.636908,       -1.318408,       5.134354,       -3.098148,       0.719605,       -3.902782
-13.119223,       -8.817803,       -8.113333,       -5.855429,       -7.692851,       -8.535405,       -4.719632,       -4.353505,       -6.243736,       -4.828831,       -11.834471,       -5.231761,       -3.098148,       -3.165243,       -5.435014,       -4.77302
-6.216271,       -7.562063,       -5.504391,       -1.133332,       -6.305839,       -8.940924,       1.052441,       -7.923899,       -7.646264,       -0.515715,       -4.182172,       -2.327794,       0.719605,       -5.435014,       3.545551,       -4.481653
-8.22034,       -7.855607,       -10.658833,       -2.951793,       -7.915273,       -6.375848,       -3.964041,       -4.655126,       -11.609985,       -4.492582,       -11.727597,       -5.05233,       -3.902782,       -4.77302,       -4.481653,       0.17636
                    };
            return _data;
        }
    };
//    H: 3.4647
//    E: -2.6055


// ----------------------------------------------------------------------------
// Ribosum95_50 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.257648    0.220344    0.299699    0.222309
	struct Ribosum95_50 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum95_50>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.123638,       -1.623564,       -1.226529,       -1.234264
-1.623564,       1.103468,       -2.068896,       -0.840018
-1.226529,       -2.068896,       0.960241,       -1.407456
-1.234264,       -0.840018,       -1.407456,       1.539399
                    };
            return _data;
        }
    };
//    H: 0.7357
//    E: -0.1722

// ----------------------------------------------------------------------------
// Ribosum95_50N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum95_50N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum95_50N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.123638,       -1.623564,       -1.226529,       -1.234264,       -2.068896
-1.623564,       1.103468,       -2.068896,       -0.840018,       -2.068896
-1.226529,       -2.068896,       0.960241,       -1.407456,       -2.068896
-1.234264,       -0.840018,       -1.407456,       1.539399,       -2.068896
-2.068896,       -2.068896,       -2.068896,       -2.068896,       -2.068896
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum95_50d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum95_50d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum95_50d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.398405,       -8.160518,       -8.861364,       -4.807741,       -9.58813,       -13.608106,       -3.975121,       -12.129642,       -6.692055,       -4.976553,       -9.606833,       -6.249705,       -3.245258,       -11.640806,       -4.459871,       -9.038842
-8.160518,       -1.947842,       -9.199015,       -1.889001,       -10.071357,       -9.234902,       -5.585179,       -10.735228,       -8.496643,       -3.23384,       -10.854231,       -4.453133,       -5.521056,       -8.735901,       -7.156176,       -8.107104
-8.861364,       -9.199015,       -0.948271,       -5.695509,       -10.35063,       -14.491344,       -3.330458,       -9.396429,       -9.335855,       -6.168498,       -4.815558,       -6.896,       -3.52196,       -8.2876,       -5.778281,       -9.939378
-4.807741,       -1.889001,       -5.695509,       4.425881,       -5.811566,       -3.591792,       1.820199,       -4.568803,       -4.509269,       2.740363,       -5.439207,       0.625998,       1.725961,       -4.836475,       -0.516697,       -2.795903
-9.58813,       -10.071357,       -10.35063,       -5.811566,       -5.809909,       -11.081832,       -3.320662,       -7.958789,       -8.332714,       -5.58518,       -11.164083,       -6.710413,       -2.811447,       -7.465475,       -6.109627,       -8.50057
-13.608106,       -9.234902,       -14.491344,       -3.591792,       -11.081832,       -3.330693,       -4.914767,       -6.573188,       -13.017428,       -3.890686,       -11.776271,       -7.245419,       -6.507034,       -8.198857,       -8.333755,       -6.12758
-3.975121,       -5.585179,       -3.330458,       1.820199,       -3.320662,       -4.914767,       5.314699,       -4.598924,       -5.973277,       2.410081,       -4.680988,       -0.096976,       2.777307,       -4.496078,       1.206977,       -3.291503
-12.129642,       -10.735228,       -9.396429,       -4.568803,       -7.958789,       -6.573188,       -4.598924,       -2.273064,       -7.343585,       -3.179695,       -10.35004,       -5.106654,       -4.486256,       -4.182472,       -6.941802,       -4.980148
-6.692055,       -8.496643,       -9.335855,       -4.509269,       -8.332714,       -13.017428,       -5.973277,       -7.343585,       -1.266849,       -3.332609,       -9.458262,       -6.185283,       -5.105201,       -6.861383,       -7.534604,       -10.647666
-4.976553,       -3.23384,       -6.168498,       2.740363,       -5.58518,       -3.890686,       2.410081,       -3.179695,       -3.332609,       5.568632,       -4.571013,       1.278259,       1.691223,       -4.519384,       0.067358,       -3.475411
-9.606833,       -10.854231,       -4.815558,       -5.439207,       -11.164083,       -11.776271,       -4.680988,       -10.35004,       -9.458262,       -4.571013,       -2.096109,       -5.440491,       -6.113092,       -11.031043,       -4.343289,       -6.429381
-6.249705,       -4.453133,       -6.896,       0.625998,       -6.710413,       -7.245419,       -0.096976,       -5.106654,       -6.185283,       1.278259,       -5.440491,       3.422641,       -0.289998,       -4.818993,       -1.742724,       -3.270827
-3.245258,       -5.521056,       -3.52196,       1.725961,       -2.811447,       -6.507034,       2.777307,       -4.486256,       -5.105201,       1.691223,       -6.113092,       -0.289998,       4.887746,       -3.2981,       1.035553,       -2.299337
-11.640806,       -8.735901,       -8.2876,       -4.836475,       -7.465475,       -8.198857,       -4.496078,       -4.182472,       -6.861383,       -4.519384,       -11.031043,       -4.818993,       -3.2981,       -3.595573,       -4.393581,       -5.613375
-4.459871,       -7.156176,       -5.778281,       -0.516697,       -6.109627,       -8.333755,       1.206977,       -6.941802,       -7.534604,       0.067358,       -4.343289,       -1.742724,       1.035553,       -4.393581,       3.319488,       -3.853691
-9.038842,       -8.107104,       -9.939378,       -2.795903,       -8.50057,       -6.12758,       -3.291503,       -4.980148,       -10.647666,       -3.475411,       -6.429381,       -3.270827,       -2.299337,       -5.613375,       -3.853691,       -0.295686
                    };
            return _data;
        }
    };
//    H: 3.6413
//    E: -2.6534


// ----------------------------------------------------------------------------
// Ribosum60_40 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.297134    0.185848    0.255008    0.262010
	struct Ribosum60_40 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum60_40>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.402309,       -0.898295,       -0.521307,       -0.501971
-0.898295,       0.88819,       -1.681561,       -0.314923
-0.521307,       -1.681561,       0.82604,       -0.820634
-0.501971,       -0.314923,       -0.820634,       0.911519
                    };
            return _data;
        }
    };
//    H: 0.2971
//    E: -0.0073

// ----------------------------------------------------------------------------
// Ribosum60_40N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum60_40N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum60_40N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.402309,       -0.898295,       -0.521307,       -0.501971,       -1.681561
-0.898295,       0.88819,       -1.681561,       -0.314923,       -1.681561
-0.521307,       -1.681561,       0.82604,       -0.820634,       -1.681561
-0.501971,       -0.314923,       -0.820634,       0.911519,       -1.681561
-1.681561,       -1.681561,       -1.681561,       -1.681561,       -1.681561
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum60_40d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum60_40d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum60_40d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-4.92814,       -10.316356,       -10.738764,       -3.679079,       -11.907946,       -14.91913,       -4.913481,       -14.033177,       -8.53898,       -4.665454,       -11.173159,       -6.56478,       -3.69429,       -14.051371,       -4.661265,       -11.222538
-10.316356,       -3.288866,       -11.059574,       -2.122464,       -12.008257,       -9.521219,       -3.630722,       -11.985349,       -8.644471,       -1.543376,       -11.093517,       -5.838691,       -4.490755,       -10.094857,       -4.229924,       -10.226652
-10.738764,       -11.059574,       -2.815277,       -6.44838,       -12.1285,       -16.199863,       -2.475986,       -10.861404,       -10.894143,       -6.165858,       -5.293533,       -8.36208,       -2.176343,       -9.50191,       -7.153128,       -11.61559
-3.679079,       -2.122464,       -6.44838,       3.486535,       -5.942076,       -2.557231,       2.697815,       -5.060438,       -5.033663,       3.520862,       -5.623686,       0.871462,       2.046403,       -4.666214,       0.137618,       -3.41757
-11.907946,       -12.008257,       -12.1285,       -5.942076,       -7.375606,       -12.716605,       -3.32233,       -9.743961,       -9.226237,       -5.693326,       -12.31576,       -6.817313,       -3.430163,       -9.40697,       -7.362485,       -10.791106
-14.91913,       -9.521219,       -16.199863,       -2.557231,       -12.716605,       -4.029053,       -3.219793,       -7.878914,       -13.920552,       -3.773258,       -12.670289,       -7.547103,       -6.076432,       -9.991034,       -8.965424,       -8.146904
-4.913481,       -3.630722,       -2.475986,       2.697815,       -3.32233,       -3.219793,       5.594162,       -4.54053,       -6.157884,       3.332297,       -4.760682,       1.036894,       3.510229,       -3.850832,       1.475895,       -3.361124
-14.033177,       -11.985349,       -10.861404,       -5.060438,       -9.743961,       -7.878914,       -4.54053,       -4.053104,       -8.620304,       -3.204499,       -10.155951,       -5.294803,       -3.152085,       -6.13698,       -7.997849,       -7.376639
-8.53898,       -8.644471,       -10.894143,       -5.033663,       -9.226237,       -13.920552,       -6.157884,       -8.620304,       -3.111863,       -2.454221,       -10.869035,       -6.206433,       -3.205947,       -8.449419,       -8.698484,       -12.112793
-4.665454,       -1.543376,       -6.165858,       3.520862,       -5.693326,       -3.773258,       3.332297,       -3.204499,       -2.454221,       5.962149,       -3.600378,       1.775002,       2.813794,       -2.779082,       0.664354,       -3.984695
-11.173159,       -11.093517,       -5.293533,       -5.623686,       -12.31576,       -12.670289,       -4.760682,       -10.155951,       -10.869035,       -3.600378,       -2.94837,       -5.654481,       -6.289857,       -11.587148,       -5.35607,       -6.548896
-6.56478,       -5.838691,       -8.36208,       0.871462,       -6.817313,       -7.547103,       1.036894,       -5.294803,       -6.206433,       1.775002,       -5.654481,       2.834875,       0.416185,       -4.195122,       -1.512839,       -4.153828
-3.69429,       -4.490755,       -2.176343,       2.046403,       -3.430163,       -6.076432,       3.510229,       -3.152085,       -3.205947,       2.813794,       -6.289857,       0.416185,       3.965128,       -2.915027,       0.832307,       -2.020063
-14.051371,       -10.094857,       -9.50191,       -4.666214,       -9.40697,       -9.991034,       -3.850832,       -6.13698,       -8.449419,       -2.779082,       -11.587148,       -4.195122,       -2.915027,       -5.497933,       -3.316183,       -7.737513
-4.661265,       -4.229924,       -7.153128,       0.137618,       -7.362485,       -8.965424,       1.475895,       -7.997849,       -8.698484,       0.664354,       -5.35607,       -1.512839,       0.832307,       -3.316183,       2.648278,       -3.236237
-11.222538,       -10.226652,       -11.61559,       -3.41757,       -10.791106,       -8.146904,       -3.361124,       -7.376639,       -12.112793,       -3.984695,       -6.548896,       -4.153828,       -2.020063,       -7.737513,       -3.236237,       -2.045156
                    };
            return _data;
        }
    };
//    H: 3.3387
//    E: -2.8788


// ----------------------------------------------------------------------------
// Ribosum100_95 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.253005    0.221039    0.296470    0.229485
	struct Ribosum100_95 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum100_95>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.543193,       -5.480312,       -5.044054,       -5.030275
-5.480312,       1.676164,       -5.903891,       -3.815803
-5.044054,       -5.903891,       1.370322,       -5.506374
-5.030275,       -3.815803,       -5.506374,       2.066067
                    };
            return _data;
        }
    };
//    H: 1.8662
//    E: -1.4580

// ----------------------------------------------------------------------------
// Ribosum100_95N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum100_95N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum100_95N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.543193,       -5.480312,       -5.044054,       -5.030275,       -5.903891
-5.480312,       1.676164,       -5.903891,       -3.815803,       -5.903891
-5.044054,       -5.903891,       1.370322,       -5.506374,       -5.903891
-5.030275,       -3.815803,       -5.506374,       2.066067,       -5.903891
-5.903891,       -5.903891,       -5.903891,       -5.903891,       -5.903891
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum100_95d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum100_95d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum100_95d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-0.654281,       -7.633899,       -7.981717,       -7.075024,       -999.0,       -999.0,       -11.365118,       -12.165559,       -6.878161,       -8.490649,       -9.749175,       -10.888705,       -7.40623,       -999.0,       -10.065583,       -999.0
-7.633899,       -0.256395,       -9.287116,       -4.897602,       -14.111458,       -9.272735,       -11.755214,       -999.0,       -999.0,       -4.926548,       -11.856871,       -8.652811,       -10.706128,       -8.284192,       -11.224353,       -11.702866
-7.981717,       -9.287116,       -0.316097,       -7.724958,       -11.727688,       -999.0,       -6.716638,       -999.0,       -9.230708,       -10.337497,       -9.486907,       -12.010508,       -9.303742,       -11.586923,       -8.286482,       -12.863417
-7.075024,       -4.897602,       -7.724958,       5.298267,       -9.739295,       -11.648764,       -2.937153,       -6.800792,       -13.004182,       -1.073724,       -8.37492,       -1.779827,       -3.188994,       -8.296874,       -4.701865,       -5.410011
-999.0,       -14.111458,       -11.727688,       -9.739295,       -1.794469,       -10.05861,       -4.860901,       -11.970693,       -12.535043,       -10.880745,       -10.119905,       -12.809315,       -4.866351,       -9.648764,       -9.036726,       -11.439832
-999.0,       -9.272735,       -999.0,       -11.648764,       -10.05861,       -1.301238,       -6.290441,       -6.899309,       -12.755214,       -6.16517,       -14.568895,       -10.739979,       -8.820945,       -9.868935,       -11.029486,       -999.0
-11.365118,       -11.755214,       -6.716638,       -2.937153,       -4.860901,       -6.290441,       5.845013,       -5.987523,       -9.676299,       -2.658346,       -6.598017,       -4.292359,       -1.039168,       -9.418051,       -0.988043,       -8.187423
-12.165559,       -999.0,       -999.0,       -6.800792,       -11.970693,       -6.899309,       -5.987523,       -0.70516,       -11.809315,       -8.070128,       -13.622996,       -7.214594,       -8.815341,       -8.971946,       -8.827248,       -7.81794
-6.878161,       -999.0,       -9.230708,       -13.004182,       -12.535043,       -12.755214,       -9.676299,       -11.809315,       -0.443452,       -6.865916,       -10.017422,       -7.379071,       -8.902644,       -999.0,       -11.174007,       -999.0
-8.490649,       -4.926548,       -10.337497,       -1.073724,       -10.880745,       -6.16517,       -2.658346,       -8.070128,       -6.865916,       5.947098,       -6.071755,       -1.238971,       -3.598035,       -5.658314,       -4.349201,       -7.986726
-9.749175,       -11.856871,       -9.486907,       -8.37492,       -10.119905,       -14.568895,       -6.598017,       -13.622996,       -10.017422,       -6.071755,       -1.754176,       -7.591254,       -14.817863,       -999.0,       -8.176217,       -14.677098
-10.888705,       -8.652811,       -12.010508,       -1.779827,       -12.809315,       -10.739979,       -4.292359,       -7.214594,       -7.379071,       -1.238971,       -7.591254,       3.977809,       -5.229211,       -10.553073,       -5.902311,       -7.054949
-7.40623,       -10.706128,       -9.303742,       -3.188994,       -4.866351,       -8.820945,       -1.039168,       -8.815341,       -8.902644,       -3.598035,       -14.817863,       -5.229211,       5.520394,       -6.191904,       -1.921269,       -5.400296
-999.0,       -8.284192,       -11.586923,       -8.296874,       -9.648764,       -9.868935,       -9.418051,       -8.971946,       -999.0,       -5.658314,       -999.0,       -10.553073,       -6.191904,       -1.245787,       -7.452613,       -5.506818
-10.065583,       -11.224353,       -8.286482,       -4.701865,       -9.036726,       -11.029486,       -0.988043,       -8.827248,       -11.174007,       -4.349201,       -8.176217,       -5.902311,       -1.921269,       -7.452613,       4.000981,       -7.257766
-999.0,       -11.702866,       -12.863417,       -5.410011,       -11.439832,       -999.0,       -8.187423,       -7.81794,       -999.0,       -7.986726,       -14.677098,       -7.054949,       -5.400296,       -5.506818,       -7.257766,       0.607528
                    };
            return _data;
        }
    };
//    H: 5.0829
//    E: -46.0509


// ----------------------------------------------------------------------------
// Ribosum90_85 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.254700    0.218888    0.295885    0.230527
	struct Ribosum90_85 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum90_85>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.420207,       -3.115537,       -2.77702,       -2.704847
-3.115537,       1.509507,       -3.576863,       -1.861029
-2.77702,       -3.576863,       1.268154,       -2.996561
-2.704847,       -1.861029,       -2.996561,       1.889558
                    };
            return _data;
        }
    };
//    H: 1.3941
//    E: -0.6310

// ----------------------------------------------------------------------------
// Ribosum90_85N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum90_85N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum90_85N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.420207,       -3.115537,       -2.77702,       -2.704847,       -3.576863
-3.115537,       1.509507,       -3.576863,       -1.861029,       -3.576863
-2.77702,       -3.576863,       1.268154,       -2.996561,       -3.576863
-2.704847,       -1.861029,       -2.996561,       1.889558,       -3.576863
-3.576863,       -3.576863,       -3.576863,       -3.576863,       -3.576863
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum90_85d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum90_85d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum90_85d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.006962,       -8.487139,       -8.098595,       -4.935932,       -9.360108,       -11.717669,       -6.295873,       -12.743033,       -6.286215,       -5.502833,       -11.604211,       -6.288956,       -5.100411,       -10.321194,       -7.13475,       -10.130055
-8.487139,       -0.646641,       -9.547517,       -3.121237,       -11.300591,       -7.395284,       -6.746149,       -12.212157,       -9.455135,       -3.925705,       -12.824769,       -5.879553,       -6.734544,       -8.375578,       -8.917081,       -7.481705
-8.098595,       -9.547517,       -0.507101,       -5.644474,       -11.224047,       -14.256423,       -4.846277,       -10.431021,       -8.608882,       -7.144551,       -6.0662,       -7.080989,       -7.386089,       -10.574878,       -6.085121,       -10.414282
-4.935932,       -3.121237,       -5.644474,       5.037785,       -7.929401,       -7.656565,       0.032128,       -4.878898,       -7.51253,       1.495423,       -6.882304,       -0.203989,       -0.039274,       -6.676291,       -2.177885,       -3.393937
-9.360108,       -11.300591,       -11.224047,       -7.929401,       -2.778083,       -10.696776,       -3.700068,       -6.870497,       -7.993669,       -7.103552,       -11.822268,       -9.137148,       -3.069158,       -8.789978,       -5.888687,       -9.234645
-11.717669,       -7.395284,       -14.256423,       -7.656565,       -10.696776,       -1.765757,       -5.408106,       -7.012574,       -11.564479,       -4.05217,       -13.564012,       -8.543644,       -7.75136,       -7.558148,       -8.971135,       -5.823262
-6.295873,       -6.746149,       -4.846277,       0.032128,       -3.700068,       -5.408106,       5.721989,       -4.803944,       -7.782815,       0.262098,       -5.544367,       -1.569664,       1.541707,       -6.080993,       0.758581,       -5.001179
-12.743033,       -12.212157,       -10.431021,       -4.878898,       -6.870497,       -7.012574,       -4.803944,       -0.926481,       -16.360185,       -7.130471,       -12.951414,       -6.840908,       -6.327559,       -5.721085,       -8.111507,       -6.129159
-6.286215,       -9.455135,       -8.608882,       -7.51253,       -7.993669,       -11.564479,       -7.782815,       -16.360185,       -0.731814,       -6.05936,       -8.68064,       -6.084711,       -6.41433,       -11.901298,       -8.445735,       -12.820572
-5.502833,       -3.925705,       -7.144551,       1.495423,       -7.103552,       -4.05217,       0.262098,       -7.130471,       -6.05936,       5.854629,       -5.426235,       0.438901,       -0.345462,       -4.867718,       -1.831211,       -5.093192
-11.604211,       -12.824769,       -6.0662,       -6.882304,       -11.822268,       -13.564012,       -5.544367,       -12.951414,       -8.68064,       -5.426235,       -1.76,       -6.489832,       -7.616177,       -10.524162,       -5.206246,       -11.850967
-6.288956,       -5.879553,       -7.080989,       -0.203989,       -9.137148,       -8.543644,       -1.569664,       -6.840908,       -6.084711,       0.438901,       -6.489832,       3.771819,       -2.327297,       -6.421391,       -2.840424,       -5.036998
-5.100411,       -6.734544,       -7.386089,       -0.039274,       -3.069158,       -7.75136,       1.541707,       -6.327559,       -6.41433,       -0.345462,       -7.616177,       -2.327297,       5.316946,       -4.716261,       0.089229,       -4.354043
-10.321194,       -8.375578,       -10.574878,       -6.676291,       -8.789978,       -7.558148,       -6.080993,       -5.721085,       -11.901298,       -4.867718,       -10.524162,       -6.421391,       -4.716261,       -2.085401,       -5.599171,       -5.032409
-7.13475,       -8.917081,       -6.085121,       -2.177885,       -5.888687,       -8.971135,       0.758581,       -8.111507,       -8.445735,       -1.831211,       -5.206246,       -2.840424,       0.089229,       -5.599171,       3.756549,       -5.138989
-10.130055,       -7.481705,       -10.414282,       -3.393937,       -9.234645,       -5.823262,       -5.001179,       -6.129159,       -12.820572,       -5.093192,       -11.850967,       -5.036998,       -4.354043,       -5.032409,       -5.138989,       0.42375
                    };
            return _data;
        }
    };
//    H: 4.4533
//    E: -3.1114


// ----------------------------------------------------------------------------
// Ribosum45_55 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.256296    0.220862    0.300810    0.222031
	struct Ribosum45_55 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum45_55>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.284796,       -2.058805,       -1.677705,       -1.617614
-2.058805,       1.224908,       -2.642013,       -1.123843
-1.677705,       -2.642013,       1.080866,       -1.934951
-1.617614,       -1.123843,       -1.934951,       1.705636
                    };
            return _data;
        }
    };
//    H: 0.9809
//    E: -0.3061

// ----------------------------------------------------------------------------
// Ribosum45_55N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum45_55N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum45_55N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.284796,       -2.058805,       -1.677705,       -1.617614,       -2.642013
-2.058805,       1.224908,       -2.642013,       -1.123843,       -2.642013
-1.677705,       -2.642013,       1.080866,       -1.934951,       -2.642013
-1.617614,       -1.123843,       -1.934951,       1.705636,       -2.642013
-2.642013,       -2.642013,       -2.642013,       -2.642013,       -2.642013
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum45_55d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum45_55d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum45_55d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.868781,       -7.784747,       -8.171962,       -4.708032,       -9.391521,       -14.301354,       -4.854999,       -11.932336,       -6.153311,       -4.780302,       -9.718053,       -6.14002,       -4.61117,       -11.930994,       -6.228447,       -8.649911
-7.784747,       -1.775006,       -9.282728,       -2.070202,       -10.018993,       -9.215553,       -5.801801,       -10.650162,       -10.172006,       -3.802893,       -12.153923,       -4.783168,       -5.802574,       -8.613805,       -7.349426,       -7.904006
-8.171962,       -9.282728,       -0.670714,       -5.71352,       -10.564031,       -14.678991,       -4.739407,       -8.940604,       -8.844682,       -6.288749,       -5.47072,       -6.908106,       -5.41906,       -8.33188,       -5.796398,       -10.607214
-4.708032,       -2.070202,       -5.71352,       4.60945,       -6.015681,       -6.681313,       1.527376,       -5.560143,       -5.836087,       2.579593,       -6.092764,       0.471652,       1.436683,       -5.390634,       -0.67461,       -3.024351
-9.391521,       -10.018993,       -10.564031,       -6.015681,       -5.549244,       -11.174699,       -3.860396,       -7.709894,       -8.570665,       -5.949234,       -10.954773,       -8.070559,       -2.65307,       -7.396148,       -6.212586,       -8.339826
-14.301354,       -9.215553,       -14.678991,       -6.681313,       -11.174699,       -2.793891,       -5.194214,       -6.159636,       -13.614861,       -3.986673,       -12.358898,       -7.755203,       -6.95713,       -8.381147,       -8.424281,       -5.986685
-4.854999,       -5.801801,       -4.739407,       1.527376,       -3.860396,       -5.194214,       5.42301,       -4.914332,       -6.414536,       1.903813,       -4.543797,       -0.473085,       2.577733,       -4.640662,       1.175947,       -3.723414
-11.932336,       -10.650162,       -8.940604,       -5.560143,       -7.709894,       -6.159636,       -4.914332,       -1.845565,       -6.626547,       -5.898256,       -13.450525,       -5.864476,       -4.307931,       -3.953035,       -7.393913,       -4.704944
-6.153311,       -10.172006,       -8.844682,       -5.836087,       -8.570665,       -13.614861,       -6.414536,       -6.626547,       -0.939404,       -5.019469,       -9.592881,       -6.436239,       -6.029504,       -6.400562,       -7.747317,       -11.644927
-4.780302,       -3.802893,       -6.288749,       2.579593,       -5.949234,       -3.986673,       1.903813,       -5.898256,       -5.019469,       5.636567,       -4.618943,       1.101977,       1.380079,       -4.815921,       -0.185249,       -4.077021
-9.718053,       -12.153923,       -5.47072,       -6.092764,       -10.954773,       -12.358898,       -4.543797,       -13.450525,       -9.592881,       -4.618943,       -2.125004,       -5.640378,       -6.139535,       -11.842494,       -4.203983,       -11.745943
-6.14002,       -4.783168,       -6.908106,       0.471652,       -8.070559,       -7.755203,       -0.473085,       -5.864476,       -6.436239,       1.101977,       -5.640378,       3.543312,       -0.776761,       -5.190774,       -2.093376,       -4.869772
-4.61117,       -5.802574,       -5.41906,       1.436683,       -2.65307,       -6.95713,       2.577733,       -4.307931,       -6.029504,       1.380079,       -6.139535,       -0.776761,       5.037043,       -3.048053,       1.00859,       -3.585484
-11.930994,       -8.613805,       -8.33188,       -5.390634,       -7.396148,       -8.381147,       -4.640662,       -3.953035,       -6.400562,       -4.815921,       -11.842494,       -5.190774,       -3.048053,       -3.416714,       -4.935505,       -5.176835
-6.228447,       -7.349426,       -5.796398,       -0.67461,       -6.212586,       -8.424281,       1.175947,       -7.393913,       -7.747317,       -0.185249,       -4.203983,       -2.093376,       1.00859,       -4.935505,       3.434542,       -4.200087
-8.649911,       -7.904006,       -10.607214,       -3.024351,       -8.339826,       -5.986685,       -3.723414,       -4.704944,       -11.644927,       -4.077021,       -11.745943,       -4.869772,       -3.585484,       -5.176835,       -4.200087,       0.047513
                    };
            return _data;
        }
    };
//    H: 3.8484
//    E: -2.8280


// ----------------------------------------------------------------------------
// Ribosum70_65 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.261302    0.214019    0.291259    0.233421
	struct Ribosum70_65 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum70_65>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.165976,       -1.912321,       -1.59372,       -1.444559
-1.912321,       1.272333,       -2.485895,       -1.019107
-1.59372,       -2.485895,       1.100607,       -1.794393
-1.444559,       -1.019107,       -1.794393,       1.60125
                    };
            return _data;
        }
    };
//    H: 0.8915
//    E: -0.2574

// ----------------------------------------------------------------------------
// Ribosum70_65N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum70_65N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum70_65N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.165976,       -1.912321,       -1.59372,       -1.444559,       -2.485895
-1.912321,       1.272333,       -2.485895,       -1.019107,       -2.485895
-1.59372,       -2.485895,       1.100607,       -1.794393,       -2.485895
-1.444559,       -1.019107,       -1.794393,       1.60125,       -2.485895
-2.485895,       -2.485895,       -2.485895,       -2.485895,       -2.485895
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum70_65d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum70_65d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum70_65d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.60689,       -6.668109,       -8.511924,       -4.672228,       -9.973746,       -14.184753,       -5.394399,       -10.76916,       -6.473681,       -4.951551,       -10.022359,       -6.686411,       -4.273985,       -12.261948,       -6.031895,       -8.505692
-6.668109,       -1.337672,       -8.80577,       -2.213348,       -9.84283,       -8.375128,       -5.564866,       -10.398748,       -8.699775,       -3.672578,       -11.81569,       -5.097478,       -4.931428,       -8.344361,       -6.637276,       -7.92696
-8.511924,       -8.80577,       -0.78307,       -5.589816,       -11.014341,       -14.862473,       -3.707265,       -9.278053,       -8.038358,       -5.690396,       -5.257671,       -6.952893,       -6.101337,       -8.435113,       -5.591017,       -10.64711
-4.672228,       -2.213348,       -5.589816,       4.610575,       -6.217105,       -6.585425,       1.330281,       -5.171951,       -4.678122,       2.519359,       -5.911666,       0.535922,       1.128252,       -5.249212,       -0.871608,       -3.040465
-9.973746,       -9.84283,       -11.014341,       -6.217105,       -4.61674,       -11.30151,       -3.413573,       -7.792055,       -8.765799,       -5.543616,       -11.222578,       -8.547843,       -2.567733,       -7.645606,       -6.184127,       -8.009938
-14.184753,       -8.375128,       -14.862473,       -6.585425,       -11.30151,       -2.145788,       -4.844881,       -5.387858,       -9.124568,       -3.784717,       -11.450582,       -8.13395,       -7.256587,       -8.108622,       -8.757424,       -5.874213
-5.394399,       -5.564866,       -3.707265,       1.330281,       -3.413573,       -4.844881,       5.562642,       -4.843027,       -6.766028,       1.788038,       -4.180983,       -0.566347,       2.57827,       -4.236639,       1.24793,       -3.231844
-10.76916,       -10.398748,       -9.278053,       -5.171951,       -7.792055,       -5.387858,       -4.843027,       -1.585488,       -7.048992,       -6.272874,       -12.65639,       -5.676933,       -4.687893,       -4.096076,       -7.288044,       -4.55486
-6.473681,       -8.699775,       -8.038358,       -4.678122,       -8.765799,       -9.124568,       -6.766028,       -7.048992,       -0.786908,       -3.516764,       -9.412597,       -5.694466,       -5.769949,       -6.826898,       -7.647173,       -12.277248
-4.951551,       -3.672578,       -5.690396,       2.519359,       -5.543616,       -3.784717,       1.788038,       -6.272874,       -3.516764,       5.773593,       -4.013557,       1.162097,       1.262942,       -4.317216,       -0.226373,       -3.813829
-10.022359,       -11.81569,       -5.257671,       -5.911666,       -11.222578,       -11.450582,       -4.180983,       -12.65639,       -9.412597,       -4.013557,       -2.339687,       -4.680915,       -5.440165,       -11.909878,       -3.993114,       -11.669856
-6.686411,       -5.097478,       -6.952893,       0.535922,       -8.547843,       -8.13395,       -0.566347,       -5.676933,       -5.694466,       1.162097,       -4.680915,       3.506956,       -0.919049,       -5.159886,       -2.277685,       -4.678544
-4.273985,       -4.931428,       -6.101337,       1.128252,       -2.567733,       -7.256587,       2.57827,       -4.687893,       -5.769949,       1.262942,       -5.440165,       -0.919049,       4.943138,       -3.167262,       0.907375,       -3.503762
-12.261948,       -8.344361,       -8.435113,       -5.249212,       -7.645606,       -8.108622,       -4.236639,       -4.096076,       -6.826898,       -4.317216,       -11.909878,       -5.159886,       -3.167262,       -3.143868,       -5.115719,       -5.070999
-6.031895,       -6.637276,       -5.591017,       -0.871608,       -6.184127,       -8.757424,       1.24793,       -7.288044,       -7.647173,       -0.226373,       -3.993114,       -2.277685,       0.907375,       -5.115719,       3.417637,       -4.486421
-8.505692,       -7.92696,       -10.64711,       -3.040465,       -8.009938,       -5.874213,       -3.231844,       -4.55486,       -12.277248,       -3.813829,       -11.669856,       -4.678544,       -3.503762,       -5.070999,       -4.486421,       -0.040333
                    };
            return _data;
        }
    };
//    H: 3.8720
//    E: -2.7257


// ----------------------------------------------------------------------------
// Ribosum80_45 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.265271    0.215583    0.291703    0.227442
	struct Ribosum80_45 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum80_45>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.799264,       -1.102819,       -0.756598,       -0.750373
-1.102819,       0.922013,       -1.536765,       -0.497611
-0.756598,       -1.536765,       0.800072,       -0.954564
-0.750373,       -0.497611,       -0.954564,       1.225998
                    };
            return _data;
        }
    };
//    H: 0.4404
//    E: -0.0503

// ----------------------------------------------------------------------------
// Ribosum80_45N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum80_45N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum80_45N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.799264,       -1.102819,       -0.756598,       -0.750373,       -1.536765
-1.102819,       0.922013,       -1.536765,       -0.497611,       -1.536765
-0.756598,       -1.536765,       0.800072,       -0.954564,       -1.536765
-0.750373,       -0.497611,       -0.954564,       1.225998,       -1.536765
-1.536765,       -1.536765,       -1.536765,       -1.536765,       -1.536765
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum80_45d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum80_45d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum80_45d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-3.484019,       -6.412291,       -9.312664,       -4.523465,       -10.101311,       -12.964635,       -3.636081,       -12.199072,       -7.449087,       -5.351041,       -8.455042,       -5.978277,       -2.983168,       -12.378105,       -3.892767,       -8.738773
-6.412291,       -1.708864,       -9.611469,       -1.607882,       -9.642132,       -7.735687,       -4.935706,       -9.646391,       -6.992758,       -3.055016,       -9.809741,       -3.981718,       -3.980337,       -8.494872,       -6.184081,       -8.083287
-9.312664,       -9.611469,       -1.862332,       -4.891817,       -10.296497,       -13.584837,       -2.222611,       -10.787024,       -8.121835,       -4.968222,       -4.430107,       -6.569279,       -2.682006,       -9.131802,       -5.604715,       -8.814416
-4.523465,       -1.607882,       -4.891817,       4.017664,       -4.970364,       -2.842289,       2.234823,       -3.550822,       -3.669793,       3.084994,       -4.499787,       0.875936,       1.987809,       -3.828648,       -0.155543,       -2.434395
-10.101311,       -9.642132,       -10.296497,       -4.970364,       -5.680096,       -9.724619,       -2.611919,       -8.266815,       -6.882315,       -4.419982,       -10.378909,       -5.50895,       -2.824268,       -7.488029,       -5.722748,       -8.932053
-12.964635,       -7.735687,       -13.584837,       -2.842289,       -9.724619,       -3.976851,       -4.123391,       -5.529151,       -10.411183,       -2.866613,       -10.803547,       -5.859241,       -4.808178,       -7.235248,       -6.614208,       -5.232669
-3.636081,       -4.935706,       -2.222611,       2.234823,       -2.611919,       -4.123391,       5.171987,       -4.334533,       -4.505876,       2.963543,       -4.359973,       0.411896,       3.115369,       -4.291773,       1.446362,       -2.635639
-12.199072,       -9.646391,       -10.787024,       -3.550822,       -8.266815,       -5.529151,       -4.334533,       -3.271707,       -8.082518,       -2.458171,       -8.501217,       -4.193965,       -4.183226,       -4.915031,       -5.879447,       -5.796458
-7.449087,       -6.992758,       -8.121835,       -3.669793,       -6.882315,       -10.411183,       -4.505876,       -8.082518,       -1.891743,       -2.486739,       -8.364182,       -5.313211,       -4.087128,       -7.509585,       -6.869944,       -9.520695
-5.351041,       -3.055016,       -4.968222,       3.084994,       -4.419982,       -2.866613,       2.963543,       -2.458171,       -2.486739,       5.483649,       -3.801523,       1.658383,       2.262212,       -3.805928,       0.601777,       -2.534059
-8.455042,       -9.809741,       -4.430107,       -4.499787,       -10.378909,       -10.803547,       -4.359973,       -8.501217,       -8.364182,       -3.801523,       -2.243806,       -5.142877,       -5.357895,       -10.315362,       -4.349185,       -5.933621
-5.978277,       -3.981718,       -6.569279,       0.875936,       -5.50895,       -5.859241,       0.411896,       -4.193965,       -5.313211,       1.658383,       -5.142877,       3.134709,       0.168834,       -4.728019,       -1.243226,       -2.956877
-2.983168,       -3.980337,       -2.682006,       1.987809,       -2.824268,       -4.808178,       3.115369,       -4.183226,       -4.087128,       2.262212,       -5.357895,       0.168834,       4.497698,       -3.373998,       1.221675,       -1.70895
-12.378105,       -8.494872,       -9.131802,       -3.828648,       -7.488029,       -7.235248,       -4.291773,       -4.915031,       -7.509585,       -3.805928,       -10.315362,       -4.728019,       -3.373998,       -4.641894,       -4.039638,       -6.84741
-3.892767,       -6.184081,       -5.604715,       -0.155543,       -5.722748,       -6.614208,       1.446362,       -5.879447,       -6.869944,       0.601777,       -4.349185,       -1.243226,       1.221675,       -4.039638,       3.017656,       -3.230139
-8.738773,       -8.083287,       -8.814416,       -2.434395,       -8.932053,       -5.232669,       -2.635639,       -5.796458,       -9.520695,       -2.534059,       -5.933621,       -2.956877,       -1.70895,       -6.84741,       -3.230139,       -1.181997
                    };
            return _data;
        }
    };
//    H: 3.3237
//    E: -2.4250


// ----------------------------------------------------------------------------
// Ribosum45_65 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.256664    0.220139    0.300377    0.222821
	struct Ribosum45_65 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum45_65>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.3075,       -2.182398,       -1.783065,       -1.741127
-2.182398,       1.257972,       -2.787567,       -1.188585
-1.783065,       -2.787567,       1.108565,       -2.049458
-1.741127,       -1.188585,       -2.049458,       1.732593
                    };
            return _data;
        }
    };
//    H: 1.0352
//    E: -0.3411

// ----------------------------------------------------------------------------
// Ribosum45_65N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum45_65N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum45_65N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.3075,       -2.182398,       -1.783065,       -1.741127,       -2.787567
-2.182398,       1.257972,       -2.787567,       -1.188585,       -2.787567
-1.783065,       -2.787567,       1.108565,       -2.049458,       -2.787567
-1.741127,       -1.188585,       -2.049458,       1.732593,       -2.787567
-2.787567,       -2.787567,       -2.787567,       -2.787567,       -2.787567
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum45_65d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum45_65d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum45_65d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.775581,       -8.218052,       -8.0941,       -4.695573,       -9.996419,       -14.3786,       -5.193712,       -12.090355,       -6.038011,       -4.778124,       -9.609072,       -6.405363,       -4.732584,       -11.962516,       -6.362059,       -8.574447
-8.218052,       -1.774422,       -9.241998,       -2.075417,       -9.98245,       -9.290563,       -5.93467,       -11.001998,       -10.288755,       -3.809927,       -12.463529,       -5.906038,       -6.025824,       -8.588134,       -7.645879,       -8.013339
-8.0941,       -9.241998,       -0.618284,       -5.971488,       -10.629538,       -14.919385,       -4.882832,       -8.833716,       -9.292423,       -6.415713,       -5.527801,       -6.954592,       -6.609154,       -8.221468,       -5.744434,       -10.582675
-4.695573,       -2.075417,       -5.971488,       4.64405,       -6.136422,       -7.140507,       1.422814,       -5.792274,       -6.219418,       2.528076,       -6.234167,       0.428791,       1.358005,       -5.497814,       -0.744247,       -3.09532
-9.996419,       -9.98245,       -10.629538,       -6.136422,       -5.481042,       -11.564134,       -3.924747,       -7.600093,       -8.627891,       -6.244041,       -11.691397,       -8.519006,       -2.615987,       -7.335368,       -6.289575,       -8.292056
-14.3786,       -9.290563,       -14.919385,       -7.140507,       -11.564134,       -2.671685,       -5.439599,       -6.211787,       -13.817847,       -4.138084,       -12.362009,       -8.308479,       -7.443724,       -8.356972,       -9.020164,       -6.099974
-5.193712,       -5.93467,       -4.882832,       1.422814,       -3.924747,       -5.439599,       5.464681,       -4.883316,       -6.597564,       1.744633,       -4.529337,       -0.620513,       2.523018,       -4.601234,       1.139575,       -4.022896
-12.090355,       -11.001998,       -8.833716,       -5.792274,       -7.600093,       -6.211787,       -4.883316,       -1.735422,       -6.529148,       -6.214274,       -13.454095,       -6.450646,       -4.342539,       -3.909194,       -8.006742,       -4.629012
-6.038011,       -10.288755,       -9.292423,       -6.219418,       -8.627891,       -13.817847,       -6.597564,       -6.529148,       -0.921339,       -5.497178,       -9.563835,       -6.711542,       -6.095285,       -6.29576,       -7.691441,       -11.819334
-4.778124,       -3.809927,       -6.415713,       2.528076,       -6.244041,       -4.138084,       1.744633,       -6.214274,       -5.497178,       5.670559,       -4.824935,       1.00642,       1.248277,       -4.866683,       -0.250282,       -4.363351
-9.609072,       -12.463529,       -5.527801,       -6.234167,       -11.691397,       -12.362009,       -4.529337,       -13.454095,       -9.563835,       -4.824935,       -2.09289,       -5.837853,       -6.305493,       -11.836824,       -4.136306,       -11.735521
-6.405363,       -5.906038,       -6.954592,       0.428791,       -8.519006,       -8.308479,       -0.620513,       -6.450646,       -6.711542,       1.00642,       -5.837853,       3.57935,       -0.881954,       -5.53195,       -2.156596,       -5.084805
-4.732584,       -6.025824,       -6.609154,       1.358005,       -2.615987,       -7.443724,       2.523018,       -4.342539,       -6.095285,       1.248277,       -6.305493,       -0.881954,       5.069263,       -2.976676,       0.969104,       -3.729022
-11.962516,       -8.588134,       -8.221468,       -5.497814,       -7.335368,       -8.356972,       -4.601234,       -3.909194,       -6.29576,       -4.866683,       -11.836824,       -5.53195,       -2.976676,       -3.297883,       -5.082661,       -5.099412
-6.362059,       -7.645879,       -5.744434,       -0.744247,       -6.289575,       -9.020164,       1.139575,       -8.006742,       -7.691441,       -0.250282,       -4.136306,       -2.156596,       0.969104,       -5.082661,       3.459531,       -4.603911
-8.574447,       -8.013339,       -10.582675,       -3.09532,       -8.292056,       -6.099974,       -4.022896,       -4.629012,       -11.819334,       -4.363351,       -11.735521,       -5.084805,       -3.729022,       -5.099412,       -4.603911,       0.136574
                    };
            return _data;
        }
    };
//    H: 3.9125
//    E: -2.8935


// ----------------------------------------------------------------------------
// Ribosum95_90 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.254028    0.217992    0.295502    0.232479
	struct Ribosum95_90 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum95_90>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.47758,       -3.926552,       -3.548472,       -3.433987
-3.926552,       1.608255,       -4.436786,       -2.518958
-3.548472,       -4.436786,       1.331104,       -3.730961
-3.433987,       -2.518958,       -3.730961,       1.96491
                    };
            return _data;
        }
    };
//    H: 1.6093
//    E: -0.8976

// ----------------------------------------------------------------------------
// Ribosum95_90N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum95_90N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum95_90N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.47758,       -3.926552,       -3.548472,       -3.433987,       -4.436786
-3.926552,       1.608255,       -4.436786,       -2.518958,       -4.436786
-3.548472,       -4.436786,       1.331104,       -3.730961,       -4.436786
-3.433987,       -2.518958,       -3.730961,       1.96491,       -4.436786
-4.436786,       -4.436786,       -4.436786,       -4.436786,       -4.436786
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum95_90d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum95_90d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum95_90d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-0.886414,       -8.431871,       -8.851788,       -5.19597,       -10.782188,       -999.0,       -7.196201,       -13.734053,       -7.328226,       -6.468892,       -10.502478,       -7.816373,       -5.704885,       -12.62212,       -7.388501,       -10.738627
-8.431871,       -0.437914,       -8.339331,       -4.121324,       -10.529202,       -8.581952,       -7.964372,       -12.369381,       -14.12019,       -4.207076,       -13.25563,       -6.73561,       -7.31834,       -8.328303,       -9.45254,       -10.339509
-8.851788,       -8.339331,       -0.369698,       -6.927624,       -11.203203,       -14.274989,       -5.922209,       -11.801895,       -10.327655,       -8.931282,       -7.291409,       -9.218862,       -7.74046,       -13.305025,       -6.047095,       -9.659992
-5.19597,       -4.121324,       -6.927624,       5.166192,       -7.876776,       -8.965742,       -1.17967,       -5.861805,       -8.665877,       0.810313,       -7.529598,       -0.684323,       -0.971018,       -7.814356,       -3.181913,       -4.211934
-10.782188,       -10.529202,       -11.203203,       -7.876776,       -2.404737,       -10.001309,       -4.246962,       -9.942681,       -9.566517,       -7.764358,       -10.660167,       -9.187327,       -3.485422,       -13.355116,       -6.814027,       -10.899009
-999.0,       -8.581952,       -14.274989,       -8.965742,       -10.001309,       -1.575057,       -5.067984,       -8.319595,       -13.039044,       -4.449618,       -12.364495,       -9.489001,       -8.767233,       -8.476372,       -8.808937,       -7.423146
-7.196201,       -7.964372,       -5.922209,       -1.17967,       -4.246962,       -5.067984,       5.805548,       -5.531117,       -8.701339,       -0.872266,       -5.370843,       -2.843924,       0.721953,       -7.397593,       0.095538,       -5.579245
-13.734053,       -12.369381,       -11.801895,       -5.861805,       -9.942681,       -8.319595,       -5.531117,       -0.931223,       -14.6804,       -7.090477,       -12.458899,       -6.106388,       -7.489607,       -5.718861,       -8.124236,       -7.093511
-7.328226,       -14.12019,       -10.327655,       -8.665877,       -9.566517,       -13.039044,       -8.701339,       -14.6804,       -0.602316,       -6.233223,       -8.885462,       -6.20811,       -6.790623,       -15.001918,       -9.829352,       -14.108173
-6.468892,       -4.207076,       -8.931282,       0.810313,       -7.764358,       -4.449618,       -0.872266,       -7.090477,       -6.233223,       5.931378,       -5.321105,       -0.016743,       -1.535167,       -5.167492,       -2.83374,       -5.68855
-10.502478,       -13.25563,       -7.291409,       -7.529598,       -10.660167,       -12.364495,       -5.370843,       -12.458899,       -8.885462,       -5.321105,       -1.734016,       -5.98799,       -7.719312,       -12.594866,       -5.791267,       -10.335405
-7.816373,       -6.73561,       -9.218862,       -0.684323,       -9.187327,       -9.489001,       -2.843924,       -6.106388,       -6.20811,       -0.016743,       -5.98799,       3.878257,       -3.034452,       -7.33831,       -3.770861,       -5.420382
-5.704885,       -7.31834,       -7.74046,       -0.971018,       -3.485422,       -8.767233,       0.721953,       -7.489607,       -6.790623,       -1.535167,       -7.719312,       -3.034452,       5.404453,       -5.490907,       -0.5545,       -4.676693
-12.62212,       -8.328303,       -13.305025,       -7.814356,       -13.355116,       -8.476372,       -7.397593,       -5.718861,       -15.001918,       -5.167492,       -12.594866,       -7.33831,       -5.490907,       -1.340933,       -5.901316,       -5.426062
-7.388501,       -9.45254,       -6.047095,       -3.181913,       -6.814027,       -8.808937,       0.095538,       -8.124236,       -9.829352,       -2.83374,       -5.791267,       -3.770861,       -0.5545,       -5.901316,       3.845609,       -5.338742
-10.738627,       -10.339509,       -9.659992,       -4.211934,       -10.899009,       -7.423146,       -5.579245,       -7.093511,       -14.108173,       -5.68855,       -10.335405,       -5.420382,       -4.676693,       -5.426062,       -5.338742,       0.502788
                    };
            return _data;
        }
    };
//    H: 4.7497
//    E: -6.4455


// ----------------------------------------------------------------------------
// Ribosum60_85 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.262147    0.211760    0.285382    0.240711
	struct Ribosum60_85 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum60_85>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.384845,       -3.539442,       -3.185301,       -3.147715
-3.539442,       1.60636,       -3.952724,       -2.059246
-3.185301,       -3.952724,       1.345653,       -3.416239
-3.147715,       -2.059246,       -3.416239,       1.872643
                    };
            return _data;
        }
    };
//    H: 1.4950
//    E: -0.7579

// ----------------------------------------------------------------------------
// Ribosum60_85N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum60_85N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum60_85N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.384845,       -3.539442,       -3.185301,       -3.147715,       -3.952724
-3.539442,       1.60636,       -3.952724,       -2.059246,       -3.952724
-3.185301,       -3.952724,       1.345653,       -3.416239,       -3.952724
-3.147715,       -2.059246,       -3.416239,       1.872643,       -3.952724
-3.952724,       -3.952724,       -3.952724,       -3.952724,       -3.952724
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum60_85d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum60_85d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum60_85d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-0.825002,       -8.789867,       -8.138405,       -5.359276,       -10.308103,       -14.882799,       -6.825425,       -12.819745,       -5.687891,       -5.453924,       -9.724141,       -7.556358,       -5.521855,       -13.209691,       -7.812514,       -9.678899
-8.789867,       -0.373006,       -9.290897,       -3.967421,       -11.024818,       -8.404926,       -6.611927,       -11.5699,       -11.4429,       -3.714417,       -11.976352,       -6.687857,       -7.71012,       -9.07673,       -9.465677,       -9.329889
-8.138405,       -9.290897,       -0.530688,       -7.054159,       -11.194324,       -13.481756,       -5.819005,       -12.283301,       -8.171979,       -7.826605,       -6.622184,       -6.818141,       -8.096193,       -12.060908,       -6.272483,       -10.745708
-5.359276,       -3.967421,       -7.054159,       5.057974,       -8.234782,       -8.6512,       -0.509825,       -5.917038,       -8.901949,       1.211343,       -7.486873,       -0.54295,       -0.842372,       -6.968751,       -2.914705,       -3.661803
-10.308103,       -11.024818,       -11.194324,       -8.234782,       -3.222134,       -11.252923,       -4.08032,       -9.371708,       -9.330271,       -7.41754,       -11.47,       -8.808648,       -3.163526,       -11.6512,       -6.541384,       -9.794851
-14.882799,       -8.404926,       -13.481756,       -8.6512,       -11.252923,       -1.443437,       -4.983769,       -7.006763,       -14.098427,       -4.500461,       -12.372949,       -8.697368,       -8.564968,       -9.663875,       -8.999601,       -5.529107
-6.825425,       -6.611927,       -5.819005,       -0.509825,       -4.08032,       -4.983769,       5.904014,       -4.966738,       -8.166657,       0.083242,       -5.193348,       -1.773088,       1.16859,       -6.661261,       0.702568,       -4.925489
-12.819745,       -11.5699,       -12.283301,       -5.917038,       -9.371708,       -7.006763,       -4.966738,       -1.02293,       -13.283301,       -7.09271,       -12.162963,       -6.37015,       -6.891351,       -5.836156,       -8.169272,       -6.462324
-5.687891,       -11.4429,       -8.171979,       -8.901949,       -9.330271,       -14.098427,       -8.166657,       -13.283301,       -0.784341,       -6.175158,       -9.877566,       -6.098413,       -7.474384,       -13.605229,       -9.875824,       -13.790103
-5.453924,       -3.714417,       -7.826605,       1.211343,       -7.41754,       -4.500461,       0.083242,       -7.09271,       -6.175158,       6.014487,       -4.89412,       0.449452,       -1.01069,       -4.62633,       -2.070411,       -5.564783
-9.724141,       -11.976352,       -6.622184,       -7.486873,       -11.47,       -12.372949,       -5.193348,       -12.162963,       -9.877566,       -4.89412,       -1.979118,       -5.91234,       -7.961554,       -11.698,       -5.197368,       -12.230797
-7.556358,       -6.687857,       -6.818141,       -0.54295,       -8.808648,       -8.697368,       -1.773088,       -6.37015,       -6.098413,       0.449452,       -5.91234,       3.791724,       -3.100373,       -5.104041,       -3.094738,       -5.685699
-5.521855,       -7.71012,       -8.096193,       -0.842372,       -3.163526,       -8.564968,       1.16859,       -6.891351,       -7.474384,       -1.01069,       -7.961554,       -3.100373,       5.25148,       -5.19832,       -0.455153,       -4.664927
-13.209691,       -9.07673,       -12.060908,       -6.968751,       -11.6512,       -9.663875,       -6.661261,       -5.836156,       -13.605229,       -4.62633,       -11.698,       -5.104041,       -5.19832,       -1.481383,       -5.996577,       -5.123987
-7.812514,       -9.465677,       -6.272483,       -2.914705,       -6.541384,       -8.999601,       0.702568,       -8.169272,       -9.875824,       -2.070411,       -5.197368,       -3.094738,       -0.455153,       -5.996577,       3.750712,       -5.777525
-9.678899,       -9.329889,       -10.745708,       -3.661803,       -9.794851,       -5.529107,       -4.925489,       -6.462324,       -13.790103,       -5.564783,       -12.230797,       -5.685699,       -4.664927,       -5.123987,       -5.777525,       0.318963
                    };
            return _data;
        }
    };
//    H: 4.6206
//    E: -3.2822


// ----------------------------------------------------------------------------
// Ribosum100_50 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.256429    0.220757    0.299812    0.223003
	struct Ribosum100_50 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum100_50>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.130118,       -1.62988,       -1.226193,       -1.268183
-1.62988,       1.106676,       -2.056653,       -0.8238
-1.226193,       -2.056653,       0.959271,       -1.411772
-1.268183,       -0.8238,       -1.411772,       1.543305
                    };
            return _data;
        }
    };
//    H: 0.7380
//    E: -0.1731

// ----------------------------------------------------------------------------
// Ribosum100_50N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum100_50N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum100_50N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.130118,       -1.62988,       -1.226193,       -1.268183,       -2.056653
-1.62988,       1.106676,       -2.056653,       -0.8238,       -2.056653
-1.226193,       -2.056653,       0.959271,       -1.411772,       -2.056653
-1.268183,       -0.8238,       -1.411772,       1.543305,       -2.056653
-2.056653,       -2.056653,       -2.056653,       -2.056653,       -2.056653
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum100_50d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum100_50d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum100_50d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.182248,       -8.105162,       -8.473133,       -4.900448,       -9.683515,       -13.580916,       -4.058006,       -12.145918,       -6.366265,       -5.004069,       -9.632387,       -6.31528,       -3.176613,       -12.063067,       -4.272793,       -8.836877
-8.105162,       -1.751697,       -9.494616,       -1.871638,       -10.276124,       -9.206426,       -5.666663,       -10.795614,       -8.110652,       -3.246006,       -11.155857,       -4.714189,       -5.742968,       -8.698428,       -7.23468,       -8.198066
-8.473133,       -9.494616,       -0.95367,       -5.874845,       -10.701545,       -14.870387,       -3.288916,       -9.191416,       -9.083894,       -6.320889,       -4.653239,       -6.925024,       -3.472497,       -8.372222,       -5.814026,       -10.151362
-4.900448,       -1.871638,       -5.874845,       4.452236,       -5.973353,       -3.368235,       1.800738,       -4.583859,       -4.391377,       2.726621,       -5.58166,       0.623563,       1.686915,       -5.012036,       -0.532092,       -2.780285
-9.683515,       -10.276124,       -10.701545,       -5.973353,       -5.841766,       -11.437214,       -3.389034,       -7.960406,       -8.295827,       -5.620312,       -11.180111,       -6.855853,       -2.81717,       -7.682525,       -6.222351,       -8.506495
-13.580916,       -9.206426,       -14.870387,       -3.368235,       -11.437214,       -3.106933,       -4.952081,       -6.494677,       -13.243639,       -3.94826,       -12.186574,       -7.371688,       -6.670109,       -8.614506,       -8.451012,       -6.274101
-4.058006,       -5.666663,       -3.288916,       1.800738,       -3.389034,       -4.952081,       5.320237,       -4.679435,       -6.172288,       2.402372,       -4.678703,       -0.086457,       2.744582,       -4.53568,       1.176104,       -3.23021
-12.145918,       -10.795614,       -9.191416,       -4.583859,       -7.960406,       -6.494677,       -4.679435,       -2.172023,       -6.867516,       -3.107219,       -10.078537,       -5.058632,       -4.461173,       -4.288126,       -6.9922,       -5.027712
-6.366265,       -8.110652,       -9.083894,       -4.391377,       -8.295827,       -13.243639,       -6.172288,       -6.867516,       -1.248026,       -3.248693,       -9.835116,       -6.149734,       -5.220539,       -6.680234,       -7.610919,       -10.838014
-5.004069,       -3.246006,       -6.320889,       2.726621,       -5.620312,       -3.94826,       2.402372,       -3.107219,       -3.248693,       5.557542,       -4.724941,       1.274408,       1.647336,       -4.557121,       0.097222,       -3.554583
-9.632387,       -11.155857,       -4.653239,       -5.58166,       -11.180111,       -12.186574,       -4.678703,       -10.078537,       -9.835116,       -4.724941,       -2.209568,       -5.465874,       -6.244791,       -10.997915,       -4.367469,       -6.385135
-6.31528,       -4.714189,       -6.925024,       0.623563,       -6.855853,       -7.371688,       -0.086457,       -5.058632,       -6.149734,       1.274408,       -5.465874,       3.434061,       -0.324241,       -4.852093,       -1.645505,       -3.159076
-3.176613,       -5.742968,       -3.472497,       1.686915,       -2.81717,       -6.670109,       2.744582,       -4.461173,       -5.220539,       1.647336,       -6.244791,       -0.324241,       4.892915,       -3.292465,       1.022329,       -2.269767
-12.063067,       -8.698428,       -8.372222,       -5.012036,       -7.682525,       -8.614506,       -4.53568,       -4.288126,       -6.680234,       -4.557121,       -10.997915,       -4.852093,       -3.292465,       -3.759512,       -4.365558,       -5.50452
-4.272793,       -7.23468,       -5.814026,       -0.532092,       -6.222351,       -8.451012,       1.176104,       -6.9922,       -7.610919,       0.097222,       -4.367469,       -1.645505,       1.022329,       -4.365558,       3.324007,       -3.844579
-8.836877,       -8.198066,       -10.151362,       -2.780285,       -8.506495,       -6.274101,       -3.23021,       -5.027712,       -10.838014,       -3.554583,       -6.385135,       -3.159076,       -2.269767,       -5.50452,       -3.844579,       -0.292617
                    };
            return _data;
        }
    };
//    H: 3.6425
//    E: -2.6647


// ----------------------------------------------------------------------------
// Ribosum100_85 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.250446    0.221163    0.297111    0.231280
	struct Ribosum100_85 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum100_85>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.480758,       -3.443146,       -3.100686,       -3.043967
-3.443146,       1.529651,       -3.983523,       -1.973471
-3.100686,       -3.983523,       1.274505,       -3.333668
-3.043967,       -1.973471,       -3.333668,       1.942098
                    };
            return _data;
        }
    };
//    H: 1.4944
//    E: -0.7427

// ----------------------------------------------------------------------------
// Ribosum100_85N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum100_85N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum100_85N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.480758,       -3.443146,       -3.100686,       -3.043967,       -3.983523
-3.443146,       1.529651,       -3.983523,       -1.973471,       -3.983523
-3.100686,       -3.983523,       1.274505,       -3.333668,       -3.983523
-3.043967,       -1.973471,       -3.333668,       1.942098,       -3.983523
-3.983523,       -3.983523,       -3.983523,       -3.983523,       -3.983523
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum100_85d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum100_85d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum100_85d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-0.618052,       -8.571946,       -7.889539,       -5.322935,       -10.048095,       -14.739071,       -6.703356,       -12.574779,       -5.428846,       -5.342841,       -9.572656,       -7.313611,       -5.514999,       -12.945617,       -7.585634,       -9.311619
-8.571946,       -0.360065,       -9.152339,       -3.732492,       -10.990878,       -8.402967,       -6.614615,       -11.494926,       -11.306983,       -4.20314,       -12.080551,       -6.564524,       -7.536226,       -8.955324,       -9.34447,       -9.086037
-7.889539,       -9.152339,       -0.415424,       -6.815598,       -11.066932,       -13.462013,       -5.812834,       -12.229923,       -8.047341,       -7.82369,       -6.61449,       -6.701002,       -7.85228,       -11.920819,       -6.162545,       -10.518439
-5.322935,       -3.732492,       -6.815598,       5.121701,       -8.004316,       -8.526177,       -0.397334,       -5.702005,       -8.670114,       1.316115,       -7.37928,       -0.405192,       -0.607646,       -6.752835,       -2.679936,       -3.310611
-10.048095,       -10.990878,       -11.066932,       -8.004316,       -3.121747,       -11.255901,       -4.088202,       -9.257887,       -9.194858,       -7.41857,       -11.498578,       -8.681595,       -2.945726,       -11.55812,       -6.426449,       -9.546629
-14.739071,       -8.402967,       -13.462013,       -8.526177,       -11.255901,       -1.589869,       -5.113353,       -7.030135,       -14.078684,       -4.621466,       -12.477192,       -8.693294,       -8.448036,       -9.670033,       -8.998808,       -5.449158
-6.703356,       -6.614615,       -5.812834,       -0.397334,       -4.088202,       -5.113353,       5.729536,       -4.977222,       -8.167699,       -0.050576,       -5.312151,       -1.784973,       1.27356,       -6.672422,       0.690369,       -4.820522
-12.574779,       -11.494926,       -12.229923,       -5.702005,       -9.257887,       -7.030135,       -4.977222,       -0.934251,       -13.143211,       -7.105842,       -12.157055,       -6.253123,       -6.644854,       -5.784194,       -8.068348,       -6.233746
-5.428846,       -11.306983,       -8.047341,       -8.670114,       -9.194858,       -14.078684,       -8.167699,       -13.143211,       -0.665864,       -6.167996,       -9.905146,       -6.066604,       -7.225095,       -13.495513,       -9.744676,       -13.529666
-5.342841,       -4.20314,       -7.82369,       1.316115,       -7.41857,       -4.621466,       -0.050576,       -7.105842,       -6.167996,       5.834769,       -5.382047,       0.426688,       -0.901951,       -4.634699,       -2.08326,       -5.447463
-9.572656,       -12.080551,       -6.61449,       -7.37928,       -11.498578,       -12.477192,       -5.312151,       -12.157055,       -9.905146,       -5.382047,       -2.127335,       -5.992294,       -7.836654,       -11.711643,       -5.207507,       -12.113205
-7.313611,       -6.564524,       -6.701002,       -0.405192,       -8.681595,       -8.693294,       -1.784973,       -6.253123,       -6.066604,       0.426688,       -5.992294,       3.822403,       -2.873577,       -4.99433,       -2.980131,       -5.453415
-5.514999,       -7.536226,       -7.85228,       -0.607646,       -2.945726,       -8.448036,       1.27356,       -6.644854,       -7.225095,       -0.901951,       -7.836654,       -2.873577,       5.341394,       -5.205109,       -0.274323,       -4.318114
-12.945617,       -8.955324,       -11.920819,       -6.752835,       -11.55812,       -9.670033,       -6.672422,       -5.784194,       -13.495513,       -4.634699,       -11.711643,       -4.99433,       -5.205109,       -1.983444,       -6.134947,       -4.989852
-7.585634,       -9.34447,       -6.162545,       -2.679936,       -6.426449,       -8.998808,       0.690369,       -8.068348,       -9.744676,       -2.08326,       -5.207507,       -2.980131,       -0.274323,       -6.134947,       3.797975,       -5.548621
-9.311619,       -9.086037,       -10.518439,       -3.310611,       -9.546629,       -5.449158,       -4.820522,       -6.233746,       -13.529666,       -5.447463,       -12.113205,       -5.453415,       -4.318114,       -4.989852,       -5.548621,       0.450138
                    };
            return _data;
        }
    };
//    H: 4.5450
//    E: -3.2428


// ----------------------------------------------------------------------------
// Ribosum80_80 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.260737    0.212015    0.283318    0.243930
	struct Ribosum80_80 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum80_80>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.300649,       -2.808815,       -2.553742,       -2.495199
-2.808815,       1.54996,       -3.190544,       -1.549013
-2.553742,       -3.190544,       1.298684,       -2.724668
-2.495199,       -1.549013,       -2.724668,       1.770859
                    };
            return _data;
        }
    };
//    H: 1.2720
//    E: -0.5270

// ----------------------------------------------------------------------------
// Ribosum80_80N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum80_80N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum80_80N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.300649,       -2.808815,       -2.553742,       -2.495199,       -3.190544
-2.808815,       1.54996,       -3.190544,       -1.549013,       -3.190544
-2.553742,       -3.190544,       1.298684,       -2.724668,       -3.190544
-2.495199,       -1.549013,       -2.724668,       1.770859,       -3.190544
-3.190544,       -3.190544,       -3.190544,       -3.190544,       -3.190544
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum80_80d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum80_80d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum80_80d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-0.835467,       -8.350499,       -8.309115,       -5.225921,       -9.694454,       -12.051624,       -6.205445,       -12.320554,       -6.153897,       -5.322562,       -9.883744,       -6.818973,       -5.053391,       -12.668156,       -7.261189,       -8.470903
-8.350499,       -0.361069,       -9.34761,       -2.627925,       -10.654302,       -7.565742,       -5.533549,       -11.087078,       -11.226849,       -3.522625,       -12.200413,       -5.977162,       -6.391721,       -7.752936,       -7.996766,       -7.832236
-8.309115,       -9.34761,       -0.584931,       -6.027538,       -10.947203,       -14.419906,       -4.889498,       -10.515348,       -8.385889,       -6.917417,       -5.038928,       -7.23628,       -7.276324,       -10.136757,       -5.80296,       -11.593562
-5.225921,       -2.627925,       -6.027538,       4.981342,       -7.344674,       -7.553216,       0.088772,       -5.503752,       -7.998587,       1.570471,       -7.227176,       0.078567,       -0.302882,       -5.663865,       -2.412384,       -2.949454
-9.694454,       -10.654302,       -10.947203,       -7.344674,       -2.865968,       -10.147129,       -3.392555,       -8.204853,       -8.411176,       -6.114694,       -10.043464,       -8.517163,       -2.57903,       -9.278677,       -6.372645,       -7.630582
-12.051624,       -7.565742,       -14.419906,       -7.553216,       -10.147129,       -1.017634,       -4.894877,       -7.036295,       -10.923864,       -3.874592,       -12.642409,       -7.801206,       -6.965184,       -8.472376,       -8.549409,       -5.880422
-6.205445,       -5.533549,       -4.889498,       0.088772,       -3.392555,       -4.894877,       5.84615,       -4.983088,       -7.584239,       0.846927,       -4.839344,       -1.559705,       1.59422,       -5.446513,       0.742004,       -4.335018
-12.320554,       -11.087078,       -10.515348,       -5.503752,       -8.204853,       -7.036295,       -4.983088,       -0.765924,       -9.533309,       -6.726928,       -12.212673,       -6.18365,       -5.734219,       -5.405442,       -7.640347,       -5.826218
-6.153897,       -11.226849,       -8.385889,       -7.998587,       -8.411176,       -10.923864,       -7.584239,       -9.533309,       -0.563382,       -5.855328,       -8.905256,       -6.183171,       -6.434039,       -8.727173,       -8.468212,       -13.804086
-5.322562,       -3.522625,       -6.917417,       1.570471,       -6.114694,       -3.874592,       0.846927,       -6.726928,       -5.855328,       5.95992,       -4.924873,       0.667578,       -0.174722,       -4.462897,       -1.436609,       -4.48173
-9.883744,       -12.200413,       -5.038928,       -7.227176,       -10.043464,       -12.642409,       -4.839344,       -12.212673,       -8.905256,       -4.924873,       -1.914619,       -5.740247,       -7.009879,       -12.029048,       -4.543245,       -12.199066
-6.818973,       -5.977162,       -7.23628,       0.078567,       -8.517163,       -7.801206,       -1.559705,       -6.18365,       -6.183171,       0.667578,       -5.740247,       3.720048,       -2.351546,       -4.734116,       -3.097402,       -4.87804
-5.053391,       -6.391721,       -7.276324,       -0.302882,       -2.57903,       -6.965184,       1.59422,       -5.734219,       -6.434039,       -0.174722,       -7.009879,       -2.351546,       5.15322,       -4.559067,       -0.03082,       -4.196433
-12.668156,       -7.752936,       -10.136757,       -5.663865,       -9.278677,       -8.472376,       -5.446513,       -5.405442,       -8.727173,       -4.462897,       -12.029048,       -4.734116,       -4.559067,       -1.818245,       -6.42104,       -4.561417
-7.261189,       -7.996766,       -5.80296,       -2.412384,       -6.372645,       -8.549409,       0.742004,       -7.640347,       -8.468212,       -1.436609,       -4.543245,       -3.097402,       -0.03082,       -6.42104,       3.686617,       -5.052323
-8.470903,       -7.832236,       -11.593562,       -2.949454,       -7.630582,       -5.880422,       -4.335018,       -5.826218,       -13.804086,       -4.48173,       -12.199066,       -4.87804,       -4.196433,       -4.561417,       -5.052323,       0.09723
                    };
            return _data;
        }
    };
//    H: 4.3884
//    E: -2.9716


// ----------------------------------------------------------------------------
// Ribosum60_75 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.256064    0.219429    0.296754    0.227753
	struct Ribosum60_75 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum60_75>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.330194,       -2.36609,       -2.039156,       -1.993359
-2.36609,       1.333359,       -2.881578,       -1.280906
-2.039156,       -2.881578,       1.16317,       -2.28524
-1.993359,       -1.280906,       -2.28524,       1.771729
                    };
            return _data;
        }
    };
//    H: 1.1210
//    E: -0.3989

// ----------------------------------------------------------------------------
// Ribosum60_75N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum60_75N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum60_75N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.330194,       -2.36609,       -2.039156,       -1.993359,       -2.881578
-2.36609,       1.333359,       -2.881578,       -1.280906,       -2.881578
-2.039156,       -2.881578,       1.16317,       -2.28524,       -2.881578
-1.993359,       -1.280906,       -2.28524,       1.771729,       -2.881578
-2.881578,       -2.881578,       -2.881578,       -2.881578,       -2.881578
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum60_75d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum60_75d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum60_75d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.270154,       -8.377359,       -8.208558,       -5.067189,       -10.363755,       -13.765761,       -5.583033,       -11.904215,       -5.789121,       -4.749852,       -10.362094,       -6.50724,       -4.770715,       -13.149898,       -6.247513,       -8.267991
-8.377359,       -1.308507,       -9.028122,       -2.224071,       -10.144152,       -8.703853,       -5.715672,       -11.20487,       -10.524107,       -3.742909,       -12.6761,       -6.039592,       -6.230498,       -8.831832,       -7.57666,       -7.886613
-8.208558,       -9.028122,       -0.588744,       -6.057562,       -11.099639,       -14.738261,       -4.788043,       -8.857746,       -9.389363,       -6.517102,       -5.216231,       -7.024635,       -6.753639,       -8.127929,       -5.519555,       -10.690406
-5.067189,       -2.224071,       -6.057562,       4.797716,       -6.565253,       -7.417685,       1.112054,       -5.928238,       -7.119006,       2.267393,       -6.798884,       0.325777,       0.96813,       -5.85016,       -1.163876,       -2.994998
-10.363755,       -10.144152,       -11.099639,       -6.565253,       -5.019641,       -11.246483,       -3.754101,       -7.594056,       -8.687212,       -6.183367,       -11.53517,       -8.548149,       -2.61474,       -7.70688,       -6.320436,       -7.946279
-13.765761,       -8.703853,       -14.738261,       -7.417685,       -11.246483,       -2.048335,       -5.158062,       -6.515748,       -13.469772,       -4.009161,       -12.450454,       -8.20788,       -7.512685,       -8.53279,       -8.938876,       -6.390208
-5.583033,       -5.715672,       -4.788043,       1.112054,       -3.754101,       -5.158062,       5.560952,       -4.941381,       -6.915205,       1.540618,       -4.425725,       -0.950537,       2.262185,       -4.717583,       1.054342,       -3.978969
-11.904215,       -11.20487,       -8.857746,       -5.928238,       -7.594056,       -6.515748,       -4.941381,       -1.408676,       -6.414516,       -6.64725,       -13.017084,       -6.806317,       -4.652961,       -4.367866,       -7.938826,       -4.686463
-5.789121,       -10.524107,       -9.389363,       -7.119006,       -8.687212,       -13.469772,       -6.915205,       -6.414516,       -0.8448,       -5.604994,       -9.833595,       -6.64814,       -5.853215,       -6.258333,       -7.661428,       -11.641558
-4.749852,       -3.742909,       -6.517102,       2.267393,       -6.183367,       -4.009161,       1.540618,       -6.64725,       -5.604994,       5.735736,       -5.150117,       0.919674,       0.874066,       -4.826782,       -0.514234,       -4.50751
-10.362094,       -12.6761,       -5.216231,       -6.798884,       -11.53517,       -12.450454,       -4.425725,       -13.017084,       -9.833595,       -5.150117,       -2.140738,       -6.071922,       -6.652072,       -11.83299,       -4.181258,       -11.743092
-6.50724,       -6.039592,       -7.024635,       0.325777,       -8.548149,       -8.20788,       -0.950537,       -6.806317,       -6.64814,       0.919674,       -6.071922,       3.623545,       -1.348374,       -5.246689,       -2.34329,       -5.049627
-4.770715,       -6.230498,       -6.753639,       0.96813,       -2.61474,       -7.512685,       2.262185,       -4.652961,       -5.853215,       0.874066,       -6.652072,       -1.348374,       5.128225,       -3.123066,       0.692262,       -3.941542
-13.149898,       -8.831832,       -8.127929,       -5.85016,       -7.70688,       -8.53279,       -4.717583,       -4.367866,       -6.258333,       -4.826782,       -11.83299,       -5.246689,       -3.123066,       -2.999578,       -5.409559,       -4.797075
-6.247513,       -7.57666,       -5.519555,       -1.163876,       -6.320436,       -8.938876,       1.054342,       -7.938826,       -7.661428,       -0.514234,       -4.181258,       -2.34329,       0.692262,       -5.409559,       3.538474,       -4.513557
-8.267991,       -7.886613,       -10.690406,       -2.994998,       -7.946279,       -6.390208,       -3.978969,       -4.686463,       -11.641558,       -4.50751,       -11.743092,       -5.049627,       -3.941542,       -4.797075,       -4.513557,       0.160399
                    };
            return _data;
        }
    };
//    H: 4.0484
//    E: -2.9162


// ----------------------------------------------------------------------------
// Ribosum65_45 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.282669    0.200503    0.274076    0.242752
	struct Ribosum65_45 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum65_45>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.566664,       -0.944841,       -0.595061,       -0.600126
-0.944841,       0.904246,       -1.615089,       -0.380995
-0.595061,       -1.615089,       0.821308,       -0.851766
-0.600126,       -0.380995,       -0.851766,       1.01373
                    };
            return _data;
        }
    };
//    H: 0.3482
//    E: -0.0218

// ----------------------------------------------------------------------------
// Ribosum65_45N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum65_45N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum65_45N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.566664,       -0.944841,       -0.595061,       -0.600126,       -1.615089
-0.944841,       0.904246,       -1.615089,       -0.380995,       -1.615089
-0.595061,       -1.615089,       0.821308,       -0.851766,       -1.615089
-0.600126,       -0.380995,       -0.851766,       1.01373,       -1.615089
-1.615089,       -1.615089,       -1.615089,       -1.615089,       -1.615089
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum65_45d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum65_45d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum65_45d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-3.950241,       -6.045689,       -10.483146,       -4.19409,       -11.780467,       -11.834373,       -4.357584,       -12.659909,       -8.779481,       -5.385908,       -11.351091,       -5.487456,       -3.768936,       -13.036874,       -4.594417,       -10.456564
-6.045689,       -2.159951,       -10.482579,       -1.792419,       -11.512428,       -8.338311,       -5.0012,       -10.107528,       -8.537404,       -2.418827,       -8.787449,       -5.501427,       -4.182303,       -9.851748,       -5.376799,       -8.379093
-10.483146,       -10.482579,       -2.655489,       -4.988012,       -11.428816,       -14.332718,       -1.731802,       -11.072133,       -8.519658,       -5.119463,       -4.620636,       -8.21153,       -2.550177,       -9.841171,       -5.855941,       -7.376375
-4.19409,       -1.792419,       -4.988012,       3.798183,       -5.439159,       -2.325028,       2.390007,       -4.125554,       -3.719296,       3.377195,       -4.583541,       0.957175,       2.054112,       -4.303864,       -0.092077,       -3.132634
-11.780467,       -11.512428,       -11.428816,       -5.439159,       -6.733838,       -8.373277,       -3.126577,       -8.431407,       -8.886451,       -3.958369,       -10.749252,       -5.97396,       -3.119312,       -8.166498,       -6.694278,       -10.11916
-11.834373,       -8.338311,       -14.332718,       -2.325028,       -8.373277,       -3.434434,       -3.138265,       -5.279615,       -10.360949,       -2.484224,       -10.714903,       -4.744628,       -3.373935,       -7.411343,       -5.280133,       -4.725694
-4.357584,       -5.0012,       -1.731802,       2.390007,       -3.126577,       -3.138265,       5.353337,       -3.794277,       -4.225648,       3.053586,       -4.05536,       0.388681,       3.427027,       -3.838646,       1.445303,       -3.258778
-12.659909,       -10.107528,       -11.072133,       -4.125554,       -8.431407,       -5.279615,       -3.794277,       -3.915136,       -9.16527,       -2.891047,       -10.476118,       -4.648006,       -3.205661,       -6.51352,       -5.986359,       -6.872772
-8.779481,       -8.537404,       -8.519658,       -3.719296,       -8.886451,       -10.360949,       -4.225648,       -9.16527,       -2.931687,       -2.575886,       -10.616073,       -5.592286,       -3.346139,       -8.96276,       -8.571569,       -11.749707
-5.385908,       -2.418827,       -5.119463,       3.377195,       -3.958369,       -2.484224,       3.053586,       -2.891047,       -2.575886,       5.687113,       -3.461352,       1.867335,       2.554204,       -3.956819,       0.539629,       -3.072616
-11.351091,       -8.787449,       -4.620636,       -4.583541,       -10.749252,       -10.714903,       -4.05536,       -10.476118,       -10.616073,       -3.461352,       -2.53421,       -4.834879,       -5.074433,       -11.033951,       -4.167146,       -6.652968
-5.487456,       -5.501427,       -8.21153,       0.957175,       -5.97396,       -4.744628,       0.388681,       -4.648006,       -5.592286,       1.867335,       -4.834879,       2.97217,       0.270165,       -5.282407,       -1.398927,       -4.010369
-3.768936,       -4.182303,       -2.550177,       2.054112,       -3.119312,       -3.373935,       3.427027,       -3.205661,       -3.346139,       2.554204,       -5.074433,       0.270165,       4.212851,       -3.175316,       1.149664,       -1.85124
-13.036874,       -9.851748,       -9.841171,       -4.303864,       -8.166498,       -7.411343,       -3.838646,       -6.51352,       -8.96276,       -3.956819,       -11.033951,       -5.282407,       -3.175316,       -5.912886,       -3.570818,       -7.348755
-4.594417,       -5.376799,       -5.855941,       -0.092077,       -6.694278,       -5.280133,       1.445303,       -5.986359,       -8.571569,       0.539629,       -4.167146,       -1.398927,       1.149664,       -3.570818,       2.753901,       -2.582702
-10.456564,       -8.379093,       -7.376375,       -3.132634,       -10.11916,       -4.725694,       -3.258778,       -6.872772,       -11.749707,       -3.072616,       -6.652968,       -4.010369,       -1.85124,       -7.348755,       -2.582702,       -1.4508
                    };
            return _data;
        }
    };
//    H: 3.3175
//    E: -2.5993


// ----------------------------------------------------------------------------
// Ribosum100_30 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.258284    0.219532    0.297342    0.224842
	struct Ribosum100_30 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum100_30>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.97236,       -1.344047,       -0.922482,       -1.006582
-1.344047,       1.001351,       -1.699386,       -0.614272
-0.922482,       -1.699386,       0.854425,       -1.113
-1.006582,       -0.614272,       -1.113,       1.383155
                    };
            return _data;
        }
    };
//    H: 0.5622
//    E: -0.0959

// ----------------------------------------------------------------------------
// Ribosum100_30N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum100_30N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum100_30N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.97236,       -1.344047,       -0.922482,       -1.006582,       -1.699386
-1.344047,       1.001351,       -1.699386,       -0.614272,       -1.699386
-0.922482,       -1.699386,       0.854425,       -1.113,       -1.699386
-1.006582,       -0.614272,       -1.113,       1.383155,       -1.699386
-1.699386,       -1.699386,       -1.699386,       -1.699386,       -1.699386
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum100_30d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum100_30d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum100_30d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.603894,       -8.470122,       -8.821726,       -5.074954,       -10.056229,       -13.442235,       -3.871265,       -12.10472,       -6.624957,       -5.220724,       -9.691504,       -6.49591,       -2.485164,       -12.2628,       -3.545733,       -8.866521
-8.470122,       -1.853437,       -9.594466,       -1.654023,       -10.55259,       -8.854428,       -5.438174,       -10.682187,       -7.170095,       -2.695882,       -10.383629,       -4.924468,       -5.596511,       -8.877496,       -7.166062,       -8.384784
-8.821726,       -9.594466,       -1.326941,       -6.067754,       -10.64682,       -15.136875,       -2.572318,       -9.357168,       -9.390474,       -6.291214,       -4.22346,       -7.125567,       -2.824172,       -8.010915,       -5.829295,       -9.761374
-5.074954,       -1.654023,       -6.067754,       4.253602,       -5.775143,       -2.374198,       2.030071,       -4.178441,       -3.791566,       2.875845,       -4.929956,       0.745141,       1.878742,       -4.540369,       -0.393684,       -2.455107
-10.056229,       -10.55259,       -10.64682,       -5.775143,       -6.20499,       -11.694097,       -3.240654,       -8.325129,       -7.764284,       -5.395536,       -11.479638,       -6.201176,       -2.907259,       -8.029929,       -6.206051,       -8.849813
-13.442235,       -8.854428,       -15.136875,       -2.374198,       -11.694097,       -3.457087,       -5.067683,       -6.862591,       -12.895932,       -3.754496,       -12.06433,       -7.102715,       -6.465591,       -8.947071,       -8.303667,       -6.640721
-3.871265,       -5.438174,       -2.572318,       2.030071,       -3.240654,       -5.067683,       5.221619,       -4.387006,       -6.029273,       2.800486,       -4.708279,       0.250943,       2.926251,       -4.345193,       1.189222,       -3.008077
-12.10472,       -10.682187,       -9.357168,       -4.178441,       -8.325129,       -6.862591,       -4.387006,       -2.559595,       -7.141247,       -2.204757,       -9.136048,       -4.410244,       -4.32651,       -4.668945,       -6.47042,       -5.428428
-6.624957,       -7.170095,       -9.390474,       -3.791566,       -7.764284,       -12.895932,       -6.029273,       -7.141247,       -1.623253,       -2.569904,       -9.906843,       -6.18917,       -4.86863,       -6.980451,       -7.672718,       -10.145129
-5.220724,       -2.695882,       -6.291214,       2.875845,       -5.395536,       -3.754496,       2.800486,       -2.204757,       -2.569904,       5.488602,       -4.774661,       1.424606,       1.888583,       -4.161876,       0.327374,       -3.034405
-9.691504,       -10.383629,       -4.22346,       -4.929956,       -11.479638,       -12.06433,       -4.708279,       -9.136048,       -9.906843,       -4.774661,       -2.305651,       -5.534233,       -6.320774,       -10.568378,       -4.341619,       -5.019533
-6.49591,       -4.924468,       -7.125567,       0.745141,       -6.201176,       -7.102715,       0.250943,       -4.410244,       -6.18917,       1.424606,       -5.534233,       3.320576,       0.063396,       -4.611534,       -1.261042,       -2.574439
-2.485164,       -5.596511,       -2.824172,       1.878742,       -2.907259,       -6.465591,       2.926251,       -4.32651,       -4.86863,       1.888583,       -6.320774,       0.063396,       4.724416,       -3.52938,       1.044086,       -1.580581
-12.2628,       -8.877496,       -8.010915,       -4.540369,       -8.029929,       -8.947071,       -4.345193,       -4.668945,       -6.980451,       -4.161876,       -10.568378,       -4.611534,       -3.52938,       -4.137848,       -4.199159,       -5.903669
-3.545733,       -7.166062,       -5.829295,       -0.393684,       -6.206051,       -8.303667,       1.189222,       -6.47042,       -7.672718,       0.327374,       -4.341619,       -1.261042,       1.044086,       -4.199159,       3.18976,       -3.643971
-8.866521,       -8.384784,       -9.761374,       -2.455107,       -8.849813,       -6.640721,       -3.008077,       -5.428428,       -10.145129,       -3.034405,       -5.019533,       -2.574439,       -1.580581,       -5.903669,       -3.643971,       -0.714557
                    };
            return _data;
        }
    };
//    H: 3.4640
//    E: -2.6041


// ----------------------------------------------------------------------------
// Ribosum55_80 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.255397    0.216797    0.290151    0.237655
	struct Ribosum55_80 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum55_80>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.349704,       -2.703555,       -2.444639,       -2.409977
-2.703555,       1.467629,       -3.161319,       -1.449326
-2.444639,       -3.161319,       1.242958,       -2.620649
-2.409977,       -1.449326,       -2.620649,       1.802301
                    };
            return _data;
        }
    };
//    H: 1.2492
//    E: -0.5027

// ----------------------------------------------------------------------------
// Ribosum55_80N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum55_80N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum55_80N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.349704,       -2.703555,       -2.444639,       -2.409977,       -3.161319
-2.703555,       1.467629,       -3.161319,       -1.449326,       -3.161319
-2.444639,       -3.161319,       1.242958,       -2.620649,       -3.161319
-2.409977,       -1.449326,       -2.620649,       1.802301,       -3.161319
-3.161319,       -3.161319,       -3.161319,       -3.161319,       -3.161319
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum55_80d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum55_80d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum55_80d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-0.734692,       -8.761408,       -8.174567,       -5.223516,       -9.833099,       -13.08898,       -6.060429,       -12.192934,       -5.650688,       -5.056032,       -10.05937,       -6.640461,       -4.828659,       -12.543431,       -7.106117,       -8.233563
-8.761408,       -0.605554,       -9.089901,       -2.4691,       -10.706774,       -7.949542,       -5.653725,       -11.355941,       -10.573351,       -3.688353,       -12.058132,       -5.897557,       -6.348401,       -8.62802,       -7.776401,       -7.743282
-8.174567,       -9.089901,       -0.528782,       -5.930498,       -10.316194,       -14.292405,       -4.774676,       -10.742598,       -8.737179,       -6.837676,       -5.004042,       -6.872137,       -7.275291,       -9.375816,       -5.786885,       -11.287125
-5.223516,       -2.4691,       -5.930498,       4.953654,       -7.055859,       -7.820531,       0.401773,       -5.688233,       -7.833578,       1.803064,       -7.058368,       0.187586,       0.090833,       -6.001918,       -2.060065,       -2.828257
-9.833099,       -10.706774,       -10.316194,       -7.055859,       -3.93612,       -10.946973,       -3.481269,       -8.131329,       -8.382357,       -6.3572,       -11.211512,       -8.28676,       -2.491501,       -9.785562,       -6.317817,       -7.48963
-13.08898,       -7.949542,       -14.292405,       -7.820531,       -10.946973,       -1.306537,       -4.883511,       -7.398206,       -13.858003,       -4.045761,       -12.556636,       -8.392358,       -7.853075,       -8.401983,       -9.02403,       -6.053916
-6.060429,       -5.653725,       -4.774676,       0.401773,       -3.481269,       -4.883511,       5.728164,       -4.821085,       -7.467762,       0.987049,       -4.777283,       -1.351764,       1.812036,       -5.31334,       0.873614,       -4.103847
-12.192934,       -11.355941,       -10.742598,       -5.688233,       -8.131329,       -7.398206,       -4.821085,       -0.953577,       -8.737293,       -6.937014,       -12.090522,       -6.518929,       -5.648066,       -4.951909,       -7.707934,       -5.912772
-5.650688,       -10.573351,       -8.737179,       -7.833578,       -8.382357,       -13.858003,       -7.467762,       -8.737293,       -0.6439,       -5.897266,       -9.746589,       -6.199194,       -6.413272,       -8.231903,       -8.405585,       -13.481503
-5.056032,       -3.688353,       -6.837676,       1.803064,       -6.3572,       -4.045761,       0.987049,       -6.937014,       -5.897266,       5.853953,       -5.125302,       0.72446,       0.107595,       -4.523577,       -1.223319,       -4.440724
-10.05937,       -12.058132,       -5.004042,       -7.058368,       -11.211512,       -12.556636,       -4.777283,       -12.090522,       -9.746589,       -5.125302,       -2.217265,       -5.772316,       -7.085635,       -11.74698,       -4.403049,       -11.791094
-6.640461,       -5.897557,       -6.872137,       0.187586,       -8.28676,       -8.392358,       -1.351764,       -6.518929,       -6.199194,       0.72446,       -5.772316,       3.702148,       -2.069709,       -4.585153,       -2.764435,       -4.987145
-4.828659,       -6.348401,       -7.275291,       0.090833,       -2.491501,       -7.853075,       1.812036,       -5.648066,       -6.413272,       0.107595,       -7.085635,       -2.069709,       5.178342,       -4.234331,       0.180128,       -4.106318
-12.543431,       -8.62802,       -9.375816,       -6.001918,       -9.785562,       -8.401983,       -5.31334,       -4.951909,       -8.231903,       -4.523577,       -11.74698,       -4.585153,       -4.234331,       -2.468925,       -5.90609,       -4.331645
-7.106117,       -7.776401,       -5.786885,       -2.060065,       -6.317817,       -9.02403,       0.873614,       -7.707934,       -8.405585,       -1.223319,       -4.403049,       -2.764435,       0.180128,       -5.90609,       3.65226,       -4.937236
-8.233563,       -7.743282,       -11.287125,       -2.828257,       -7.48963,       -6.053916,       -4.103847,       -5.912772,       -13.481503,       -4.440724,       -11.791094,       -4.987145,       -4.106318,       -4.331645,       -4.937236,       0.188224
                    };
            return _data;
        }
    };
//    H: 4.2854
//    E: -2.9741


// ----------------------------------------------------------------------------
// Ribosum100_65 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.256583    0.220164    0.300371    0.222882
	struct Ribosum100_65 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum100_65>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.307508,       -2.181705,       -1.783831,       -1.743049
-2.181705,       1.258348,       -2.782624,       -1.187445
-1.783831,       -2.782624,       1.10869,       -2.049896
-1.743049,       -1.187445,       -2.049896,       1.732663
                    };
            return _data;
        }
    };
//    H: 1.0350
//    E: -0.3409

// ----------------------------------------------------------------------------
// Ribosum100_65N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum100_65N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum100_65N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.307508,       -2.181705,       -1.783831,       -1.743049,       -2.782624
-2.181705,       1.258348,       -2.782624,       -1.187445,       -2.782624
-1.783831,       -2.782624,       1.10869,       -2.049896,       -2.782624
-1.743049,       -1.187445,       -2.049896,       1.732663,       -2.782624
-2.782624,       -2.782624,       -2.782624,       -2.782624,       -2.782624
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum100_65d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum100_65d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum100_65d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.763905,       -8.24526,       -8.088983,       -4.704803,       -9.980776,       -14.351816,       -5.205152,       -12.074668,       -6.026733,       -4.774313,       -9.585246,       -6.389645,       -4.729629,       -11.939576,       -6.355971,       -8.615059
-8.24526,       -1.763396,       -9.230088,       -2.072428,       -9.974281,       -9.265578,       -5.931168,       -10.980555,       -10.327865,       -3.820829,       -12.459379,       -5.914185,       -6.041182,       -8.565489,       -7.642516,       -7.991158
-8.088983,       -9.230088,       -0.618983,       -5.971178,       -10.618257,       -14.880888,       -4.883151,       -8.816149,       -9.281171,       -6.410175,       -5.525209,       -6.960528,       -6.614107,       -8.220043,       -5.740343,       -10.578678
-4.704803,       -2.072428,       -5.971178,       4.646075,       -6.142544,       -7.127055,       1.421034,       -5.785244,       -6.221928,       2.525092,       -6.231694,       0.428341,       1.355495,       -5.491832,       -0.747649,       -3.09341
-9.980776,       -9.974281,       -10.618257,       -6.142544,       -5.467228,       -11.556541,       -3.922764,       -7.588087,       -8.610162,       -6.230584,       -11.686004,       -8.506097,       -2.611003,       -7.33361,       -6.310439,       -8.284287
-14.351816,       -9.265578,       -14.880888,       -7.127055,       -11.556541,       -2.666662,       -5.429335,       -6.228049,       -13.793425,       -4.132143,       -12.342233,       -8.290805,       -7.442948,       -8.340831,       -9.008565,       -6.08509
-5.205152,       -5.931168,       -4.883151,       1.421034,       -3.922764,       -5.429335,       5.464985,       -4.900838,       -6.600808,       1.743873,       -4.525013,       -0.619983,       2.519266,       -4.610917,       1.138004,       -4.01967
-12.074668,       -10.980555,       -8.816149,       -5.785244,       -7.588087,       -6.228049,       -4.900838,       -1.730414,       -6.538555,       -6.204758,       -13.439415,       -6.457544,       -4.341117,       -3.915414,       -8.000803,       -4.617733
-6.026733,       -10.327865,       -9.281171,       -6.221928,       -8.610162,       -13.793425,       -6.600808,       -6.538555,       -0.921776,       -5.486741,       -9.57674,       -6.698957,       -6.089254,       -6.314088,       -7.678015,       -11.804295
-4.774313,       -3.820829,       -6.410175,       2.525092,       -6.230584,       -4.132143,       1.743873,       -6.204758,       -5.486741,       5.670278,       -4.819475,       1.006352,       1.245265,       -4.858112,       -0.252435,       -4.359542
-9.585246,       -12.459379,       -5.525209,       -6.231694,       -11.686004,       -12.342233,       -4.525013,       -13.439415,       -9.57674,       -4.819475,       -2.091018,       -5.833497,       -6.299431,       -11.82442,       -4.13955,       -11.716891
-6.389645,       -5.914185,       -6.960528,       0.428341,       -8.506097,       -8.290805,       -0.619983,       -6.457544,       -6.698957,       1.006352,       -5.833497,       3.579476,       -0.885351,       -5.528172,       -2.158452,       -5.084616
-4.729629,       -6.041182,       -6.614107,       1.355495,       -2.611003,       -7.442948,       2.519266,       -4.341117,       -6.089254,       1.245265,       -6.299431,       -0.885351,       5.070009,       -2.982456,       0.967325,       -3.721373
-11.939576,       -8.565489,       -8.220043,       -5.491832,       -7.33361,       -8.340831,       -4.610917,       -3.915414,       -6.314088,       -4.858112,       -11.82442,       -5.528172,       -2.982456,       -3.312903,       -5.090377,       -5.096231
-6.355971,       -7.642516,       -5.740343,       -0.747649,       -6.310439,       -9.008565,       1.138004,       -8.000803,       -7.678015,       -0.252435,       -4.13955,       -2.158452,       0.967325,       -5.090377,       3.460254,       -4.594919
-8.615059,       -7.991158,       -10.578678,       -3.09341,       -8.284287,       -6.08509,       -4.01967,       -4.617733,       -11.804295,       -4.359542,       -11.716891,       -5.084616,       -3.721373,       -5.096231,       -4.594919,       0.13769
                    };
            return _data;
        }
    };
//    H: 3.9130
//    E: -2.8914


// ----------------------------------------------------------------------------
// Ribosum65_30 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.290456    0.193008    0.263232    0.253304
	struct Ribosum65_30 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum65_30>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.409413,       -0.802971,       -0.515864,       -0.47413
-0.802971,       0.848419,       -1.5205,       -0.309375
-0.515864,       -1.5205,       0.776665,       -0.740562
-0.47413,       -0.309375,       -0.740562,       0.889247
                    };
            return _data;
        }
    };
//    H: 0.2763
//    E: 0.0003

// ----------------------------------------------------------------------------
// Ribosum65_30N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum65_30N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum65_30N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.409413,       -0.802971,       -0.515864,       -0.47413,       -1.5205
-0.802971,       0.848419,       -1.5205,       -0.309375,       -1.5205
-0.515864,       -1.5205,       0.776665,       -0.740562,       -1.5205
-0.47413,       -0.309375,       -0.740562,       0.889247,       -1.5205
-1.5205,       -1.5205,       -1.5205,       -1.5205,       -1.5205
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum65_30d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum65_30d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum65_30d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-4.42127,       -6.420786,       -10.855804,       -4.100629,       -12.156349,       -11.945129,       -3.900116,       -13.058258,       -9.1528,       -4.958993,       -11.592653,       -4.768908,       -3.689178,       -13.392143,       -4.557013,       -10.97026
-6.420786,       -2.436406,       -10.683684,       -1.95523,       -11.795134,       -8.031843,       -4.287074,       -10.388028,       -8.815072,       -1.96867,       -8.963106,       -5.535568,       -4.143217,       -10.053435,       -5.595737,       -8.751377
-10.855804,       -10.683684,       -2.930617,       -5.247568,       -11.587032,       -14.51798,       -1.867773,       -11.236869,       -8.795519,       -5.23309,       -4.79847,       -8.459905,       -2.670236,       -10.10352,       -5.987278,       -7.151762
-4.100629,       -1.95523,       -5.247568,       3.592766,       -5.31643,       -2.008152,       2.539907,       -4.127152,       -4.00531,       3.441772,       -4.771036,       0.938531,       2.081664,       -4.364289,       -0.009989,       -3.114835
-12.156349,       -11.795134,       -11.587032,       -5.31643,       -7.016502,       -8.561788,       -3.02132,       -8.736245,       -9.150121,       -3.953908,       -10.836978,       -5.713647,       -3.11697,       -8.471389,       -6.884848,       -10.540117
-11.945129,       -8.031843,       -14.51798,       -2.008152,       -8.561788,       -3.528812,       -2.987496,       -5.490339,       -10.543084,       -2.542895,       -10.800244,       -4.879661,       -3.524714,       -7.62207,       -5.449574,       -5.051204
-3.900116,       -4.287074,       -1.867773,       2.539907,       -3.02132,       -2.987496,       5.431507,       -3.84572,       -4.368403,       3.302685,       -3.890523,       0.61166,       3.51281,       -3.85735,       1.556141,       -3.309991
-13.058258,       -10.388028,       -11.236869,       -4.127152,       -8.736245,       -5.490339,       -3.84572,       -4.242207,       -9.466429,       -2.874319,       -10.470045,       -4.820386,       -2.910163,       -6.835793,       -5.076412,       -7.230148
-9.1528,       -8.815072,       -8.795519,       -4.00531,       -9.150121,       -10.543084,       -4.368403,       -9.466429,       -3.207628,       -2.370785,       -10.702757,       -5.865599,       -3.54645,       -9.26409,       -8.647646,       -12.155242
-4.958993,       -1.96867,       -5.23309,       3.441772,       -3.953908,       -2.542895,       3.302685,       -2.874319,       -2.370785,       5.792786,       -3.33171,       1.938752,       2.751597,       -3.539373,       0.657756,       -2.55269
-11.592653,       -8.963106,       -4.79847,       -4.771036,       -10.836978,       -10.800244,       -3.890523,       -10.470045,       -10.702757,       -3.33171,       -2.613762,       -5.015018,       -4.91934,       -11.236538,       -4.33017,       -6.966371
-4.768908,       -5.535568,       -8.459905,       0.938531,       -5.713647,       -4.879661,       0.61166,       -4.820386,       -5.865599,       1.938752,       -5.015018,       2.908208,       0.422732,       -5.009649,       -1.185994,       -4.330045
-3.689178,       -4.143217,       -2.670236,       2.081664,       -3.11697,       -3.524714,       3.51281,       -2.910163,       -3.54645,       2.751597,       -4.91934,       0.422732,       3.986926,       -3.364798,       1.096319,       -1.952669
-13.392143,       -10.053435,       -10.10352,       -4.364289,       -8.471389,       -7.62207,       -3.85735,       -6.835793,       -9.26409,       -3.539373,       -11.236538,       -5.009649,       -3.364798,       -6.239876,       -3.371075,       -7.785335
-4.557013,       -5.595737,       -5.987278,       -0.009989,       -6.884848,       -5.449574,       1.556141,       -5.076412,       -8.647646,       0.657756,       -4.33017,       -1.185994,       1.096319,       -3.371075,       2.604374,       -2.47579
-10.97026,       -8.751377,       -7.151762,       -3.114835,       -10.540117,       -5.051204,       -3.309991,       -7.230148,       -12.155242,       -2.55269,       -6.966371,       -4.330045,       -1.952669,       -7.785335,       -2.47579,       -1.833367
                    };
            return _data;
        }
    };
//    H: 3.2667
//    E: -2.6325


// ----------------------------------------------------------------------------
// Ribosum55_90 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.251059    0.220669    0.297052    0.231219
	struct Ribosum55_90 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum55_90>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.518821,       -4.258616,       -3.87536,       -3.746276
-4.258616,       1.615486,       -4.806762,       -2.691436
-3.87536,       -4.806762,       1.327082,       -4.105103
-3.746276,       -2.691436,       -4.105103,       2.008391
                    };
            return _data;
        }
    };
//    H: 1.6825
//    E: -1.0149

// ----------------------------------------------------------------------------
// Ribosum55_90N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum55_90N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum55_90N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.518821,       -4.258616,       -3.87536,       -3.746276,       -4.806762
-4.258616,       1.615486,       -4.806762,       -2.691436,       -4.806762
-3.87536,       -4.806762,       1.327082,       -4.105103,       -4.806762
-3.746276,       -2.691436,       -4.105103,       2.008391,       -4.806762
-4.806762,       -4.806762,       -4.806762,       -4.806762,       -4.806762
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum55_90d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum55_90d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum55_90d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-0.579412,       -7.596043,       -8.119109,       -5.690701,       -10.66171,       -999.0,       -7.769469,       -13.215367,       -6.129061,       -6.386999,       -9.16645,       -8.273509,       -5.992117,       -14.215367,       -8.097302,       -10.823308
-7.596043,       -0.312832,       -9.037665,       -4.376557,       -11.447555,       -8.527225,       -8.133295,       -12.221871,       -15.576824,       -4.429595,       -12.73205,       -7.20539,       -8.326624,       -8.611373,       -9.757616,       -10.424173
-8.119109,       -9.037665,       -0.353425,       -7.284447,       -11.150559,       -14.805721,       -6.298894,       -13.136128,       -9.405741,       -8.557418,       -7.344461,       -9.138692,       -8.188869,       -12.210128,       -6.575137,       -10.910718
-5.690701,       -4.376557,       -7.284447,       5.210538,       -8.676208,       -9.941763,       -1.329618,       -6.102245,       -9.434743,       0.551609,       -7.462719,       -0.878729,       -1.36728,       -7.674534,       -3.416577,       -4.166086
-10.66171,       -11.447555,       -11.150559,       -8.676208,       -2.358868,       -10.502422,       -4.249853,       -9.328786,       -10.167433,       -7.964418,       -10.32766,       -9.38124,       -3.832473,       -11.171245,       -7.413661,       -10.704281
-999.0,       -8.527225,       -14.805721,       -9.941763,       -10.502422,       -1.515528,       -5.359052,       -6.688267,       -13.583328,       -4.990223,       -12.932932,       -9.317718,       -8.800407,       -9.776996,       -9.571475,       -7.860609
-7.769469,       -8.133295,       -6.298894,       -1.329618,       -4.249853,       -5.359052,       5.796895,       -5.341917,       -8.78609,       -1.043692,       -5.676878,       -2.940232,       0.437271,       -7.717326,       -0.010869,       -5.996102
-13.215367,       -12.221871,       -13.136128,       -6.102245,       -9.328786,       -6.688267,       -5.341917,       -0.88627,       -12.998624,       -7.338224,       -12.452817,       -6.333663,       -8.030509,       -6.400683,       -8.199736,       -7.427083
-6.129061,       -15.576824,       -9.405741,       -9.434743,       -10.167433,       -13.583328,       -8.78609,       -12.998624,       -0.518379,       -6.3985,       -9.590131,       -6.811406,       -7.249734,       -16.458056,       -10.864517,       -14.2035
-6.386999,       -4.429595,       -8.557418,       0.551609,       -7.964418,       -4.990223,       -1.043692,       -7.338224,       -6.3985,       5.896346,       -5.682823,       -0.13588,       -2.010585,       -5.269803,       -3.01775,       -6.1177
-9.16645,       -12.73205,       -7.344461,       -7.462719,       -10.32766,       -12.932932,       -5.676878,       -12.452817,       -9.590131,       -5.682823,       -1.938002,       -6.308597,       -8.606114,       -11.793854,       -5.925614,       -11.598192
-8.273509,       -7.20539,       -9.138692,       -0.878729,       -9.38124,       -9.317718,       -2.940232,       -6.333663,       -6.811406,       -0.13588,       -6.308597,       3.910418,       -3.591553,       -7.202296,       -4.146523,       -5.817945
-5.992117,       -8.326624,       -8.188869,       -1.36728,       -3.832473,       -8.800407,       0.437271,       -8.030509,       -7.249734,       -2.010585,       -8.606114,       -3.591553,       5.432713,       -5.4286,       -0.912761,       -4.558028
-14.215367,       -8.611373,       -12.210128,       -7.674534,       -11.171245,       -9.776996,       -7.717326,       -6.400683,       -16.458056,       -5.269803,       -11.793854,       -7.202296,       -5.4286,       -1.392542,       -6.315533,       -5.359445
-8.097302,       -9.757616,       -6.575137,       -3.416577,       -7.413661,       -9.571475,       -0.010869,       -8.199736,       -10.864517,       -3.01775,       -5.925614,       -4.146523,       -0.912761,       -6.315533,       3.903008,       -5.983544
-10.823308,       -10.424173,       -10.910718,       -4.166086,       -10.704281,       -7.860609,       -5.996102,       -7.427083,       -14.2035,       -6.1177,       -11.598192,       -5.817945,       -4.558028,       -5.359445,       -5.983544,       0.552123
                    };
            return _data;
        }
    };
//    H: 4.8073
//    E: -6.5423


// ----------------------------------------------------------------------------
// Ribosum55_85 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.250576    0.221116    0.297030    0.231279
	struct Ribosum55_85 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum55_85>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.480369,       -3.445938,       -3.105153,       -3.047633
-3.445938,       1.530116,       -3.989446,       -1.978839
-3.105153,       -3.989446,       1.275032,       -3.336408
-3.047633,       -1.978839,       -3.336408,       1.942465
                    };
            return _data;
        }
    };
//    H: 1.4955
//    E: -0.7441

// ----------------------------------------------------------------------------
// Ribosum55_85N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum55_85N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum55_85N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.480369,       -3.445938,       -3.105153,       -3.047633,       -3.989446
-3.445938,       1.530116,       -3.989446,       -1.978839,       -3.989446
-3.105153,       -3.989446,       1.275032,       -3.336408,       -3.989446
-3.047633,       -1.978839,       -3.336408,       1.942465,       -3.989446
-3.989446,       -3.989446,       -3.989446,       -3.989446,       -3.989446
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum55_85d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum55_85d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum55_85d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-0.622356,       -8.550978,       -7.894856,       -5.32059,       -10.069214,       -14.771413,       -6.709379,       -12.588316,       -5.444342,       -5.337879,       -9.603435,       -7.320269,       -5.526589,       -12.978262,       -7.576425,       -9.327427
-8.550978,       -0.365474,       -9.174851,       -3.735992,       -10.913432,       -8.421044,       -6.623384,       -11.465975,       -11.326854,       -4.194104,       -11.98315,       -6.579271,       -7.478691,       -8.972805,       -9.357092,       -9.10592
-7.894856,       -9.174851,       -0.412915,       -6.81807,       -11.078278,       -13.493213,       -5.825803,       -12.174715,       -8.051273,       -7.833402,       -6.624321,       -6.704895,       -7.860104,       -11.952322,       -6.159237,       -10.517079
-5.32059,       -3.735992,       -6.81807,       5.121408,       -8.003353,       -8.547275,       -0.401239,       -5.693069,       -8.66586,       1.31671,       -7.373627,       -0.407677,       -0.612785,       -6.744782,       -2.686076,       -3.317791
-10.069214,       -10.913432,       -11.078278,       -8.003353,       -3.110748,       -11.26904,       -4.091777,       -9.267782,       -9.214226,       -7.428997,       -11.476797,       -8.700063,       -2.946692,       -11.547275,       -6.432799,       -9.570883
-14.771413,       -8.421044,       -13.493213,       -8.547275,       -11.26904,       -1.587058,       -5.122729,       -7.03034,       -14.109884,       -4.639421,       -12.507249,       -8.716286,       -8.461042,       -9.687452,       -9.018518,       -5.432641
-6.709379,       -6.623384,       -5.825803,       -0.401239,       -4.091777,       -5.122729,       5.730656,       -4.985655,       -8.173454,       -0.052526,       -5.322988,       -1.792026,       1.274524,       -6.680178,       0.685788,       -4.824364
-12.588316,       -11.465975,       -12.174715,       -5.693069,       -9.267782,       -7.03034,       -4.985655,       -0.935372,       -13.174715,       -7.111628,       -12.17722,       -6.269024,       -6.667383,       -5.73969,       -8.068146,       -6.245816
-5.444342,       -11.326854,       -8.051273,       -8.66586,       -9.214226,       -14.109884,       -8.173454,       -13.174715,       -0.663635,       -6.181956,       -9.879703,       -6.062914,       -7.238295,       -13.496643,       -9.762578,       -13.561474
-5.337879,       -4.194104,       -7.833402,       1.31671,       -7.428997,       -4.639421,       -0.052526,       -7.111628,       -6.181956,       5.836626,       -5.371096,       0.422116,       -0.902105,       -4.645247,       -2.084668,       -5.463657
-9.603435,       -11.98315,       -6.624321,       -7.373627,       -11.476797,       -12.507249,       -5.322988,       -12.17722,       -9.879703,       -5.371096,       -2.124488,       -5.984383,       -7.848308,       -11.712258,       -5.206965,       -12.125012
-7.320269,       -6.579271,       -6.704895,       -0.407677,       -8.700063,       -8.716286,       -1.792026,       -6.269024,       -6.062914,       0.422116,       -5.984383,       3.822662,       -2.88302,       -5.002915,       -2.988953,       -5.46453
-5.526589,       -7.478691,       -7.860104,       -0.612785,       -2.946692,       -8.461042,       1.274524,       -6.667383,       -7.238295,       -0.902105,       -7.848308,       -2.88302,       5.341137,       -5.183169,       -0.279616,       -4.320915
-12.978262,       -8.972805,       -11.952322,       -6.744782,       -11.547275,       -9.687452,       -6.680178,       -5.73969,       -13.496643,       -4.645247,       -11.712258,       -5.002915,       -5.183169,       -1.962639,       -6.118934,       -4.976115
-7.576425,       -9.357092,       -6.159237,       -2.686076,       -6.432799,       -9.018518,       0.685788,       -8.068146,       -9.762578,       -2.084668,       -5.206965,       -2.988953,       -0.279616,       -6.118934,       3.798469,       -5.556356
-9.327427,       -9.10592,       -10.517079,       -3.317791,       -9.570883,       -5.432641,       -4.824364,       -6.245816,       -13.561474,       -5.463657,       -12.125012,       -5.46453,       -4.320915,       -4.976115,       -5.556356,       0.448861
                    };
            return _data;
        }
    };
//    H: 4.5467
//    E: -3.2448


// ----------------------------------------------------------------------------
// Ribosum75_30 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.279160    0.201692    0.273966    0.245183
	struct Ribosum75_30 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum75_30>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.533683,       -0.901722,       -0.606461,       -0.564188
-0.901722,       0.893957,       -1.378635,       -0.344093
-0.606461,       -1.378635,       0.78287,       -0.807952
-0.564188,       -0.344093,       -0.807952,       0.98717
                    };
            return _data;
        }
    };
//    H: 0.3174
//    E: -0.0092

// ----------------------------------------------------------------------------
// Ribosum75_30N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum75_30N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum75_30N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.533683,       -0.901722,       -0.606461,       -0.564188,       -1.378635
-0.901722,       0.893957,       -1.378635,       -0.344093,       -1.378635
-0.606461,       -1.378635,       0.78287,       -0.807952,       -1.378635
-0.564188,       -0.344093,       -0.807952,       0.98717,       -1.378635
-1.378635,       -1.378635,       -1.378635,       -1.378635,       -1.378635
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum75_30d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum75_30d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum75_30d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-3.676489,       -6.11519,       -11.00203,       -4.472441,       -10.587916,       -12.627396,       -3.495895,       -11.897088,       -9.576412,       -4.969223,       -12.340348,       -5.383037,       -3.264096,       -12.604929,       -3.792962,       -10.795576
-6.11519,       -1.655,       -9.123025,       -1.706385,       -9.784718,       -6.520411,       -4.319587,       -9.398832,       -6.330495,       -2.543659,       -9.16891,       -3.815224,       -3.622962,       -9.777201,       -5.860195,       -8.455076
-11.00203,       -9.123025,       -2.510874,       -4.284594,       -10.267154,       -12.731749,       -1.726187,       -10.453106,       -7.397097,       -4.088167,       -4.264072,       -5.875014,       -2.542592,       -10.204013,       -5.825507,       -8.233182
-4.472441,       -1.706385,       -4.284594,       3.800695,       -4.878552,       -2.330426,       2.390351,       -3.428148,       -3.718972,       3.276787,       -4.279603,       0.924515,       2.014624,       -4.291001,       -0.017034,       -2.736348
-10.587916,       -9.784718,       -10.267154,       -4.878552,       -5.673139,       -9.868602,       -2.246482,       -8.590315,       -6.534801,       -4.174366,       -10.592656,       -5.344502,       -3.088306,       -8.510866,       -6.029343,       -8.921255
-12.627396,       -6.520411,       -12.731749,       -2.330426,       -9.868602,       -3.115022,       -3.361061,       -5.054858,       -9.419468,       -2.468049,       -10.933283,       -5.293903,       -4.395017,       -7.610408,       -6.310848,       -5.347873
-3.495895,       -4.319587,       -1.726187,       2.390351,       -2.246482,       -3.361061,       5.286045,       -3.919645,       -4.235468,       3.192765,       -3.91314,       0.636877,       3.309747,       -4.099989,       1.565936,       -2.206699
-11.897088,       -9.398832,       -10.453106,       -3.428148,       -8.590315,       -5.054858,       -3.919645,       -3.014162,       -8.940358,       -2.379831,       -7.217213,       -4.211094,       -3.502545,       -5.409773,       -5.061048,       -6.459802
-9.576412,       -6.330495,       -7.397097,       -3.718972,       -6.534801,       -9.419468,       -4.235468,       -8.940358,       -2.23739,       -1.963563,       -10.227482,       -4.980583,       -3.624518,       -8.827072,       -7.680651,       -8.793366
-4.969223,       -2.543659,       -4.088167,       3.276787,       -4.174366,       -2.468049,       3.192765,       -2.379831,       -1.963563,       5.628519,       -3.517902,       1.905159,       2.555402,       -3.55776,       0.803812,       -2.383968
-12.340348,       -9.16891,       -4.264072,       -4.279603,       -10.592656,       -10.933283,       -3.91314,       -7.217213,       -10.227482,       -3.517902,       -2.492815,       -4.724924,       -5.048833,       -9.922742,       -4.232172,       -7.177932
-5.383037,       -3.815224,       -5.875014,       0.924515,       -5.344502,       -5.293903,       0.636877,       -4.211094,       -4.980583,       1.905159,       -4.724924,       2.960424,       0.327997,       -4.663282,       -1.077966,       -3.215866
-3.264096,       -3.622962,       -2.542592,       2.014624,       -3.088306,       -4.395017,       3.309747,       -3.502545,       -3.624518,       2.555402,       -5.048833,       0.327997,       4.157546,       -3.246456,       1.196221,       -1.756972
-12.604929,       -9.777201,       -10.204013,       -4.291001,       -8.510866,       -7.610408,       -4.099989,       -5.409773,       -8.827072,       -3.55776,       -9.922742,       -4.663282,       -3.246456,       -5.378074,       -3.597646,       -7.436974
-3.792962,       -5.860195,       -5.825507,       -0.017034,       -6.029343,       -6.310848,       1.565936,       -5.061048,       -7.680651,       0.803812,       -4.232172,       -1.077966,       1.196221,       -3.597646,       2.802181,       -2.8136
-10.795576,       -8.455076,       -8.233182,       -2.736348,       -8.921255,       -5.347873,       -2.206699,       -6.459802,       -8.793366,       -2.383968,       -7.177932,       -3.215866,       -1.756972,       -7.436974,       -2.8136,       -1.97904
                    };
            return _data;
        }
    };
//    H: 3.2093
//    E: -2.4206


// ----------------------------------------------------------------------------
// Ribosum45_40 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.258295    0.219555    0.297410    0.224739
	struct Ribosum45_40 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum45_40>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.974198,       -1.347543,       -0.924445,       -1.009027
-1.347543,       1.00226,       -1.703101,       -0.616346
-0.924445,       -1.703101,       0.855334,       -1.115538
-1.009027,       -0.616346,       -1.115538,       1.384775
                    };
            return _data;
        }
    };
//    H: 0.5639
//    E: -0.0966

// ----------------------------------------------------------------------------
// Ribosum45_40N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum45_40N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum45_40N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.974198,       -1.347543,       -0.924445,       -1.009027,       -1.703101
-1.347543,       1.00226,       -1.703101,       -0.616346,       -1.703101
-0.924445,       -1.703101,       0.855334,       -1.115538,       -1.703101
-1.009027,       -0.616346,       -1.115538,       1.384775,       -1.703101
-1.703101,       -1.703101,       -1.703101,       -1.703101,       -1.703101
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum45_40d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum45_40d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum45_40d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.61078,       -8.457749,       -8.823087,       -5.068171,       -10.069269,       -13.464551,       -3.875202,       -12.116763,       -6.623303,       -5.225926,       -9.681487,       -6.517674,       -2.489489,       -12.286114,       -3.54406,       -8.844289
-8.457749,       -1.862794,       -9.605105,       -1.65417,       -10.553679,       -8.873555,       -5.443495,       -10.686013,       -7.181809,       -2.701597,       -10.393501,       -4.9283,       -5.601199,       -8.897327,       -7.176918,       -8.386175
-8.823087,       -9.605105,       -1.323783,       -6.070063,       -10.655375,       -15.169289,       -2.572643,       -9.368995,       -9.402471,       -6.297442,       -4.226735,       -7.123422,       -2.825043,       -8.016659,       -5.831082,       -9.775341
-5.068171,       -1.65417,       -6.070063,       4.254741,       -5.771131,       -2.376336,       2.028206,       -4.176943,       -3.788908,       2.876011,       -4.931736,       0.744158,       1.878068,       -4.54725,       -0.394194,       -2.457492
-10.069269,       -10.553679,       -10.655375,       -5.771131,       -6.214045,       -11.704578,       -3.242657,       -8.333395,       -7.753112,       -5.400398,       -11.489338,       -6.201011,       -2.909551,       -8.028055,       -6.191753,       -8.855409
-13.464551,       -8.873555,       -15.169289,       -2.376336,       -11.704578,       -3.459578,       -5.077061,       -6.847604,       -12.889978,       -3.757126,       -12.063721,       -7.115977,       -6.480377,       -8.959723,       -8.312319,       -6.653758
-3.875202,       -5.443495,       -2.572643,       2.028206,       -3.242657,       -5.077061,       5.221429,       -4.380287,       -6.026046,       2.797773,       -4.711698,       0.248014,       2.926589,       -4.336337,       1.189861,       -3.010428
-12.116763,       -10.686013,       -9.368995,       -4.176943,       -8.333395,       -6.847604,       -4.380287,       -2.560976,       -7.127895,       -2.204879,       -9.154543,       -4.401685,       -4.335326,       -4.66123,       -6.491878,       -5.436213
-6.623303,       -7.181809,       -9.402471,       -3.788908,       -7.753112,       -12.889978,       -6.026046,       -7.127895,       -1.620191,       -2.572906,       -9.901303,       -6.191946,       -4.880097,       -6.957011,       -7.680903,       -10.15855
-5.225926,       -2.701597,       -6.297442,       2.876011,       -5.400398,       -3.757126,       2.797773,       -2.204879,       -2.572906,       5.488713,       -4.785556,       1.422984,       1.886932,       -4.169331,       0.328644,       -3.036916
-9.681487,       -10.393501,       -4.226735,       -4.931736,       -11.489338,       -12.063721,       -4.711698,       -9.154543,       -9.901303,       -4.785556,       -2.308029,       -5.53611,       -6.330904,       -10.554491,       -4.342095,       -5.01942
-6.517674,       -4.9283,       -7.123422,       0.744158,       -6.201011,       -7.115977,       0.248014,       -4.401685,       -6.191946,       1.422984,       -5.53611,       3.321556,       0.061638,       -4.603318,       -1.262816,       -2.576851
-2.489489,       -5.601199,       -2.825043,       1.878068,       -2.909551,       -6.480377,       2.926589,       -4.335326,       -4.880097,       1.886932,       -6.330904,       0.061638,       4.72629,       -3.522977,       1.04483,       -1.582847
-12.286114,       -8.897327,       -8.016659,       -4.54725,       -8.028055,       -8.959723,       -4.336337,       -4.66123,       -6.957011,       -4.169331,       -10.554491,       -4.603318,       -3.522977,       -4.120134,       -4.202156,       -5.903624
-3.54406,       -7.176918,       -5.831082,       -0.394194,       -6.191753,       -8.312319,       1.189861,       -6.491878,       -7.680903,       0.328644,       -4.342095,       -1.262816,       1.04483,       -4.202156,       3.190614,       -3.656568
-8.844289,       -8.386175,       -9.775341,       -2.457492,       -8.855409,       -6.653758,       -3.010428,       -5.436213,       -10.15855,       -3.036916,       -5.01942,       -2.576851,       -1.582847,       -5.903624,       -3.656568,       -0.710453
                    };
            return _data;
        }
    };
//    H: 3.4652
//    E: -2.6058


// ----------------------------------------------------------------------------
// Ribosum100_60 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.256244    0.220739    0.300734    0.222283
	struct Ribosum100_60 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum100_60>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.297694,       -2.11469,       -1.73102,       -1.678305
-2.11469,       1.239637,       -2.702157,       -1.154084
-1.73102,       -2.702157,       1.093643,       -1.993914
-1.678305,       -1.154084,       -1.993914,       1.721004
                    };
            return _data;
        }
    };
//    H: 1.0075
//    E: -0.3227

// ----------------------------------------------------------------------------
// Ribosum100_60N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum100_60N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum100_60N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.297694,       -2.11469,       -1.73102,       -1.678305,       -2.702157
-2.11469,       1.239637,       -2.702157,       -1.154084,       -2.702157
-1.73102,       -2.702157,       1.093643,       -1.993914,       -2.702157
-1.678305,       -1.154084,       -1.993914,       1.721004,       -2.702157
-2.702157,       -2.702157,       -2.702157,       -2.702157,       -2.702157
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum100_60d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum100_60d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum100_60d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.81159,       -7.995766,       -8.129031,       -4.691241,       -9.598926,       -14.325802,       -5.080143,       -11.918692,       -6.090698,       -4.75769,       -9.643425,       -6.316942,       -4.638521,       -11.966258,       -6.226173,       -8.642056
-7.995766,       -1.770705,       -9.235521,       -2.078076,       -9.994814,       -9.197311,       -5.843604,       -10.95244,       -10.278834,       -3.816002,       -12.31271,       -5.194791,       -5.870543,       -8.567946,       -7.377055,       -7.967058
-8.129031,       -9.235521,       -0.646554,       -5.867757,       -10.591022,       -14.687475,       -4.804342,       -8.876692,       -9.049828,       -6.294192,       -5.507358,       -6.921244,       -5.944803,       -8.28439,       -5.769854,       -10.585667
-4.691241,       -2.078076,       -5.867757,       4.630831,       -6.097384,       -6.902682,       1.480214,       -5.614153,       -6.022505,       2.548748,       -6.174408,       0.44967,       1.393436,       -5.456661,       -0.713102,       -3.063017
-9.598926,       -9.994814,       -10.591022,       -6.097384,       -5.501741,       -11.286865,       -3.888543,       -7.651044,       -8.598924,       -6.023049,       -11.35649,       -8.268281,       -2.636415,       -7.36009,       -6.265272,       -8.307579
-14.325802,       -9.197311,       -14.687475,       -6.902682,       -11.286865,       -2.740802,       -5.301014,       -6.189456,       -13.646603,       -4.069262,       -12.355063,       -8.041366,       -7.255942,       -8.347696,       -8.785107,       -6.029455
-5.080143,       -5.843604,       -4.804342,       1.480214,       -3.888543,       -5.301014,       5.439265,       -4.933605,       -6.499876,       1.840574,       -4.539345,       -0.535892,       2.547154,       -4.640266,       1.161678,       -3.823572
-11.918692,       -10.95244,       -8.876692,       -5.614153,       -7.651044,       -6.189456,       -4.933605,       -1.791054,       -6.591051,       -6.142914,       -13.449604,       -6.062667,       -4.348338,       -3.916115,       -7.755814,       -4.656526
-6.090698,       -10.278834,       -9.049828,       -6.022505,       -8.598924,       -13.646603,       -6.499876,       -6.591051,       -0.926264,       -5.257123,       -9.595138,       -6.546263,       -6.049942,       -6.369385,       -7.714284,       -11.732151
-4.75769,       -3.816002,       -6.294192,       2.548748,       -6.023049,       -4.069262,       1.840574,       -6.142914,       -5.257123,       5.649575,       -4.720806,       1.061875,       1.316175,       -4.839547,       -0.216941,       -4.237039
-9.643425,       -12.31271,       -5.507358,       -6.174408,       -11.35649,       -12.355063,       -4.539345,       -13.449604,       -9.595138,       -4.720806,       -2.107728,       -5.768126,       -6.234682,       -11.826722,       -4.179664,       -11.727313
-6.316942,       -5.194791,       -6.921244,       0.44967,       -8.268281,       -8.041366,       -0.535892,       -6.062667,       -6.546263,       1.061875,       -5.768126,       3.560735,       -0.840608,       -5.285916,       -2.135962,       -4.983961
-4.638521,       -5.870543,       -5.944803,       1.393436,       -2.636415,       -7.255942,       2.547154,       -4.348338,       -6.049942,       1.316175,       -6.234682,       -0.840608,       5.055439,       -3.019565,       0.988899,       -3.643348
-11.966258,       -8.567946,       -8.28439,       -5.456661,       -7.36009,       -8.347696,       -4.640266,       -3.916115,       -6.369385,       -4.839547,       -11.826722,       -5.285916,       -3.019565,       -3.379581,       -4.976184,       -5.131115
-6.226173,       -7.377055,       -5.769854,       -0.713102,       -6.265272,       -8.785107,       1.161678,       -7.755814,       -7.714284,       -0.216941,       -4.179664,       -2.135962,       0.988899,       -4.976184,       3.447891,       -4.359428
-8.642056,       -7.967058,       -10.585667,       -3.063017,       -8.307579,       -6.029455,       -3.823572,       -4.656526,       -11.732151,       -4.237039,       -11.727313,       -4.983961,       -3.643348,       -5.131115,       -4.359428,       0.094149
                    };
            return _data;
        }
    };
//    H: 3.8783
//    E: -2.8573


// ----------------------------------------------------------------------------
// Ribosum85_90 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.261713    0.213701    0.292068    0.232518
	struct Ribosum85_90 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum85_90>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.447974,       -4.481241,       -4.034976,       -3.89882
-4.481241,       1.674202,       -5.023982,       -3.143128
-4.034976,       -5.023982,       1.389127,       -4.311538
-3.89882,       -3.143128,       -4.311538,       1.975864
                    };
            return _data;
        }
    };
//    H: 1.7135
//    E: -1.0894

// ----------------------------------------------------------------------------
// Ribosum85_90N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum85_90N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum85_90N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.447974,       -4.481241,       -4.034976,       -3.89882,       -5.023982
-4.481241,       1.674202,       -5.023982,       -3.143128,       -5.023982
-4.034976,       -5.023982,       1.389127,       -4.311538,       -5.023982
-3.89882,       -3.143128,       -4.311538,       1.975864,       -5.023982
-5.023982,       -5.023982,       -5.023982,       -5.023982,       -5.023982
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum85_90d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum85_90d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum85_90d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.251381,       -9.630083,       -8.740835,       -5.821171,       -12.503671,       -999.0,       -8.346343,       -15.453361,       -7.161353,       -8.259653,       -11.22197,       -9.075993,       -6.423616,       -16.504789,       -9.89506,       -12.341139
-9.630083,       -0.302049,       -10.283913,       -4.648354,       -13.404782,       -9.265622,       -9.827996,       -14.335449,       -17.833752,       -4.665581,       -14.293457,       -8.048634,       -8.56251,       -8.50455,       -11.27553,       -9.781852
-8.740835,       -10.283913,       -0.392091,       -7.22217,       -13.022666,       -16.956392,       -6.489977,       -15.341178,       -10.575482,       -7.288706,       -7.662551,       -10.209168,       -7.517544,       -11.153727,       -7.185431,       -9.892132
-5.821171,       -4.648354,       -7.22217,       5.200586,       -8.550502,       -10.085923,       -2.200027,       -6.38603,       -9.290136,       -0.026514,       -7.626648,       -1.003471,       -2.024555,       -8.562771,       -4.074596,       -4.895316
-12.503671,       -13.404782,       -13.022666,       -8.550502,       -1.515899,       -10.815199,       -4.469529,       -9.628682,       -9.250614,       -9.489334,       -9.494531,       -10.633393,       -4.533884,       -13.354411,       -7.711775,       -9.379336
-999.0,       -9.265622,       -16.956392,       -10.085923,       -10.815199,       -1.613822,       -6.134058,       -7.979516,       -12.449185,       -5.339007,       -14.758705,       -9.235849,       -9.143991,       -8.114228,       -9.140288,       -9.862705
-8.346343,       -9.827996,       -6.489977,       -2.200027,       -4.469529,       -6.134058,       5.911157,       -6.081332,       -9.081952,       -1.695351,       -6.062867,       -3.451657,       -0.062969,       -8.444717,       -0.297965,       -7.27817
-15.453361,       -14.335449,       -15.341178,       -6.38603,       -9.628682,       -7.979516,       -6.081332,       -0.624537,       -15.115676,       -7.136593,       -14.573496,       -6.548393,       -8.133467,       -6.462303,       -8.309018,       -8.472936
-7.161353,       -17.833752,       -10.575482,       -9.290136,       -9.250614,       -12.449185,       -9.081952,       -15.115676,       -0.538856,       -6.607418,       -9.736319,       -7.589061,       -7.312965,       -18.663106,       -9.574063,       -16.46293
-8.259653,       -4.665581,       -7.288706,       -0.026514,       -9.489334,       -5.339007,       -1.695351,       -7.136593,       -6.607418,       6.034818,       -5.622798,       -0.414142,       -2.717048,       -5.977702,       -3.559608,       -7.273064
-11.22197,       -14.293457,       -7.662551,       -7.626648,       -9.494531,       -14.758705,       -6.062867,       -14.573496,       -9.736319,       -5.622798,       -1.43408,       -6.32865,       -9.409282,       -11.473667,       -6.775007,       -12.95458
-9.075993,       -8.048634,       -10.209168,       -1.003471,       -10.633393,       -9.235849,       -3.451657,       -6.548393,       -7.589061,       -0.414142,       -6.32865,       3.900316,       -4.246661,       -7.870079,       -4.881916,       -5.972137
-6.423616,       -8.56251,       -7.517544,       -2.024555,       -4.533884,       -9.143991,       -0.062969,       -8.133467,       -7.312965,       -2.717048,       -9.409282,       -4.246661,       5.429517,       -5.987936,       -1.04617,       -5.239033
-16.504789,       -8.50455,       -11.153727,       -8.562771,       -13.354411,       -8.114228,       -8.444717,       -6.462303,       -18.663106,       -5.977702,       -11.473667,       -7.870079,       -5.987936,       -1.043562,       -6.866511,       -6.280619
-9.89506,       -11.27553,       -7.185431,       -4.074596,       -7.711775,       -9.140288,       -0.297965,       -8.309018,       -9.574063,       -3.559608,       -6.775007,       -4.881916,       -1.04617,       -6.866511,       3.934505,       -6.241587
-12.341139,       -9.781852,       -9.892132,       -4.895316,       -9.379336,       -9.862705,       -7.27817,       -8.472936,       -16.46293,       -7.273064,       -12.95458,       -5.972137,       -5.239033,       -6.280619,       -6.241587,       0.41034
                    };
            return _data;
        }
    };
//    H: 4.9636
//    E: -6.9015


// ----------------------------------------------------------------------------
// Ribosum80_85 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.263576    0.210741    0.283487    0.242196
	struct Ribosum80_85 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum80_85>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.356618,       -3.541174,       -3.219148,       -3.04778
-3.541174,       1.663529,       -3.964424,       -2.179766
-3.219148,       -3.964424,       1.371545,       -3.426671
-3.04778,       -2.179766,       -3.426671,       1.850683
                    };
            return _data;
        }
    };
//    H: 1.4936
//    E: -0.7588

// ----------------------------------------------------------------------------
// Ribosum80_85N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum80_85N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum80_85N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.356618,       -3.541174,       -3.219148,       -3.04778,       -3.964424
-3.541174,       1.663529,       -3.964424,       -2.179766,       -3.964424
-3.219148,       -3.964424,       1.371545,       -3.426671,       -3.964424
-3.04778,       -2.179766,       -3.426671,       1.850683,       -3.964424
-3.964424,       -3.964424,       -3.964424,       -3.964424,       -3.964424
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum80_85d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum80_85d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum80_85d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.011202,       -9.070048,       -8.199319,       -5.27865,       -10.404626,       -11.643571,       -7.027312,       -13.323689,       -6.360099,       -5.866765,       -9.970711,       -7.66185,       -5.974313,       -13.237151,       -7.76868,       -9.709125
-9.070048,       -0.197692,       -9.938756,       -3.966228,       -11.64064,       -8.763546,       -6.292449,       -11.329052,       -12.305031,       -3.884358,       -12.452897,       -6.961591,       -7.06311,       -8.042505,       -9.899981,       -9.008499
-8.199319,       -9.938756,       -0.550714,       -6.89899,       -12.028705,       -13.97133,       -5.900851,       -10.473644,       -7.97144,       -7.32394,       -6.561656,       -7.462607,       -7.322888,       -12.787842,       -6.375381,       -11.255181
-5.27865,       -3.966228,       -6.89899,       5.103073,       -8.407844,       -7.561728,       -0.955604,       -5.570739,       -8.708983,       0.939004,       -7.744299,       -0.567546,       -1.229078,       -6.402987,       -3.316219,       -3.698101
-10.404626,       -11.64064,       -12.028705,       -8.407844,       -2.213283,       -10.046538,       -3.864152,       -8.097022,       -9.175031,       -6.39621,       -9.409328,       -9.285835,       -3.307134,       -12.375706,       -6.479447,       -9.353714
-11.643571,       -8.763546,       -13.97133,       -7.561728,       -10.046538,       -1.130748,       -5.063494,       -6.892763,       -10.627236,       -4.151723,       -12.858531,       -7.462313,       -7.017283,       -9.724939,       -8.190745,       -5.724469
-7.027312,       -6.292449,       -5.900851,       -0.955604,       -3.864152,       -5.063494,       5.941488,       -5.491093,       -8.326556,       -0.188133,       -5.35483,       -2.324397,       0.922946,       -6.350809,       0.421088,       -5.249892
-13.323689,       -11.329052,       -10.473644,       -5.570739,       -8.097022,       -6.892763,       -5.491093,       -0.703884,       -13.759263,       -6.707635,       -12.641773,       -6.256329,       -6.501316,       -6.461857,       -8.362613,       -6.447078
-6.360099,       -12.305031,       -7.97144,       -8.708983,       -9.175031,       -10.627236,       -8.326556,       -13.759263,       -0.562492,       -6.20934,       -8.527517,       -6.053205,       -6.533131,       -10.743072,       -9.11429,       -14.309334
-5.866765,       -3.884358,       -7.32394,       0.939004,       -6.39621,       -4.151723,       -0.188133,       -6.707635,       -6.20934,       6.039694,       -5.130575,       0.257393,       -1.294318,       -4.602904,       -2.496026,       -5.474241
-9.970711,       -12.452897,       -6.561656,       -7.744299,       -9.409328,       -12.858531,       -5.35483,       -12.641773,       -8.527517,       -5.130575,       -1.520176,       -5.938606,       -7.579141,       -12.270329,       -5.507194,       -13.076955
-7.66185,       -6.961591,       -7.462607,       -0.567546,       -9.285835,       -7.462313,       -2.324397,       -6.256329,       -6.053205,       0.257393,       -5.938606,       3.831169,       -3.473872,       -5.432247,       -3.609294,       -5.145316
-5.974313,       -7.06311,       -7.322888,       -1.229078,       -3.307134,       -7.017283,       0.922946,       -6.501316,       -6.533131,       -1.294318,       -7.579141,       -3.473872,       5.251553,       -5.399216,       -0.598994,       -4.63844
-13.237151,       -8.042505,       -12.787842,       -6.402987,       -12.375706,       -9.724939,       -6.350809,       -6.461857,       -10.743072,       -4.602904,       -12.270329,       -5.432247,       -5.399216,       -1.0768,       -6.617822,       -5.598033
-7.76868,       -9.899981,       -6.375381,       -3.316219,       -6.479447,       -8.190745,       0.421088,       -8.362613,       -9.11429,       -2.496026,       -5.507194,       -3.609294,       -0.598994,       -6.617822,       3.819397,       -5.670743
-9.709125,       -9.008499,       -11.255181,       -3.698101,       -9.353714,       -5.724469,       -5.249892,       -6.447078,       -14.309334,       -5.474241,       -13.076955,       -5.145316,       -4.63844,       -5.598033,       -5.670743,       0.24113
                    };
            return _data;
        }
    };
//    H: 4.6949
//    E: -3.2477


// ----------------------------------------------------------------------------
// Ribosum70_90 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.271627    0.203704    0.269770    0.254899
	struct Ribosum70_90 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum70_90>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.291387,       -4.326721,       -3.998626,       -3.815965
-4.326721,       1.871701,       -4.619244,       -2.837832
-3.998626,       -4.619244,       1.498876,       -4.234639
-3.815965,       -2.837832,       -4.234639,       1.826623
                    };
            return _data;
        }
    };
//    H: 1.6502
//    E: -1.0145

// ----------------------------------------------------------------------------
// Ribosum70_90N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum70_90N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum70_90N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.291387,       -4.326721,       -3.998626,       -3.815965,       -4.619244
-4.326721,       1.871701,       -4.619244,       -2.837832,       -4.619244
-3.998626,       -4.619244,       1.498876,       -4.234639,       -4.619244
-3.815965,       -2.837832,       -4.234639,       1.826623,       -4.619244
-4.619244,       -4.619244,       -4.619244,       -4.619244,       -4.619244
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum70_90d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum70_90d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum70_90d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-0.696448,       -8.026325,       -7.313967,       -5.790706,       -11.092543,       -999.0,       -8.041267,       -13.741459,       -7.323744,       -6.602014,       -9.373123,       -8.79339,       -6.509692,       -14.660931,       -8.652584,       -11.52495
-8.026325,       0.062446,       -9.596026,       -4.510126,       -11.686063,       -8.498611,       -8.324828,       -12.483891,       -15.742732,       -3.608587,       -12.682706,       -7.148766,       -9.291641,       -9.174122,       -10.083007,       -11.025212
-7.313967,       -9.596026,       -0.512232,       -6.887097,       -11.623865,       -14.74262,       -5.58683,       -13.329105,       -10.347313,       -7.469927,       -7.129739,       -9.597568,       -7.925581,       -12.403105,       -6.511151,       -11.372617
-5.790706,       -4.510126,       -6.887097,       5.060964,       -9.371214,       -9.176531,       -2.056503,       -6.527572,       -10.095602,       -0.00521,       -7.815024,       -1.279039,       -2.287665,       -8.227936,       -4.486809,       -4.941055
-11.092543,       -11.686063,       -11.623865,       -9.371214,       -1.353674,       -10.506267,       -4.395698,       -9.563531,       -10.788957,       -8.079447,       -7.346187,       -9.670163,       -4.217417,       -11.387802,       -7.755252,       -11.207065
-999.0,       -8.498611,       -14.74262,       -9.176531,       -10.506267,       -0.408916,       -5.491472,       -6.349507,       -13.612635,       -4.286351,       -12.717011,       -9.312329,       -9.521938,       -9.821775,       -9.904115,       -8.104235
-8.041267,       -8.324828,       -5.58683,       -2.056503,       -4.395698,       -5.491472,       6.114384,       -5.467835,       -8.8347,       -1.072499,       -5.246495,       -3.224111,       -0.164434,       -7.74605,       -0.114589,       -6.354231
-13.741459,       -12.483891,       -13.329105,       -6.527572,       -9.563531,       -6.349507,       -5.467835,       -0.863587,       -13.249717,       -7.128449,       -12.393207,       -6.772449,       -7.179079,       -7.232478,       -8.569488,       -7.97262
-7.323744,       -15.742732,       -10.347313,       -10.095602,       -10.788957,       -13.612635,       -8.8347,       -13.249717,       -0.415685,       -5.68674,       -9.192179,       -6.988205,       -6.998169,       -16.651033,       -11.297596,       -14.652555
-6.602014,       -3.608587,       -7.469927,       -0.00521,       -8.079447,       -4.286351,       -1.072499,       -7.128449,       -5.68674,       6.256737,       -4.726029,       -0.084508,       -2.501993,       -5.163334,       -3.225044,       -6.493883
-9.373123,       -12.682706,       -7.129739,       -7.815024,       -7.346187,       -12.717011,       -5.246495,       -12.393207,       -9.192179,       -4.726029,       -1.411379,       -6.196473,       -9.047403,       -11.755282,       -5.770616,       -12.312534
-8.79339,       -7.148766,       -9.597568,       -1.279039,       -9.670163,       -9.312329,       -3.224111,       -6.772449,       -6.988205,       -0.084508,       -6.196473,       3.914815,       -4.557551,       -7.18799,       -4.593254,       -6.022353
-6.509692,       -9.291641,       -7.925581,       -2.287665,       -4.217417,       -9.521938,       -0.164434,       -7.179079,       -6.998169,       -2.501993,       -9.047403,       -4.557551,       5.211942,       -5.317789,       -1.423105,       -5.305923
-14.660931,       -9.174122,       -12.403105,       -8.227936,       -11.387802,       -9.821775,       -7.74605,       -7.232478,       -16.651033,       -5.163334,       -11.755282,       -7.18799,       -5.317789,       -0.855912,       -6.531253,       -5.739152
-8.652584,       -10.083007,       -6.511151,       -4.486809,       -7.755252,       -9.904115,       -0.114589,       -8.569488,       -11.297596,       -3.225044,       -5.770616,       -4.593254,       -1.423105,       -6.531253,       3.880123,       -6.268909
-11.52495,       -11.025212,       -11.372617,       -4.941055,       -11.207065,       -8.104235,       -6.354231,       -7.97262,       -14.652555,       -6.493883,       -12.312534,       -6.022353,       -5.305923,       -5.739152,       -6.268909,       0.471789
                    };
            return _data;
        }
    };
//    H: 4.9218
//    E: -6.6009


// ----------------------------------------------------------------------------
// Ribosum100_90 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.250827    0.220794    0.297197    0.231182
	struct Ribosum100_90 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum100_90>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.520024,       -4.254469,       -3.869261,       -3.740621
-4.254469,       1.614758,       -4.794115,       -2.681767
-3.869261,       -4.794115,       1.326047,       -4.098601
-3.740621,       -2.681767,       -4.098601,       2.008462
                    };
            return _data;
        }
    };
//    H: 1.6812
//    E: -1.0123

// ----------------------------------------------------------------------------
// Ribosum100_90N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum100_90N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum100_90N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.520024,       -4.254469,       -3.869261,       -3.740621,       -4.794115
-4.254469,       1.614758,       -4.794115,       -2.681767,       -4.794115
-3.869261,       -4.794115,       1.326047,       -4.098601,       -4.794115
-3.740621,       -2.681767,       -4.098601,       2.008462,       -4.794115
-4.794115,       -4.794115,       -4.794115,       -4.794115,       -4.794115
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum100_90d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum100_90d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum100_90d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-0.571692,       -7.620395,       -8.131055,       -5.69738,       -10.647195,       -999.0,       -7.765939,       -13.173383,       -6.093604,       -6.400068,       -9.125291,       -8.253373,       -5.973132,       -14.173383,       -8.100264,       -10.84739
-7.620395,       -0.307018,       -9.0083,       -4.370261,       -11.434633,       -8.501001,       -8.099119,       -12.345534,       -15.535777,       -4.443204,       -12.736108,       -7.186887,       -8.411832,       -8.584249,       -9.767057,       -10.383289
-8.131055,       -9.0083,       -0.356124,       -7.279046,       -11.109512,       -14.766822,       -6.288148,       -13.09618,       -9.472642,       -8.55409,       -7.340397,       -9.125727,       -8.19696,       -12.170181,       -6.565476,       -10.929844
-5.69738,       -4.370261,       -7.279046,       5.211163,       -8.66163,       -9.923301,       -1.321856,       -6.119813,       -9.432176,       0.554872,       -7.477229,       -0.874302,       -1.358438,       -7.682849,       -3.402367,       -4.155083
-10.647195,       -11.434633,       -11.109512,       -8.66163,       -2.368808,       -10.496801,       -4.256305,       -9.338339,       -10.143459,       -7.963767,       -10.362649,       -9.362826,       -3.828324,       -11.1565,       -7.39574,       -10.698162
-999.0,       -8.501001,       -14.766822,       -9.923301,       -10.496801,       -1.519224,       -5.346416,       -6.700799,       -13.544429,       -4.965055,       -12.896069,       -9.291601,       -8.770222,       -9.771974,       -9.533676,       -7.857701
-7.765939,       -8.099119,       -6.288148,       -1.321856,       -4.256305,       -5.346416,       5.79454,       -5.329857,       -8.786149,       -1.033268,       -5.665478,       -2.923264,       0.440695,       -7.704685,       -0.004106,       -5.973448
-13.173383,       -12.345534,       -13.09618,       -6.119813,       -9.338339,       -6.700799,       -5.329857,       -0.889218,       -12.958677,       -7.327225,       -12.414906,       -6.318159,       -7.997723,       -6.417422,       -8.184096,       -7.420377
-6.093604,       -15.535777,       -9.472642,       -9.432176,       -10.143459,       -13.544429,       -8.786149,       -12.958677,       -0.520774,       -6.373766,       -9.662326,       -6.802432,       -7.228692,       -16.418108,       -10.846826,       -14.162504
-6.400068,       -4.443204,       -8.55409,       0.554872,       -7.963767,       -4.965055,       -1.033268,       -7.327225,       -6.373766,       5.892981,       -5.701539,       -0.130099,       -2.001575,       -5.253976,       -3.006688,       -6.099541
-9.125291,       -12.736108,       -7.340397,       -7.477229,       -10.362649,       -12.896069,       -5.665478,       -12.414906,       -9.662326,       -5.701539,       -1.943737,       -6.318412,       -8.589438,       -11.804852,       -5.914755,       -11.599875
-8.253373,       -7.186887,       -9.125727,       -0.874302,       -9.362826,       -9.291601,       -2.923264,       -6.318159,       -6.802432,       -0.130099,       -6.318412,       3.910644,       -3.579939,       -7.189304,       -4.128432,       -5.80071
-5.973132,       -8.411832,       -8.19696,       -1.358438,       -3.828324,       -8.770222,       0.440695,       -7.997723,       -7.228692,       -2.001575,       -8.589438,       -3.579939,       5.4336,       -5.450235,       -0.905396,       -4.554083
-14.173383,       -8.584249,       -12.170181,       -7.682849,       -11.1565,       -9.771974,       -7.704685,       -6.417422,       -16.418108,       -5.253976,       -11.804852,       -7.189304,       -5.450235,       -1.414116,       -6.304673,       -5.372944
-8.100264,       -9.767057,       -6.565476,       -3.402367,       -7.39574,       -9.533676,       -0.004106,       -8.184096,       -10.846826,       -3.006688,       -5.914755,       -4.128432,       -0.905396,       -6.304673,       3.902877,       -5.969089
-10.84739,       -10.383289,       -10.929844,       -4.155083,       -10.698162,       -7.857701,       -5.973448,       -7.420377,       -14.162504,       -6.099541,       -11.599875,       -5.80071,       -4.554083,       -5.372944,       -5.969089,       0.555134
                    };
            return _data;
        }
    };
//    H: 4.8045
//    E: -6.5365


// ----------------------------------------------------------------------------
// Ribosum80_65 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.259039    0.220888    0.300130    0.219942
	struct Ribosum80_65 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum80_65>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.199042,       -1.754873,       -1.420126,       -1.350969
-1.754873,       1.151265,       -2.418154,       -1.028657
-1.420126,       -2.418154,       1.019919,       -1.678293
-1.350969,       -1.028657,       -1.678293,       1.63734
                    };
            return _data;
        }
    };
//    H: 0.8544
//    E: -0.2341

// ----------------------------------------------------------------------------
// Ribosum80_65N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum80_65N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum80_65N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.199042,       -1.754873,       -1.420126,       -1.350969,       -2.418154
-1.754873,       1.151265,       -2.418154,       -1.028657,       -2.418154
-1.420126,       -2.418154,       1.019919,       -1.678293,       -2.418154
-1.350969,       -1.028657,       -1.678293,       1.63734,       -2.418154
-2.418154,       -2.418154,       -2.418154,       -2.418154,       -2.418154
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum80_65d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum80_65d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum80_65d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.539432,       -7.590322,       -8.073846,       -4.469009,       -10.110594,       -15.350293,       -4.605988,       -12.214108,       -6.198828,       -5.350877,       -8.070475,       -5.722538,       -4.17293,       -12.56039,       -7.087744,       -7.374248
-7.590322,       -1.824698,       -9.834644,       -1.827782,       -8.695714,       -9.889655,       -6.22914,       -9.718467,       -10.924192,       -3.961356,       -11.2733,       -5.190459,       -5.153736,       -7.977698,       -7.06764,       -7.297175
-8.073846,       -9.834644,       -0.932609,       -5.639223,       -9.868979,       -14.616858,       -4.250419,       -10.434834,       -8.865969,       -6.064918,       -4.990023,       -6.735776,       -4.973881,       -8.609444,       -5.79424,       -11.128745
-4.469009,       -1.827782,       -5.639223,       4.47922,       -5.209219,       -6.76394,       1.656431,       -5.104869,       -5.230235,       2.720412,       -5.648157,       0.703867,       1.545417,       -4.571378,       -0.45766,       -2.707641
-10.110594,       -8.695714,       -9.868979,       -5.209219,       -4.858985,       -13.824309,       -3.438715,       -8.720286,       -7.234536,       -6.212093,       -12.060227,       -7.727793,       -2.383247,       -6.954462,       -5.516708,       -8.462881
-15.350293,       -9.889655,       -14.616858,       -6.76394,       -13.824309,       -3.109679,       -6.028958,       -5.868635,       -11.634522,       -3.304979,       -12.28584,       -8.330991,       -7.275222,       -6.467858,       -8.721698,       -4.643464
-4.605988,       -6.22914,       -4.250419,       1.656431,       -3.438715,       -6.028958,       5.373913,       -4.721639,       -5.559626,       2.066343,       -4.635651,       -0.267582,       2.728001,       -4.86137,       1.338728,       -3.686681
-12.214108,       -9.718467,       -10.434834,       -5.104869,       -8.720286,       -5.868635,       -4.721639,       -2.266349,       -7.058957,       -6.426334,       -12.859818,       -5.636526,       -4.495862,       -3.968336,       -6.867033,       -4.739407
-6.198828,       -10.924192,       -8.865969,       -5.230235,       -7.234536,       -11.634522,       -5.559626,       -7.058957,       -1.024431,       -5.277549,       -7.39896,       -5.685353,       -5.542046,       -6.381743,       -6.841952,       -11.707113
-5.350877,       -3.961356,       -6.064918,       2.720412,       -6.212093,       -3.304979,       2.066343,       -6.426334,       -5.277549,       5.620506,       -4.143658,       1.249048,       1.608067,       -4.582172,       -0.002684,       -3.601243
-8.070475,       -11.2733,       -4.990023,       -5.648157,       -12.060227,       -12.28584,       -4.635651,       -12.859818,       -7.39896,       -4.143658,       -2.099462,       -5.344964,       -5.669779,       -11.799445,       -4.313019,       -11.386242
-5.722538,       -5.190459,       -6.735776,       0.703867,       -7.727793,       -8.330991,       -0.267582,       -5.636526,       -5.685353,       1.249048,       -5.344964,       3.438393,       -0.507126,       -5.794829,       -2.058801,       -4.454194
-4.17293,       -5.153736,       -4.973881,       1.545417,       -2.383247,       -7.275222,       2.728001,       -4.495862,       -5.542046,       1.608067,       -5.669779,       -0.507126,       4.947173,       -3.153331,       1.206587,       -3.150603
-12.56039,       -7.977698,       -8.609444,       -4.571378,       -6.954462,       -6.467858,       -4.86137,       -3.968336,       -6.381743,       -4.582172,       -11.799445,       -5.794829,       -3.153331,       -3.515066,       -5.140607,       -5.786982
-7.087744,       -7.06764,       -5.79424,       -0.45766,       -5.516708,       -8.721698,       1.338728,       -6.867033,       -6.841952,       -0.002684,       -4.313019,       -2.058801,       1.206587,       -5.140607,       3.33804,       -4.331371
-7.374248,       -7.297175,       -11.128745,       -2.707641,       -8.462881,       -4.643464,       -3.686681,       -4.739407,       -11.707113,       -3.601243,       -11.386242,       -4.454194,       -3.150603,       -5.786982,       -4.331371,       -0.015489
                    };
            return _data;
        }
    };
//    H: 3.7462
//    E: -2.7580


// ----------------------------------------------------------------------------
// Ribosum55_95 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.253485    0.220710    0.296262    0.229544
	struct Ribosum55_95 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum55_95>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.540738,       -5.496178,       -5.053752,       -5.044963
-5.496178,       1.676856,       -5.939113,       -3.840383
-5.053752,       -5.939113,       1.372014,       -5.525593
-5.044963,       -3.840383,       -5.525593,       2.065157
                    };
            return _data;
        }
    };
//    H: 1.8678
//    E: -1.4651

// ----------------------------------------------------------------------------
// Ribosum55_95N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum55_95N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum55_95N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.540738,       -5.496178,       -5.053752,       -5.044963,       -5.939113
-5.496178,       1.676856,       -5.939113,       -3.840383,       -5.939113
-5.053752,       -5.939113,       1.372014,       -5.525593,       -5.939113
-5.044963,       -3.840383,       -5.525593,       2.065157,       -5.939113
-5.939113,       -5.939113,       -5.939113,       -5.939113,       -5.939113
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum55_95d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum55_95d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum55_95d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-0.674921,       -7.663487,       -7.944474,       -7.103436,       -999.0,       -999.0,       -11.432778,       -12.234601,       -6.950706,       -8.494178,       -9.817972,       -10.958884,       -7.468569,       -999.0,       -10.135762,       -999.0
-7.663487,       -0.265839,       -9.354775,       -4.899211,       -14.17798,       -9.334372,       -11.817988,       -999.0,       -999.0,       -4.92317,       -11.827673,       -8.704684,       -10.77517,       -8.33441,       -11.289647,       -11.769542
-7.944474,       -9.354775,       -0.310498,       -7.764506,       -11.795348,       -999.0,       -6.724385,       -999.0,       -9.144782,       -10.368241,       -9.524475,       -12.076939,       -9.301772,       -11.652217,       -8.345135,       -12.93123
-7.103436,       -4.899211,       -7.764506,       5.295141,       -9.77517,       -11.712921,       -2.957237,       -6.824684,       -13.074361,       -1.09202,       -8.408561,       -1.785298,       -3.204423,       -8.18458,       -4.75797,       -5.426992
-999.0,       -14.17798,       -11.795348,       -9.77517,       -1.79104,       -10.071338,       -4.812364,       -12.034849,       -12.602703,       -10.943519,       -10.183817,       -12.874609,       -4.885873,       -9.712921,       -9.10202,       -11.506508
-999.0,       -9.334372,       -999.0,       -11.712921,       -10.071338,       -1.306801,       -6.272461,       -6.857817,       -12.817988,       -6.214514,       -14.627921,       -10.800388,       -8.864924,       -9.928207,       -11.089895,       -999.0
-11.432778,       -11.817988,       -6.724385,       -2.957237,       -4.812364,       -6.272461,       5.849486,       -5.997725,       -9.74021,       -2.692019,       -6.626379,       -4.322598,       -1.050844,       -9.452465,       -1.00067,       -8.250352
-12.234601,       -999.0,       -999.0,       -6.824684,       -12.034849,       -6.857817,       -5.997725,       -0.704366,       -11.874609,       -8.069995,       -13.684542,       -7.176889,       -8.882017,       -9.033737,       -8.857009,       -7.860877
-6.950706,       -999.0,       -9.144782,       -13.074361,       -12.602703,       -12.817988,       -9.74021,       -11.874609,       -0.440468,       -6.920782,       -9.728833,       -7.433083,       -8.958884,       -999.0,       -11.183854,       -999.0
-8.494178,       -4.92317,       -10.368241,       -1.09202,       -10.943519,       -6.214514,       -2.692019,       -8.069995,       -6.920782,       5.953703,       -6.0811,       -1.257491,       -3.634613,       -5.689964,       -4.389921,       -7.976591
-9.817972,       -11.827673,       -9.524475,       -8.408561,       -10.183817,       -14.627921,       -6.626379,       -13.684542,       -9.728833,       -6.0811,       -1.746047,       -7.617411,       -14.884294,       -999.0,       -8.190401,       -14.741163
-10.958884,       -8.704684,       -12.076939,       -1.785298,       -12.874609,       -10.800388,       -4.322598,       -7.176889,       -7.433083,       -1.257491,       -7.617411,       3.977805,       -5.256449,       -10.616001,       -5.956528,       -7.078441
-7.468569,       -10.77517,       -9.301772,       -3.204423,       -4.885873,       -8.864924,       -1.050844,       -8.882017,       -8.958884,       -3.634613,       -14.884294,       -5.256449,       5.518458,       -6.208827,       -1.923035,       -5.409999
-999.0,       -8.33441,       -11.652217,       -8.18458,       -9.712921,       -9.928207,       -9.452465,       -9.033737,       -999.0,       -5.689964,       -999.0,       -10.616001,       -6.208827,       -1.211359,       -7.509086,       -5.480734
-10.135762,       -11.289647,       -8.345135,       -4.75797,       -9.10202,       -11.089895,       -1.00067,       -8.857009,       -11.183854,       -4.389921,       -8.190401,       -5.956528,       -1.923035,       -7.509086,       4.000784,       -7.296246
-999.0,       -11.769542,       -12.93123,       -5.426992,       -11.506508,       -999.0,       -8.250352,       -7.860877,       -999.0,       -7.976591,       -14.741163,       -7.078441,       -5.409999,       -5.480734,       -7.296246,       0.596694
                    };
            return _data;
        }
    };
//    H: 5.0873
//    E: -46.0902


// ----------------------------------------------------------------------------
// Ribosum60_70 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.257070    0.219662    0.299713    0.223555
	struct Ribosum60_70 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum60_70>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.31382,       -2.23918,       -1.839234,       -1.801323
-2.23918,       1.275419,       -2.827656,       -1.221216
-1.839234,       -2.827656,       1.123353,       -2.109371
-1.801323,       -1.221216,       -2.109371,       1.742602
                    };
            return _data;
        }
    };
//    H: 1.0589
//    E: -0.3567

// ----------------------------------------------------------------------------
// Ribosum60_70N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum60_70N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum60_70N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.31382,       -2.23918,       -1.839234,       -1.801323,       -2.827656
-2.23918,       1.275419,       -2.827656,       -1.221216,       -2.827656
-1.839234,       -2.827656,       1.123353,       -2.109371,       -2.827656
-1.801323,       -1.221216,       -2.109371,       1.742602,       -2.827656
-2.827656,       -2.827656,       -2.827656,       -2.827656,       -2.827656
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum60_70d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum60_70d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum60_70d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.718643,       -8.199305,       -8.062779,       -4.753676,       -10.045915,       -14.300285,       -5.256243,       -12.121502,       -6.005652,       -4.75074,       -9.972884,       -6.395634,       -4.754038,       -12.121502,       -6.35934,       -8.52399
-8.199305,       -1.727853,       -9.222175,       -2.126167,       -10.019514,       -9.202761,       -5.926025,       -11.191859,       -10.255276,       -3.789321,       -12.653006,       -5.987695,       -6.086826,       -8.849744,       -7.73174,       -8.004445
-8.062779,       -9.222175,       -0.610323,       -6.016469,       -10.707673,       -14.981138,       -4.933677,       -8.763903,       -9.305931,       -6.445243,       -5.499157,       -6.952448,       -6.713448,       -8.166983,       -5.737856,       -10.54499
-4.753676,       -2.126167,       -6.016469,       4.670023,       -6.268991,       -7.164322,       1.379242,       -5.872907,       -6.377908,       2.49177,       -6.350552,       0.395005,       1.299987,       -5.609185,       -0.803026,       -3.132143
-10.045915,       -10.019514,       -10.707673,       -6.268991,       -5.466676,       -11.507698,       -3.925416,       -7.480476,       -8.691578,       -6.251385,       -11.667057,       -8.559011,       -2.650686,       -7.35491,       -6.294412,       -8.25457
-14.300285,       -9.202761,       -14.981138,       -7.164322,       -11.507698,       -2.595166,       -5.390193,       -6.200209,       -13.841587,       -4.127025,       -12.307742,       -8.289254,       -7.474204,       -8.488952,       -9.007495,       -6.333455
-5.256243,       -5.926025,       -4.933677,       1.379242,       -3.925416,       -5.390193,       5.485315,       -4.916482,       -6.675856,       1.703129,       -4.502002,       -0.671236,       2.484547,       -4.639502,       1.124776,       -4.067079
-12.121502,       -11.191859,       -8.763903,       -5.872907,       -7.480476,       -6.200209,       -4.916482,       -1.699347,       -6.452943,       -6.316526,       -13.440001,       -6.559431,       -4.334035,       -3.997025,       -8.013479,       -4.678262
-6.005652,       -10.255276,       -9.305931,       -6.377908,       -8.691578,       -13.841587,       -6.675856,       -6.452943,       -0.925096,       -5.51405,       -9.74219,       -6.72634,       -6.118642,       -6.256612,       -7.677784,       -11.793421
-4.75074,       -3.789321,       -6.445243,       2.49177,       -6.251385,       -4.127025,       1.703129,       -6.316526,       -5.51405,       5.686385,       -4.895708,       0.986392,       1.189623,       -4.963382,       -0.273572,       -4.49101
-9.972884,       -12.653006,       -5.499157,       -6.350552,       -11.667057,       -12.307742,       -4.502002,       -13.440001,       -9.74219,       -4.895708,       -2.087836,       -5.856766,       -6.361633,       -11.852864,       -4.118864,       -11.776501
-6.395634,       -5.987695,       -6.952448,       0.395005,       -8.559011,       -8.289254,       -0.671236,       -6.559431,       -6.72634,       0.986392,       -5.856766,       3.588664,       -0.964059,       -5.518064,       -2.170215,       -5.118054
-4.754038,       -6.086826,       -6.713448,       1.299987,       -2.650686,       -7.474204,       2.484547,       -4.334035,       -6.118642,       1.189623,       -6.361633,       -0.964059,       5.084559,       -2.999609,       0.926854,       -3.815172
-12.121502,       -8.849744,       -8.166983,       -5.609185,       -7.35491,       -8.488952,       -4.639502,       -3.997025,       -6.256612,       -4.963382,       -11.852864,       -5.518064,       -2.999609,       -3.188588,       -5.098951,       -5.099686
-6.35934,       -7.73174,       -5.737856,       -0.803026,       -6.294412,       -9.007495,       1.124776,       -8.013479,       -7.677784,       -0.273572,       -4.118864,       -2.170215,       0.926854,       -5.098951,       3.469084,       -4.603474
-8.52399,       -8.004445,       -10.54499,       -3.132143,       -8.25457,       -6.333455,       -4.067079,       -4.678262,       -11.793421,       -4.49101,       -11.776501,       -5.118054,       -3.815172,       -5.099686,       -4.603474,       0.150257
                    };
            return _data;
        }
    };
//    H: 3.9397
//    E: -2.9069


// ----------------------------------------------------------------------------
// Ribosum90_75 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.257748    0.219008    0.297592    0.225652
	struct Ribosum90_75 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum90_75>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.297102,       -2.244548,       -1.911465,       -1.839534
-2.244548,       1.309927,       -2.780869,       -1.2403
-1.911465,       -2.780869,       1.147266,       -2.160211
-1.839534,       -1.2403,       -2.160211,       1.743215
                    };
            return _data;
        }
    };
//    H: 1.0672
//    E: -0.3621

// ----------------------------------------------------------------------------
// Ribosum90_75N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum90_75N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum90_75N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.297102,       -2.244548,       -1.911465,       -1.839534,       -2.780869
-2.244548,       1.309927,       -2.780869,       -1.2403,       -2.780869
-1.911465,       -2.780869,       1.147266,       -2.160211,       -2.780869
-1.839534,       -1.2403,       -2.160211,       1.743215,       -2.780869
-2.780869,       -2.780869,       -2.780869,       -2.780869,       -2.780869
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum90_75d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum90_75d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum90_75d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.50505,       -8.558939,       -8.390054,       -4.625876,       -9.982324,       -12.466292,       -5.103064,       -12.040698,       -6.280745,       -4.734424,       -9.624285,       -6.283397,       -4.451504,       -12.110286,       -6.005522,       -8.80206
-8.558939,       -1.477857,       -8.815592,       -2.362348,       -9.75726,       -8.820186,       -5.745974,       -10.902932,       -9.907734,       -3.653115,       -12.379474,       -5.669855,       -5.820409,       -8.49012,       -7.404115,       -7.470815
-8.390054,       -8.815592,       -0.644507,       -5.41299,       -10.411421,       -14.857612,       -4.446254,       -8.749711,       -9.56865,       -6.082313,       -4.984128,       -7.041123,       -6.414886,       -8.166714,       -5.467463,       -10.672399
-4.625876,       -2.362348,       -5.41299,       4.742317,       -6.439911,       -6.984418,       1.205387,       -5.577819,       -6.507205,       2.33456,       -6.265086,       0.439236,       1.144412,       -5.545165,       -1.145148,       -2.917014
-9.982324,       -9.75726,       -10.411421,       -6.439911,       -4.769161,       -11.028546,       -3.483926,       -7.381248,       -8.603897,       -6.328087,       -11.792584,       -8.61577,       -2.541635,       -7.090731,       -6.190485,       -7.8694
-12.466292,       -8.820186,       -14.857612,       -6.984418,       -11.028546,       -2.306589,       -5.172896,       -6.324811,       -13.108864,       -3.778614,       -13.124887,       -7.75465,       -7.225813,       -7.701037,       -8.678488,       -6.088141
-5.103064,       -5.745974,       -4.446254,       1.205387,       -3.483926,       -5.172896,       5.537689,       -4.844839,       -6.56492,       1.538291,       -4.490547,       -0.870381,       2.370427,       -4.887105,       1.109549,       -3.944186
-12.040698,       -10.902932,       -8.749711,       -5.577819,       -7.381248,       -6.324811,       -4.844839,       -1.429696,       -7.060813,       -6.438044,       -13.508099,       -6.730553,       -4.717289,       -4.190786,       -7.755345,       -4.560832
-6.280745,       -9.907734,       -9.56865,       -6.507205,       -8.603897,       -13.108864,       -6.56492,       -7.060813,       -0.880873,       -5.437828,       -9.07082,       -6.616445,       -5.776878,       -6.664714,       -7.495611,       -11.151257
-4.734424,       -3.653115,       -6.082313,       2.33456,       -6.328087,       -3.778614,       1.538291,       -6.438044,       -5.437828,       5.734362,       -5.065361,       0.951801,       0.992074,       -4.736961,       -0.584336,       -4.582165
-9.624285,       -12.379474,       -4.984128,       -6.265086,       -11.792584,       -13.124887,       -4.490547,       -13.508099,       -9.07082,       -5.065361,       -1.993475,       -6.309706,       -6.276545,       -11.178005,       -4.017645,       -11.066161
-6.283397,       -5.669855,       -7.041123,       0.439236,       -8.61577,       -7.75465,       -0.870381,       -6.730553,       -6.616445,       0.951801,       -6.309706,       3.597937,       -1.152574,       -5.635914,       -2.331869,       -4.853828
-4.451504,       -5.820409,       -6.414886,       1.144412,       -2.541635,       -7.225813,       2.370427,       -4.717289,       -5.776878,       0.992074,       -6.276545,       -1.152574,       5.111771,       -3.104847,       0.776142,       -3.869853
-12.110286,       -8.49012,       -8.166714,       -5.545165,       -7.090731,       -7.701037,       -4.887105,       -4.190786,       -6.664714,       -4.736961,       -11.178005,       -5.635914,       -3.104847,       -3.1899,       -5.244965,       -4.997052
-6.005522,       -7.404115,       -5.467463,       -1.145148,       -6.190485,       -8.678488,       1.109549,       -7.755345,       -7.495611,       -0.584336,       -4.017645,       -2.331869,       0.776142,       -5.244965,       3.528128,       -4.553141
-8.80206,       -7.470815,       -10.672399,       -2.917014,       -7.8694,       -6.088141,       -3.944186,       -4.560832,       -11.151257,       -4.582165,       -11.066161,       -4.853828,       -3.869853,       -4.997052,       -4.553141,       0.147034
                    };
            return _data;
        }
    };
//    H: 4.0078
//    E: -2.8498


// ----------------------------------------------------------------------------
// Ribosum60_55 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.262875    0.215567    0.294735    0.226823
	struct Ribosum60_55 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum60_55>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.168687,       -1.815158,       -1.487608,       -1.339857
-1.815158,       1.190002,       -2.506842,       -1.020697
-1.487608,       -2.506842,       1.065859,       -1.742736
-1.339857,       -1.020697,       -1.742736,       1.603531
                    };
            return _data;
        }
    };
//    H: 0.8659
//    E: -0.2434

// ----------------------------------------------------------------------------
// Ribosum60_55N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum60_55N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum60_55N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.168687,       -1.815158,       -1.487608,       -1.339857,       -2.506842
-1.815158,       1.190002,       -2.506842,       -1.020697,       -2.506842
-1.487608,       -2.506842,       1.065859,       -1.742736,       -2.506842
-1.339857,       -1.020697,       -1.742736,       1.603531,       -2.506842
-2.506842,       -2.506842,       -2.506842,       -2.506842,       -2.506842
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum60_55d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum60_55d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum60_55d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.158123,       -8.024885,       -8.417676,       -4.489449,       -9.631659,       -14.469915,       -5.026874,       -12.166714,       -6.399025,       -4.938407,       -9.897767,       -6.377233,       -4.818593,       -12.165372,       -6.408279,       -8.950106
-8.024885,       -1.928334,       -9.432708,       -2.226311,       -10.187554,       -9.312537,       -5.84971,       -10.812964,       -10.346143,       -3.801559,       -12.26206,       -4.888311,       -5.771488,       -8.776606,       -7.404258,       -8.132624
-8.417676,       -9.432708,       -0.850244,       -5.423974,       -10.738168,       -14.781552,       -3.877555,       -9.108982,       -9.024395,       -5.520246,       -5.582264,       -6.902606,       -4.725952,       -8.500257,       -5.946599,       -10.645217
-4.489449,       -2.226311,       -5.423974,       4.494256,       -5.976108,       -6.776316,       1.614981,       -5.604771,       -5.781504,       2.675783,       -6.189632,       0.560034,       1.592222,       -5.225681,       -0.516533,       -3.226053
-9.631659,       -10.187554,       -10.738168,       -5.976108,       -5.483484,       -11.271683,       -3.952448,       -7.805486,       -8.744802,       -6.024021,       -11.06291,       -8.214865,       -2.606293,       -7.538381,       -6.347865,       -8.568444
-14.469915,       -9.312537,       -14.781552,       -6.776316,       -11.271683,       -2.819299,       -5.209854,       -6.25086,       -13.717421,       -3.934914,       -12.395458,       -7.818441,       -6.988575,       -8.472372,       -8.521081,       -6.143726
-5.026874,       -5.84971,       -3.877555,       1.614981,       -3.952448,       -5.209854,       5.490138,       -4.956872,       -5.813831,       2.021383,       -4.568817,       -0.393015,       2.675306,       -4.696239,       1.227815,       -3.878479
-12.166714,       -10.812964,       -9.108982,       -5.604771,       -7.805486,       -6.25086,       -4.956872,       -2.001586,       -6.794924,       -5.995057,       -13.552902,       -6.00899,       -3.685382,       -4.110077,       -7.556531,       -4.927802
-6.399025,       -10.346143,       -9.024395,       -5.781504,       -8.744802,       -13.717421,       -5.813831,       -6.794924,       -1.119117,       -4.499627,       -9.706593,       -5.228543,       -5.502861,       -6.568939,       -7.893058,       -11.879121
-4.938407,       -3.801559,       -5.520246,       2.675783,       -6.024021,       -3.934914,       2.021383,       -5.995057,       -4.499627,       5.726645,       -4.600911,       1.194093,       1.479651,       -4.796341,       -0.159291,       -4.230869
-9.897767,       -12.26206,       -5.582264,       -6.189632,       -11.06291,       -12.395458,       -4.568817,       -13.552902,       -9.706593,       -4.600911,       -2.17108,       -4.888075,       -6.166906,       -11.94487,       -4.309335,       -11.788362
-6.377233,       -4.888311,       -6.902606,       0.560034,       -8.214865,       -7.818441,       -0.393015,       -6.00899,       -5.228543,       1.194093,       -4.888075,       3.471617,       -0.663762,       -5.349589,       -2.241133,       -5.073131
-4.818593,       -5.771488,       -4.725952,       1.592222,       -2.606293,       -6.988575,       2.675306,       -3.685382,       -5.502861,       1.479651,       -6.166906,       -0.663762,       4.926645,       -3.117544,       0.981007,       -2.990231
-12.165372,       -8.776606,       -8.500257,       -5.225681,       -7.538381,       -8.472372,       -4.696239,       -4.110077,       -6.568939,       -4.796341,       -11.94487,       -5.349589,       -3.117544,       -3.460062,       -3.246048,       -5.364374
-6.408279,       -7.404258,       -5.946599,       -0.516533,       -6.347865,       -8.521081,       1.227815,       -7.556531,       -7.893058,       -0.159291,       -4.309335,       -2.241133,       0.981007,       -3.246048,       3.353107,       -3.873768
-8.950106,       -8.132624,       -10.645217,       -3.226053,       -8.568444,       -6.143726,       -3.878479,       -4.927802,       -11.879121,       -4.230869,       -11.788362,       -5.073131,       -2.990231,       -5.364374,       -3.873768,       -0.219661
                    };
            return _data;
        }
    };
//    H: 3.8200
//    E: -2.8251


// ----------------------------------------------------------------------------
// Ribosum80_40 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.267125    0.213912    0.289402    0.229560
	struct Ribosum80_40 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum80_40>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.76399,       -1.07032,       -0.733567,       -0.708544
-1.07032,       0.913493,       -1.522692,       -0.481101
-0.733567,       -1.522692,       0.793153,       -0.930818
-0.708544,       -0.481101,       -0.930818,       1.195781
                    };
            return _data;
        }
    };
//    H: 0.4217
//    E: -0.0439

// ----------------------------------------------------------------------------
// Ribosum80_40N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum80_40N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum80_40N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.76399,       -1.07032,       -0.733567,       -0.708544,       -1.522692
-1.07032,       0.913493,       -1.522692,       -0.481101,       -1.522692
-0.733567,       -1.522692,       0.793153,       -0.930818,       -1.522692
-0.708544,       -0.481101,       -0.930818,       1.195781,       -1.522692
-1.522692,       -1.522692,       -1.522692,       -1.522692,       -1.522692
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum80_40d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum80_40d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum80_40d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-3.580115,       -6.486111,       -9.387212,       -4.437522,       -10.176005,       -13.003474,       -3.633356,       -12.277128,       -7.51855,       -5.309456,       -8.50819,       -5.790474,       -3.011052,       -12.449989,       -3.84984,       -8.841189
-6.486111,       -1.757667,       -9.657895,       -1.634401,       -9.695681,       -7.719053,       -4.842012,       -9.700664,       -7.022367,       -2.929125,       -9.839825,       -3.998798,       -3.99548,       -8.54725,       -6.202098,       -8.157489
-9.387212,       -9.657895,       -1.915263,       -4.933966,       -10.329787,       -13.61691,       -2.218998,       -10.81726,       -8.172385,       -4.987405,       -4.451103,       -6.618991,       -2.707506,       -9.178222,       -5.633005,       -8.572692
-4.437522,       -1.634401,       -4.933966,       3.971498,       -4.978658,       -2.749986,       2.262528,       -3.561026,       -3.703999,       3.103906,       -4.517583,       0.872568,       2.007361,       -3.853851,       -0.144228,       -2.455066
-10.176005,       -9.695681,       -10.329787,       -4.978658,       -5.733642,       -9.756881,       -2.602292,       -8.323622,       -6.870999,       -4.407942,       -10.396263,       -5.486429,       -2.836828,       -7.544903,       -5.757209,       -9.013451
-13.003474,       -7.719053,       -13.61691,       -2.749986,       -9.756881,       -3.987848,       -4.076502,       -5.564749,       -10.364143,       -2.849125,       -10.788318,       -5.869385,       -4.812696,       -7.270847,       -6.608877,       -5.29253
-3.633356,       -4.842012,       -2.218998,       2.262528,       -2.602292,       -4.076502,       5.189928,       -4.321154,       -4.520637,       3.011653,       -4.320062,       0.45054,       3.139448,       -4.281336,       1.459433,       -2.647939
-12.277128,       -9.700664,       -10.81726,       -3.561026,       -8.323622,       -5.564749,       -4.321154,       -3.331765,       -8.122765,       -2.43841,       -8.330932,       -4.218852,       -3.988062,       -4.971872,       -5.731374,       -5.873185
-7.51855,       -7.022367,       -8.172385,       -3.703999,       -6.870999,       -10.364143,       -4.520637,       -8.122765,       -1.944786,       -2.436704,       -8.339517,       -5.342897,       -4.093275,       -7.563938,       -6.911634,       -9.41256
-5.309456,       -2.929125,       -4.987405,       3.103906,       -4.407942,       -2.849125,       3.011653,       -2.43841,       -2.436704,       5.506344,       -3.769829,       1.676974,       2.31165,       -3.738995,       0.622941,       -2.490859
-8.50819,       -9.839825,       -4.451103,       -4.517583,       -10.396263,       -10.788318,       -4.320062,       -8.330932,       -8.339517,       -3.769829,       -2.24835,       -5.16975,       -5.313497,       -10.297236,       -4.361472,       -5.947189
-5.790474,       -3.998798,       -6.618991,       0.872568,       -5.486429,       -5.869385,       0.45054,       -4.218852,       -5.342897,       1.676974,       -5.16975,       3.115852,       0.202312,       -4.712813,       -1.205612,       -3.006674
-3.011052,       -3.99548,       -2.707506,       2.007361,       -2.836828,       -4.812696,       3.139448,       -3.988062,       -4.093275,       2.31165,       -5.313497,       0.202312,       4.447657,       -3.397649,       1.209215,       -1.712184
-12.449989,       -8.54725,       -9.178222,       -3.853851,       -7.544903,       -7.270847,       -4.281336,       -4.971872,       -7.563938,       -3.738995,       -10.297236,       -4.712813,       -3.397649,       -4.700573,       -3.962276,       -6.931401
-3.84984,       -6.202098,       -5.633005,       -0.144228,       -5.757209,       -6.608877,       1.459433,       -5.731374,       -6.911634,       0.622941,       -4.361472,       -1.205612,       1.209215,       -3.962276,       2.988177,       -3.177788
-8.841189,       -8.157489,       -8.572692,       -2.455066,       -9.013451,       -5.29253,       -2.647939,       -5.873185,       -9.41256,       -2.490859,       -5.947189,       -3.006674,       -1.712184,       -6.931401,       -3.177788,       -1.260371
                    };
            return _data;
        }
    };
//    H: 3.3134
//    E: -2.4260


// ----------------------------------------------------------------------------
// Ribosum90_35 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.260579    0.218837    0.296757    0.223828
	struct Ribosum90_35 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum90_35>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.940234,       -1.299759,       -0.891921,       -0.929537
-1.299759,       0.979968,       -1.672387,       -0.606559
-0.891921,       -1.672387,       0.844404,       -1.090766
-0.929537,       -0.606559,       -1.090766,       1.358504
                    };
            return _data;
        }
    };
//    H: 0.5395
//    E: -0.0870

// ----------------------------------------------------------------------------
// Ribosum90_35N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum90_35N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum90_35N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.940234,       -1.299759,       -0.891921,       -0.929537,       -1.672387
-1.299759,       0.979968,       -1.672387,       -0.606559,       -1.672387
-0.891921,       -1.672387,       0.844404,       -1.090766,       -1.672387
-0.929537,       -0.606559,       -1.090766,       1.358504,       -1.672387
-1.672387,       -1.672387,       -1.672387,       -1.672387,       -1.672387
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum90_35d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum90_35d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum90_35d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.974766,       -8.15016,       -8.793615,       -4.70318,       -9.72001,       -13.071132,       -3.773102,       -12.184052,       -7.198319,       -5.126236,       -9.257745,       -6.137592,       -2.50945,       -11.29546,       -3.649066,       -8.9315
-8.15016,       -2.147695,       -9.267416,       -1.616092,       -10.225329,       -8.720172,       -5.26541,       -10.343104,       -7.789528,       -2.740383,       -10.033347,       -4.580585,       -5.239005,       -8.802986,       -6.965351,       -8.158394
-8.793615,       -9.267416,       -1.378938,       -5.639656,       -9.726426,       -14.715694,       -2.525314,       -9.401786,       -9.310954,       -5.892708,       -4.546697,       -7.067041,       -2.838289,       -8.01746,       -5.768811,       -9.990884
-4.70318,       -1.616092,       -5.639656,       4.183871,       -5.470206,       -2.551462,       2.082525,       -4.033858,       -3.916143,       2.91077,       -4.703916,       0.760499,       1.916468,       -4.202124,       -0.36549,       -2.383782
-9.72001,       -10.225329,       -9.726426,       -5.470206,       -6.054515,       -11.242825,       -2.997991,       -8.253903,       -7.80971,       -5.250553,       -11.108019,       -6.10449,       -2.816544,       -7.572629,       -6.089799,       -8.841753
-13.071132,       -8.720172,       -14.715694,       -2.551462,       -11.242825,       -3.865682,       -4.983736,       -6.830418,       -12.227719,       -3.521848,       -12.095114,       -6.709262,       -6.053663,       -8.4477,       -8.001723,       -6.390951
-3.773102,       -5.26541,       -2.525314,       2.082525,       -2.997991,       -4.983736,       5.20164,       -4.326431,       -5.749172,       2.839926,       -4.617553,       0.297863,       2.994489,       -4.319177,       1.26125,       -3.004917
-12.184052,       -10.343104,       -9.401786,       -4.033858,       -8.253903,       -6.830418,       -4.326431,       -2.781752,       -7.853699,       -2.205295,       -9.083725,       -4.450393,       -4.359672,       -4.618296,       -6.363995,       -5.367381
-7.198319,       -7.789528,       -9.310954,       -3.916143,       -7.80971,       -12.227719,       -5.749172,       -7.853699,       -1.677301,       -2.640729,       -9.103584,       -6.400241,       -4.623958,       -7.176372,       -7.765761,       -10.259257
-5.126236,       -2.740383,       -5.892708,       2.91077,       -5.250553,       -3.521848,       2.839926,       -2.205295,       -2.640729,       5.496912,       -4.535657,       1.446454,       1.991679,       -3.940138,       0.349915,       -2.837565
-9.257745,       -10.033347,       -4.546697,       -4.703916,       -11.108019,       -12.095114,       -4.617553,       -9.083725,       -9.103584,       -4.535657,       -2.120837,       -5.690494,       -6.104665,       -10.665615,       -4.265865,       -5.11818
-6.137592,       -4.580585,       -7.067041,       0.760499,       -6.10449,       -6.709262,       0.297863,       -4.450393,       -6.400241,       1.446454,       -5.690494,       3.290803,       0.089913,       -4.726615,       -1.328658,       -2.677026
-2.50945,       -5.239005,       -2.838289,       1.916468,       -2.816544,       -6.053663,       2.994489,       -4.359672,       -4.623958,       1.991679,       -6.104665,       0.089913,       4.693218,       -3.495402,       1.06496,       -1.6164
-11.29546,       -8.802986,       -8.01746,       -4.202124,       -7.572629,       -8.4477,       -4.319177,       -4.618296,       -7.176372,       -3.940138,       -10.665615,       -4.726615,       -3.495402,       -4.009278,       -4.27792,       -6.177683
-3.649066,       -6.965351,       -5.768811,       -0.36549,       -6.089799,       -8.001723,       1.26125,       -6.363995,       -7.765761,       0.349915,       -4.265865,       -1.328658,       1.06496,       -4.27792,       3.16687,       -3.652225
-8.9315,       -8.158394,       -9.990884,       -2.383782,       -8.841753,       -6.390951,       -3.004917,       -5.367381,       -10.259257,       -2.837565,       -5.11818,       -2.677026,       -1.6164,       -6.177683,       -3.652225,       -0.770146
                    };
            return _data;
        }
    };
//    H: 3.4433
//    E: -2.5638


// ----------------------------------------------------------------------------
// Ribosum70_75 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.256784    0.216958    0.290312    0.235946
	struct Ribosum70_75 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum70_75>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.280203,       -2.320827,       -2.045641,       -2.029619
-2.320827,       1.386202,       -2.732371,       -1.206981
-2.045641,       -2.732371,       1.190633,       -2.265885
-2.029619,       -1.206981,       -2.265885,       1.727965
                    };
            return _data;
        }
    };
//    H: 1.0929
//    E: -0.3817

// ----------------------------------------------------------------------------
// Ribosum70_75N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum70_75N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum70_75N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.280203,       -2.320827,       -2.045641,       -2.029619,       -2.732371
-2.320827,       1.386202,       -2.732371,       -1.206981,       -2.732371
-2.045641,       -2.732371,       1.190633,       -2.265885,       -2.732371
-2.029619,       -1.206981,       -2.265885,       1.727965,       -2.732371
-2.732371,       -2.732371,       -2.732371,       -2.732371,       -2.732371
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum70_75d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum70_75d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum70_75d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-0.901563,       -8.248066,       -8.206071,       -5.063718,       -10.1511,       -13.331912,       -5.610089,       -11.546371,       -6.08838,       -4.819667,       -10.325788,       -6.544412,       -4.708839,       -12.957775,       -6.458322,       -7.983989
-8.248066,       -0.84322,       -8.855825,       -2.131881,       -9.75092,       -8.22664,       -5.40517,       -10.819808,       -10.733967,       -3.513431,       -12.356937,       -5.797097,       -6.169484,       -8.506808,       -7.497239,       -7.56117
-8.206071,       -8.855825,       -0.629978,       -6.013818,       -11.206686,       -14.601274,       -4.5788,       -9.207082,       -9.305243,       -6.530634,       -4.854308,       -6.899423,       -6.931803,       -8.479281,       -5.268253,       -10.679982
-5.063718,       -2.131881,       -6.013818,       4.831887,       -6.464343,       -7.23678,       0.964738,       -5.84719,       -7.197303,       2.157085,       -6.851187,       0.351933,       0.665052,       -5.745902,       -1.398067,       -2.815026
-10.1511,       -9.75092,       -11.206686,       -6.464343,       -4.060872,       -10.821909,       -3.412093,       -7.734671,       -8.843405,       -5.846136,       -10.570847,       -8.326598,       -2.387139,       -7.81179,       -6.146074,       -7.640437
-13.331912,       -8.22664,       -14.601274,       -7.23678,       -10.821909,       -1.433512,       -5.021204,       -5.972517,       -13.601772,       -3.742529,       -10.784514,       -7.86344,       -7.058053,       -8.156718,       -8.344131,       -5.968633
-5.610089,       -5.40517,       -4.5788,       0.964738,       -3.412093,       -5.021204,       5.634758,       -4.76199,       -6.8538,       1.524732,       -4.406846,       -0.993395,       2.145887,       -4.815531,       1.029054,       -3.808905
-11.546371,       -10.819808,       -9.207082,       -5.84719,       -7.734671,       -5.972517,       -4.76199,       -1.084075,       -6.800323,       -6.519255,       -12.596842,       -6.67561,       -4.722822,       -4.734967,       -7.774362,       -4.401135
-6.08838,       -10.733967,       -9.305243,       -7.197303,       -8.843405,       -13.601772,       -6.8538,       -6.800323,       -0.676374,       -5.495792,       -9.498664,       -6.512799,       -5.994533,       -6.645749,       -7.653948,       -11.861355
-4.819667,       -3.513431,       -6.530634,       2.157085,       -5.846136,       -3.742529,       1.524732,       -6.519255,       -5.495792,       5.792675,       -4.965532,       0.98209,       0.725893,       -4.547161,       -0.623248,       -4.233952
-10.325788,       -12.356937,       -4.854308,       -6.851187,       -10.570847,       -10.784514,       -4.406846,       -12.596842,       -9.498664,       -4.965532,       -2.244192,       -6.002397,       -6.499111,       -11.74241,       -4.037894,       -11.685913
-6.544412,       -5.797097,       -6.899423,       0.351933,       -8.326598,       -7.86344,       -0.993395,       -6.67561,       -6.512799,       0.98209,       -6.002397,       3.613486,       -1.536418,       -4.974176,       -2.459019,       -4.787795
-4.708839,       -6.169484,       -6.931803,       0.665052,       -2.387139,       -7.058053,       2.145887,       -4.722822,       -5.994533,       0.725893,       -6.499111,       -1.536418,       5.090502,       -3.382412,       0.568585,       -3.912005
-12.957775,       -8.506808,       -8.479281,       -5.745902,       -7.81179,       -8.156718,       -4.815531,       -4.734967,       -6.645749,       -4.547161,       -11.74241,       -4.974176,       -3.382412,       -3.110994,       -5.723499,       -4.547224
-6.458322,       -7.497239,       -5.268253,       -1.398067,       -6.146074,       -8.344131,       1.029054,       -7.774362,       -7.653948,       -0.623248,       -4.037894,       -2.459019,       0.568585,       -5.723499,       3.544534,       -4.467464
-7.983989,       -7.56117,       -10.679982,       -2.815026,       -7.640437,       -5.968633,       -3.808905,       -4.401135,       -11.861355,       -4.233952,       -11.685913,       -4.787795,       -3.912005,       -4.547224,       -4.467464,       0.081613
                    };
            return _data;
        }
    };
//    H: 4.0713
//    E: -2.8472


// ----------------------------------------------------------------------------
// Ribosum75_45 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.275262    0.205195    0.278884    0.240659
	struct Ribosum75_45 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum75_45>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.606543,       -0.96935,       -0.649557,       -0.632449
-0.96935,       0.919138,       -1.402574,       -0.373919
-0.649557,       -1.402574,       0.801708,       -0.85953
-0.632449,       -0.373919,       -0.85953,       1.045565
                    };
            return _data;
        }
    };
//    H: 0.3512
//    E: -0.0196

// ----------------------------------------------------------------------------
// Ribosum75_45N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum75_45N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum75_45N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.606543,       -0.96935,       -0.649557,       -0.632449,       -1.402574
-0.96935,       0.919138,       -1.402574,       -0.373919,       -1.402574
-0.649557,       -1.402574,       0.801708,       -0.85953,       -1.402574
-0.632449,       -0.373919,       -0.85953,       1.045565,       -1.402574
-1.402574,       -1.402574,       -1.402574,       -1.402574,       -1.402574
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum75_45d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum75_45d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum75_45d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-3.457361,       -5.941788,       -10.829298,       -4.631004,       -10.41406,       -12.609015,       -3.552882,       -11.716639,       -9.442114,       -5.110757,       -12.235461,       -5.816261,       -3.239948,       -12.43473,       -3.797876,       -10.56525
-5.941788,       -1.530535,       -9.005632,       -1.632802,       -9.655849,       -6.490975,       -4.527852,       -9.268025,       -6.23036,       -2.824085,       -9.089403,       -3.756631,       -3.582445,       -9.675173,       -5.778818,       -8.284121
-10.829298,       -9.005632,       -2.384092,       -4.155687,       -10.178907,       -12.648831,       -1.691604,       -10.361928,       -7.270985,       -4.024561,       -4.196717,       -5.748837,       -2.484429,       -10.08541,       -5.758677,       -8.589882
-4.631004,       -1.632802,       -4.155687,       3.90335,       -4.873767,       -2.509296,       2.321559,       -3.376258,       -3.622132,       3.238727,       -4.199847,       0.934717,       1.981842,       -4.258454,       -0.043665,       -2.690323
-10.41406,       -9.655849,       -10.178907,       -4.873767,       -5.544276,       -9.78489,       -2.24332,       -8.454881,       -6.489954,       -4.185158,       -10.538189,       -5.363167,       -3.080656,       -8.375413,       -5.940679,       -8.734127
-12.609015,       -6.490975,       -12.648831,       -2.509296,       -9.78489,       -3.076413,       -3.422098,       -4.964536,       -9.430793,       -2.462363,       -10.897234,       -5.24225,       -4.387573,       -7.520085,       -6.247701,       -5.206563
-3.552882,       -4.527852,       -1.691604,       2.321559,       -2.24332,       -3.422098,       5.247502,       -3.9125,       -4.17992,       3.081465,       -3.979968,       0.545303,       3.259267,       -4.101568,       1.533398,       -2.141221
-11.716639,       -9.268025,       -10.361928,       -3.376258,       -8.454881,       -4.964536,       -3.9125,       -2.872372,       -8.87026,       -2.395055,       -7.359734,       -4.129332,       -3.763451,       -5.277191,       -5.312322,       -6.290752
-9.442114,       -6.23036,       -7.270985,       -3.622132,       -6.489954,       -9.430793,       -4.17992,       -8.87026,       -2.110386,       -2.026777,       -10.179593,       -4.890997,       -3.544016,       -8.703761,       -7.593628,       -8.850072
-5.110757,       -2.824085,       -4.024561,       3.238727,       -4.185158,       -2.462363,       3.081465,       -2.395055,       -2.026777,       5.578987,       -3.584966,       1.873498,       2.457783,       -3.672127,       0.762912,       -2.494694
-12.235461,       -9.089403,       -4.196717,       -4.199847,       -10.538189,       -10.897234,       -3.979968,       -7.359734,       -10.179593,       -3.584966,       -2.470708,       -4.651065,       -5.134071,       -9.932369,       -4.172951,       -7.041102
-5.816261,       -3.756631,       -5.748837,       0.934717,       -5.363167,       -5.24225,       0.545303,       -4.129332,       -4.890997,       1.873498,       -4.651065,       2.990302,       0.258791,       -4.677701,       -1.161426,       -3.083802
-3.239948,       -3.582445,       -2.484429,       1.981842,       -3.080656,       -4.387573,       3.259267,       -3.763451,       -3.544016,       2.457783,       -5.134071,       0.258791,       4.261316,       -3.165087,       1.226482,       -1.723679
-12.43473,       -9.675173,       -10.08541,       -4.258454,       -8.375413,       -7.520085,       -4.101568,       -5.277191,       -8.703761,       -3.672127,       -9.932369,       -4.677701,       -3.165087,       -5.241131,       -3.734328,       -7.245413
-3.797876,       -5.778818,       -5.758677,       -0.043665,       -5.940679,       -6.247701,       1.533398,       -5.312322,       -7.593628,       0.762912,       -4.172951,       -1.161426,       1.226482,       -3.734328,       2.870032,       -2.896394
-10.56525,       -8.284121,       -8.589882,       -2.690323,       -8.734127,       -5.206563,       -2.141221,       -6.290752,       -8.850072,       -2.494694,       -7.041102,       -3.083802,       -1.723679,       -7.245413,       -2.896394,       -1.817184
                    };
            return _data;
        }
    };
//    H: 3.2269
//    E: -2.4056


// ----------------------------------------------------------------------------
// Ribosum75_35 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.278789    0.202169    0.274560    0.244481
	struct Ribosum75_35 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum75_35>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.543593,       -0.909112,       -0.612637,       -0.570457
-0.909112,       0.898117,       -1.383457,       -0.350544
-0.612637,       -1.383457,       0.786706,       -0.818834
-0.570457,       -0.350544,       -0.818834,       0.994311
                    };
            return _data;
        }
    };
//    H: 0.3222
//    E: -0.0107

// ----------------------------------------------------------------------------
// Ribosum75_35N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum75_35N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum75_35N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.543593,       -0.909112,       -0.612637,       -0.570457,       -1.383457
-0.909112,       0.898117,       -1.383457,       -0.350544,       -1.383457
-0.612637,       -1.383457,       0.786706,       -0.818834,       -1.383457
-0.570457,       -0.350544,       -0.818834,       0.994311,       -1.383457
-1.383457,       -1.383457,       -1.383457,       -1.383457,       -1.383457
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum75_35d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum75_35d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum75_35d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-3.662961,       -6.107186,       -10.993546,       -4.461319,       -10.579715,       -12.727663,       -3.494045,       -11.886669,       -9.567928,       -5.038619,       -12.359186,       -5.379443,       -3.285644,       -12.59451,       -3.782326,       -10.777612
-6.107186,       -1.652126,       -9.119868,       -1.696717,       -9.781845,       -6.522865,       -4.324422,       -9.393741,       -6.327338,       -2.546671,       -9.170797,       -3.809896,       -3.642895,       -9.77211,       -5.85482,       -8.44244
-10.993546,       -9.119868,       -2.507433,       -4.277613,       -10.263997,       -12.733919,       -1.728112,       -10.447731,       -7.393656,       -4.092012,       -4.265675,       -5.869783,       -2.564031,       -10.198638,       -5.820373,       -8.220262
-4.461319,       -1.696717,       -4.277613,       3.815219,       -4.892682,       -2.326448,       2.380819,       -3.416941,       -3.709131,       3.273119,       -4.274846,       0.925096,       2.016451,       -4.279302,       -0.029177,       -2.717075
-10.579715,       -9.781845,       -10.263997,       -4.892682,       -5.670266,       -9.871055,       -2.248728,       -8.585224,       -6.531644,       -4.188863,       -10.594542,       -5.341874,       -3.081446,       -8.505775,       -6.023969,       -8.908619
-12.727663,       -6.522865,       -12.733919,       -2.326448,       -9.871055,       -3.122803,       -3.368673,       -5.055095,       -9.421638,       -2.475686,       -10.940497,       -5.29484,       -4.397236,       -7.610645,       -6.310801,       -5.340565
-3.494045,       -4.324422,       -1.728112,       2.380819,       -2.248728,       -3.368673,       5.278311,       -3.919976,       -4.237354,       3.181913,       -3.920523,       0.629488,       3.301873,       -4.100176,       1.562796,       -2.199196
-11.886669,       -9.393741,       -10.447731,       -3.416941,       -8.585224,       -5.055095,       -3.919976,       -3.006853,       -8.934983,       -2.380687,       -7.216882,       -4.203641,       -3.491363,       -5.402464,       -5.053581,       -6.444948
-9.567928,       -6.327338,       -7.393656,       -3.709131,       -6.531644,       -9.421638,       -4.237354,       -8.934983,       -2.23395,       -1.96545,       -10.229085,       -4.975154,       -3.6144,       -8.821697,       -7.678228,       -8.780446
-5.038619,       -2.546671,       -4.092012,       3.273119,       -4.188863,       -2.475686,       3.181913,       -2.380687,       -1.96545,       5.620541,       -3.525141,       1.903103,       2.548689,       -3.558338,       0.802578,       -2.376376
-12.359186,       -9.170797,       -4.265675,       -4.274846,       -10.594542,       -10.940497,       -3.920523,       -7.216882,       -10.229085,       -3.525141,       -2.499462,       -4.724309,       -5.046875,       -9.922411,       -4.231557,       -7.170056
-5.379443,       -3.809896,       -5.869783,       0.925096,       -5.341874,       -5.29484,       0.629488,       -4.203641,       -4.975154,       1.903103,       -4.724309,       2.96707,       0.318876,       -4.655974,       -1.072052,       -3.201819
-3.285644,       -3.642895,       -2.564031,       2.016451,       -3.081446,       -4.397236,       3.301873,       -3.491363,       -3.6144,       2.548689,       -5.046875,       0.318876,       4.169474,       -3.235047,       1.200465,       -1.738466
-12.59451,       -9.77211,       -10.198638,       -4.279302,       -8.505775,       -7.610645,       -4.100176,       -5.402464,       -8.821697,       -3.558338,       -9.922411,       -4.655974,       -3.235047,       -5.370765,       -3.590734,       -7.42212
-3.782326,       -5.85482,       -5.820373,       -0.029177,       -6.023969,       -6.310801,       1.562796,       -5.053581,       -7.678228,       0.802578,       -4.231557,       -1.072052,       1.200465,       -3.590734,       2.809964,       -2.799339
-10.777612,       -8.44244,       -8.220262,       -2.717075,       -8.908619,       -5.340565,       -2.199196,       -6.444948,       -8.780446,       -2.376376,       -7.170056,       -3.201819,       -1.738466,       -7.42212,       -2.799339,       -1.956641
                    };
            return _data;
        }
    };
//    H: 3.2104
//    E: -2.4206


// ----------------------------------------------------------------------------
// Ribosum70 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.280309    0.201287    0.271525    0.246880
	struct Ribosum70 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum70>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.765094,       -1.163735,       -0.912539,       -0.809684
-1.163735,       1.069293,       -1.66682,       -0.457049
-0.912539,       -1.66682,       0.947226,       -1.166778
-0.809684,       -0.457049,       -1.166778,       1.209794
                    };
            return _data;
        }
    };
//    H: 0.2873
//    E: -0.0004

// ----------------------------------------------------------------------------
// Ribosum70N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum70N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum70N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.765094,       -1.163735,       -0.912539,       -0.809684,       -1.66682
-1.163735,       1.069293,       -1.66682,       -0.457049,       -1.66682
-0.912539,       -1.66682,       0.947226,       -1.166778,       -1.66682
-0.809684,       -0.457049,       -1.166778,       1.209794,       -1.66682
-1.66682,       -1.66682,       -1.66682,       -1.66682,       -1.66682
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum70d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum70d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum70d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-0.528703,       -8.624881,       -7.531244,       -5.269331,       -10.178217,       -14.655632,       -6.772966,       -12.654148,       -6.097798,       -5.259527,       -9.650837,       -7.528902,       -5.825619,       -13.146568,       -7.782907,       -9.509798
-8.624881,       -0.059389,       -9.366203,       -3.605302,       -10.981761,       -8.196924,       -6.51095,       -11.439282,       -11.678101,       -3.616559,       -11.761888,       -6.500368,       -7.878459,       -9.232336,       -9.392704,       -9.269152
-7.531244,       -9.366203,       -0.518987,       -6.73554,       -11.395353,       -13.302746,       -5.558247,       -12.416879,       -7.876427,       -7.052112,       -6.314139,       -7.004963,       -7.854916,       -12.173865,       -6.289584,       -10.609315
-5.269331,       -3.605302,       -6.73554,       5.078631,       -8.27111,       -8.362788,       -0.814726,       -5.933043,       -8.947585,       1.017106,       -7.435594,       -0.599535,       -1.238659,       -6.892868,       -3.314442,       -3.604315
-10.178217,       -10.981761,       -11.395353,       -8.27111,       -2.006037,       -11.105712,       -3.981239,       -9.459429,       -9.64567,       -6.940602,       -8.719557,       -8.721722,       -2.990813,       -11.7813,       -6.421223,       -9.682542
-14.655632,       -8.196924,       -13.302746,       -8.362788,       -11.105712,       -0.763002,       -5.108405,       -6.33932,       -14.139177,       -4.138917,       -12.202371,       -8.568511,       -7.18842,       -9.539881,       -7.822017,       -5.390582
-6.772966,       -6.51095,       -5.558247,       -0.814726,       -3.981239,       -5.108405,       5.904389,       -4.956329,       -8.046161,       -0.016589,       -5.031485,       -1.90867,       0.939694,       -6.602085,       0.637284,       -4.888189
-12.654148,       -11.439282,       -12.416879,       -5.933043,       -9.459429,       -6.33932,       -4.956329,       -0.828712,       -13.097999,       -6.827696,       -11.994054,       -6.406713,       -6.605012,       -6.319613,       -8.206776,       -6.372727
-6.097798,       -11.678101,       -7.876427,       -8.947585,       -9.64567,       -14.139177,       -8.046161,       -13.097999,       -0.507173,       -5.879408,       -9.079133,       -5.986728,       -6.759452,       -13.752085,       -9.139319,       -13.665155
-5.259527,       -3.616559,       -7.052112,       1.017106,       -6.940602,       -4.138917,       -0.016589,       -6.827696,       -5.879408,       6.024304,       -4.784177,       0.517795,       -1.21057,       -4.412572,       -2.233691,       -5.305305
-9.650837,       -11.761888,       -6.314139,       -7.435594,       -8.719557,       -12.202371,       -5.031485,       -11.994054,       -9.079133,       -4.784177,       -1.914296,       -5.783536,       -7.420563,       -11.639376,       -4.989056,       -12.511972
-7.528902,       -6.500368,       -7.004963,       -0.599535,       -8.721722,       -8.568511,       -1.90867,       -6.406713,       -5.986728,       0.517795,       -5.783536,       3.825906,       -3.420057,       -4.888016,       -3.257574,       -5.174408
-5.825619,       -7.878459,       -7.854916,       -1.238659,       -2.990813,       -7.18842,       0.939694,       -6.605012,       -6.759452,       -1.21057,       -7.420563,       -3.420057,       5.228446,       -5.147113,       -0.561409,       -4.605534
-13.146568,       -9.232336,       -12.173865,       -6.892868,       -11.7813,       -9.539881,       -6.602085,       -6.319613,       -13.752085,       -4.412572,       -11.639376,       -4.888016,       -5.147113,       -1.597429,       -6.458014,       -5.01985
-7.782907,       -9.392704,       -6.289584,       -3.314442,       -6.421223,       -7.822017,       0.637284,       -8.206776,       -9.139319,       -2.233691,       -4.989056,       -3.257574,       -0.561409,       -6.458014,       3.783778,       -5.630842
-9.509798,       -9.269152,       -10.609315,       -3.604315,       -9.682542,       -5.390582,       -4.888189,       -6.372727,       -13.665155,       -5.305305,       -12.511972,       -5.174408,       -4.605534,       -5.01985,       -5.630842,       0.436099
                    };
            return _data;
        }
    };
//    H: 3.2151
//    E: -2.4571


// ----------------------------------------------------------------------------
// Ribosum100_40 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.258192    0.219618    0.297460    0.224730
	struct Ribosum100_40 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum100_40>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.974413,       -1.346626,       -0.924218,       -1.010277
-1.346626,       1.002076,       -1.700147,       -0.615834
-0.924218,       -1.700147,       0.85501,       -1.115055
-1.010277,       -0.615834,       -1.115055,       1.3849
                    };
            return _data;
        }
    };
//    H: 0.5636
//    E: -0.0964

// ----------------------------------------------------------------------------
// Ribosum100_40N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum100_40N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum100_40N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.974413,       -1.346626,       -0.924218,       -1.010277,       -1.700147
-1.346626,       1.002076,       -1.700147,       -0.615834,       -1.700147
-0.924218,       -1.700147,       0.85501,       -1.115055,       -1.700147
-1.010277,       -0.615834,       -1.115055,       1.3849,       -1.700147
-1.700147,       -1.700147,       -1.700147,       -1.700147,       -1.700147
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum100_40d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum100_40d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum100_40d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.600567,       -8.467939,       -8.819485,       -5.074901,       -10.053981,       -13.450757,       -3.872748,       -12.102272,       -6.622717,       -5.225275,       -9.690546,       -6.501104,       -2.48499,       -12.260351,       -3.543396,       -8.862793
-8.467939,       -1.852273,       -9.593305,       -1.652333,       -10.551422,       -8.854811,       -5.450894,       -10.680818,       -7.168934,       -2.700414,       -10.383556,       -4.923363,       -5.60509,       -8.87683,       -7.165599,       -8.382135
-8.819485,       -9.593305,       -1.325788,       -6.066426,       -10.646173,       -15.136793,       -2.572288,       -9.355807,       -9.389321,       -6.291675,       -4.223394,       -7.124271,       -2.824353,       -8.009649,       -5.828027,       -9.761854
-5.074901,       -1.652333,       -6.066426,       4.256203,       -5.777754,       -2.375845,       2.028595,       -4.178211,       -3.789295,       2.874931,       -4.929228,       0.745067,       1.878312,       -4.539212,       -0.39483,       -2.452605
-10.053981,       -10.551422,       -10.646173,       -5.777754,       -6.203821,       -11.694008,       -3.241087,       -8.32376,       -7.763124,       -5.397448,       -11.479565,       -6.201074,       -2.906494,       -8.02856,       -6.20473,       -8.847164
-13.450757,       -8.854811,       -15.136793,       -2.375845,       -11.694008,       -3.458077,       -5.069179,       -6.862301,       -12.895851,       -3.75562,       -12.065336,       -7.103088,       -6.47338,       -8.946782,       -8.304891,       -6.639151
-3.872748,       -5.450894,       -2.572288,       2.028595,       -3.241087,       -5.069179,       5.220232,       -4.386867,       -6.029418,       2.798284,       -4.709682,       0.249083,       2.925087,       -4.345505,       1.188573,       -3.006757
-12.102272,       -10.680818,       -9.355807,       -4.178211,       -8.32376,       -6.862301,       -4.386867,       -2.558026,       -7.139886,       -2.204826,       -9.135954,       -4.409044,       -4.335169,       -4.667376,       -6.481943,       -5.425627
-6.622717,       -7.168934,       -9.389321,       -3.789295,       -7.763124,       -12.895851,       -6.029418,       -7.139886,       -1.6221,       -2.571426,       -9.906777,       -6.187946,       -4.86685,       -6.97909,       -7.671767,       -10.142488
-5.225275,       -2.700414,       -6.291675,       2.874931,       -5.397448,       -3.75562,       2.798284,       -2.204826,       -2.571426,       5.487147,       -4.779033,       1.423692,       1.886496,       -4.162154,       0.32665,       -3.035025
-9.690546,       -10.383556,       -4.223394,       -4.929228,       -11.479565,       -12.065336,       -4.709682,       -9.135954,       -9.906777,       -4.779033,       -2.306672,       -5.534126,       -6.323656,       -10.568104,       -4.341375,       -5.017979
-6.501104,       -4.923363,       -7.124271,       0.745067,       -6.201074,       -7.103088,       0.249083,       -4.409044,       -6.187946,       1.423692,       -5.534126,       3.321382,       0.062309,       -4.610063,       -1.261419,       -2.571696
-2.48499,       -5.60509,       -2.824353,       1.878312,       -2.906494,       -6.47338,       2.925087,       -4.335169,       -4.86685,       1.886496,       -6.323656,       0.062309,       4.726972,       -3.527937,       1.044685,       -1.579255
-12.260351,       -8.87683,       -8.009649,       -4.539212,       -8.02856,       -8.946782,       -4.345505,       -4.667376,       -6.97909,       -4.162154,       -10.568104,       -4.610063,       -3.527937,       -4.136279,       -4.204799,       -5.90082
-3.543396,       -7.165599,       -5.828027,       -0.39483,       -6.20473,       -8.304891,       1.188573,       -6.481943,       -7.671767,       0.32665,       -4.341375,       -1.261419,       1.044685,       -4.204799,       3.190996,       -3.649002
-8.862793,       -8.382135,       -9.761854,       -2.452605,       -8.847164,       -6.639151,       -3.006757,       -5.425627,       -10.142488,       -3.035025,       -5.017979,       -2.571696,       -1.579255,       -5.90082,       -3.649002,       -0.710431
                    };
            return _data;
        }
    };
//    H: 3.4644
//    E: -2.6043


// ----------------------------------------------------------------------------
// Ribosum70_30 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.279990    0.201721    0.272007    0.246281
	struct Ribosum70_30 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum70_30>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.486746,       -0.825564,       -0.579774,       -0.52374
-0.825564,       0.860548,       -1.336022,       -0.308649
-0.579774,       -1.336022,       0.768524,       -0.775864
-0.52374,       -0.308649,       -0.775864,       0.945961
                    };
            return _data;
        }
    };
//    H: 0.2921
//    E: -0.0017

// ----------------------------------------------------------------------------
// Ribosum70_30N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum70_30N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum70_30N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.486746,       -0.825564,       -0.579774,       -0.52374,       -1.336022
-0.825564,       0.860548,       -1.336022,       -0.308649,       -1.336022
-0.579774,       -1.336022,       0.768524,       -0.775864,       -1.336022
-0.52374,       -0.308649,       -0.775864,       0.945961,       -1.336022
-1.336022,       -1.336022,       -1.336022,       -1.336022,       -1.336022
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum70_30d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum70_30d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum70_30d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-3.67903,       -5.680084,       -10.775687,       -4.112531,       -11.748309,       -12.341592,       -3.761649,       -12.028,       -9.344594,       -4.964458,       -12.139289,       -5.484192,       -3.478001,       -12.471075,       -3.580599,       -10.797334
-5.680084,       -1.892112,       -8.83876,       -1.793752,       -10.499905,       -6.223028,       -4.027431,       -9.372571,       -7.931551,       -2.473069,       -9.720936,       -3.838717,       -3.275431,       -9.663583,       -5.547954,       -8.630117
-10.775687,       -8.83876,       -2.779451,       -4.485893,       -11.171679,       -12.636625,       -1.886438,       -10.826922,       -7.172327,       -4.218062,       -5.076266,       -6.961688,       -2.516467,       -9.890273,       -5.749961,       -7.85728
-4.112531,       -1.793752,       -4.485893,       3.778184,       -5.36436,       -2.420767,       2.404237,       -3.256768,       -3.498141,       3.289178,       -4.94948,       0.956724,       2.031266,       -4.385375,       -0.063036,       -2.976971
-11.748309,       -10.499905,       -11.171679,       -5.36436,       -5.89578,       -9.495632,       -2.234216,       -8.413957,       -9.185988,       -4.3153,       -11.068923,       -6.352081,       -3.132122,       -8.858928,       -6.083588,       -8.971919
-12.341592,       -6.223028,       -12.636625,       -2.420767,       -9.495632,       -3.826865,       -3.451778,       -4.801895,       -9.202184,       -2.593347,       -10.698463,       -5.428781,       -4.234959,       -7.250398,       -6.021124,       -5.530369
-3.761649,       -4.027431,       -1.886438,       2.404237,       -2.234216,       -3.451778,       5.29153,       -4.145562,       -4.447253,       3.194165,       -3.909306,       0.642066,       3.35654,       -3.821913,       1.60903,       -2.168338
-12.028,       -9.372571,       -10.826922,       -3.256768,       -8.413957,       -4.801895,       -4.145562,       -3.425678,       -8.612276,       -2.539796,       -6.813845,       -4.295038,       -3.291059,       -5.075513,       -5.098945,       -6.18754
-9.344594,       -7.931551,       -7.172327,       -3.498141,       -9.185988,       -9.202184,       -4.447253,       -8.612276,       -2.322027,       -2.002118,       -10.276477,       -4.76975,       -3.622375,       -8.471694,       -7.75258,       -8.419777
-4.964458,       -2.473069,       -4.218062,       3.289178,       -4.3153,       -2.593347,       3.194165,       -2.539796,       -2.002118,       5.645429,       -3.745848,       1.911054,       2.576761,       -3.463423,       0.841659,       -2.425054
-12.139289,       -9.720936,       -5.076266,       -4.94948,       -11.068923,       -10.698463,       -3.909306,       -6.813845,       -10.276477,       -3.745848,       -2.58502,       -4.818339,       -5.053951,       -9.678523,       -4.309795,       -7.808471
-5.484192,       -3.838717,       -6.961688,       0.956724,       -6.352081,       -5.428781,       0.642066,       -4.295038,       -4.76975,       1.911054,       -4.818339,       2.975406,       0.318923,       -4.694829,       -1.027004,       -3.27568
-3.478001,       -3.275431,       -2.516467,       2.031266,       -3.132122,       -4.234959,       3.35654,       -3.291059,       -3.622375,       2.576761,       -5.053951,       0.318923,       4.120566,       -3.003263,       1.135031,       -1.807444
-12.471075,       -9.663583,       -9.890273,       -4.385375,       -8.858928,       -7.250398,       -3.821913,       -5.075513,       -8.471694,       -3.463423,       -9.678523,       -4.694829,       -3.003263,       -4.954988,       -3.332309,       -7.20847
-3.580599,       -5.547954,       -5.749961,       -0.063036,       -6.083588,       -6.021124,       1.60903,       -5.098945,       -7.75258,       0.841659,       -4.309795,       -1.027004,       1.135031,       -3.332309,       2.771471,       -2.708143
-10.797334,       -8.630117,       -7.85728,       -2.976971,       -8.971919,       -5.530369,       -2.168338,       -6.18754,       -8.419777,       -2.425054,       -7.808471,       -3.27568,       -1.807444,       -7.20847,       -2.708143,       -1.594765
                    };
            return _data;
        }
    };
//    H: 3.2166
//    E: -2.4565


// ----------------------------------------------------------------------------
// Ribosum55_40 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.258416    0.219434    0.297256    0.224894
	struct Ribosum55_40 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum55_40>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.972624,       -1.347858,       -0.924574,       -1.005783
-1.347858,       1.002874,       -1.70264,       -0.616822
-0.924574,       -1.70264,       0.855781,       -1.11593
-1.005783,       -0.616822,       -1.11593,       1.383882
                    };
            return _data;
        }
    };
//    H: 0.5634
//    E: -0.0964

// ----------------------------------------------------------------------------
// Ribosum55_40N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum55_40N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum55_40N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.972624,       -1.347858,       -0.924574,       -1.005783,       -1.70264
-1.347858,       1.002874,       -1.70264,       -0.616822,       -1.70264
-0.924574,       -1.70264,       0.855781,       -1.11593,       -1.70264
-1.005783,       -0.616822,       -1.11593,       1.383882,       -1.70264
-1.70264,       -1.70264,       -1.70264,       -1.70264,       -1.70264
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum55_40d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum55_40d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum55_40d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.612703,       -8.459749,       -8.825131,       -5.067083,       -10.071268,       -13.46508,       -3.875776,       -12.119081,       -6.625347,       -5.219249,       -9.682105,       -6.502756,       -2.491643,       -12.288433,       -3.546423,       -8.848397
-8.459749,       -1.863324,       -9.605679,       -1.65595,       -10.554208,       -8.872614,       -5.442598,       -10.686861,       -7.182383,       -2.7007,       -10.392648,       -4.929192,       -5.595223,       -8.898175,       -7.17781,       -8.388812
-8.825131,       -9.605679,       -1.324401,       -6.063952,       -10.655949,       -15.168392,       -2.57179,       -9.369887,       -9.403089,       -6.296589,       -4.225927,       -7.124359,       -2.827406,       -8.017552,       -5.832019,       -9.778023
-5.067083,       -1.65595,       -6.063952,       4.253551,       -5.77345,       -2.377184,       2.027532,       -4.17958,       -3.791271,       2.875696,       -4.932672,       0.742301,       1.87769,       -4.542997,       -0.393345,       -2.460334
-10.071268,       -10.554208,       -10.655949,       -5.77345,       -6.214574,       -11.703636,       -3.24176,       -8.270647,       -7.753685,       -5.399501,       -11.488486,       -6.201903,       -2.910583,       -8.028903,       -6.192645,       -8.858046
-13.46508,       -8.872614,       -15.168392,       -2.377184,       -11.703636,       -3.457166,       -5.074694,       -6.846981,       -12.889081,       -3.754759,       -12.061398,       -7.115399,       -6.481225,       -8.959101,       -8.311741,       -6.654925
-3.875776,       -5.442598,       -2.57179,       2.027532,       -3.24176,       -5.074694,       5.223777,       -4.379709,       -6.025194,       2.800143,       -4.709419,       0.248657,       2.926284,       -4.335759,       1.190452,       -3.011639
-12.119081,       -10.686861,       -9.369887,       -4.17958,       -8.270647,       -6.846981,       -4.379709,       -2.562143,       -7.128788,       -2.204301,       -9.15401,       -4.402896,       -4.333993,       -4.662397,       -6.493089,       -5.439169
-6.625347,       -7.182383,       -9.403089,       -3.791271,       -7.753685,       -12.889081,       -6.025194,       -7.128788,       -1.620809,       -2.572054,       -9.900495,       -6.192883,       -4.88246,       -6.957903,       -7.68184,       -10.161231
-5.219249,       -2.7007,       -6.296589,       2.875696,       -5.399501,       -3.754759,       2.800143,       -2.204301,       -2.572054,       5.491115,       -4.783277,       1.423735,       1.886945,       -4.168753,       0.329177,       -3.038128
-9.682105,       -10.392648,       -4.225927,       -4.932672,       -11.488486,       -12.061398,       -4.709419,       -9.15401,       -9.900495,       -4.783277,       -2.305794,       -5.535621,       -6.331841,       -10.553958,       -4.341605,       -5.020675
-6.502756,       -4.929192,       -7.124359,       0.742301,       -6.201903,       -7.115399,       0.248657,       -4.402896,       -6.192883,       1.423735,       -5.535621,       3.320578,       0.061114,       -4.604529,       -1.263617,       -2.577859
-2.491643,       -5.595223,       -2.827406,       1.87769,       -2.910583,       -6.481225,       2.926284,       -4.333993,       -4.88246,       1.886945,       -6.331841,       0.061114,       4.724975,       -3.525615,       1.043487,       -1.586698
-12.288433,       -8.898175,       -8.017552,       -4.542997,       -8.028903,       -8.959101,       -4.335759,       -4.662397,       -6.957903,       -4.168753,       -10.553958,       -4.604529,       -3.525615,       -4.121301,       -4.200223,       -5.90658
-3.546423,       -7.17781,       -5.832019,       -0.393345,       -6.192645,       -8.311741,       1.190452,       -6.493089,       -7.68184,       0.329177,       -4.341605,       -1.263617,       1.043487,       -4.200223,       3.189496,       -3.659569
-8.848397,       -8.388812,       -9.778023,       -2.460334,       -8.858046,       -6.654925,       -3.011639,       -5.439169,       -10.161231,       -3.038128,       -5.020675,       -2.577859,       -1.586698,       -5.90658,       -3.659569,       -0.715198
                    };
            return _data;
        }
    };
//    H: 3.4657
//    E: -2.6055


// ----------------------------------------------------------------------------
// Ribosum80_70 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.256473    0.222835    0.303146    0.217546
	struct Ribosum80_70 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum80_70>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.262329,       -1.895944,       -1.524145,       -1.481838
-1.895944,       1.172097,       -2.541031,       -1.12154
-1.524145,       -2.541031,       1.037546,       -1.808747
-1.481838,       -1.12154,       -1.808747,       1.699707
                    };
            return _data;
        }
    };
//    H: 0.9252
//    E: -0.2720

// ----------------------------------------------------------------------------
// Ribosum80_70N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum80_70N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum80_70N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.262329,       -1.895944,       -1.524145,       -1.481838,       -2.541031
-1.895944,       1.172097,       -2.541031,       -1.12154,       -2.541031
-1.524145,       -2.541031,       1.037546,       -1.808747,       -2.541031
-1.481838,       -1.12154,       -1.808747,       1.699707,       -2.541031
-2.541031,       -2.541031,       -2.541031,       -2.541031,       -2.541031
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum80_70d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum80_70d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum80_70d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.420787,       -7.362206,       -8.566139,       -4.240807,       -10.179466,       -14.762892,       -4.897783,       -12.564175,       -6.381157,       -5.237142,       -8.46524,       -5.362397,       -4.419746,       -12.3752,       -7.560481,       -6.982944
-7.362206,       -1.787599,       -10.038992,       -1.806986,       -8.821177,       -9.9339,       -6.471481,       -9.815214,       -11.803766,       -4.103912,       -11.561322,       -5.127572,       -5.234713,       -8.444198,       -7.376528,       -6.937692
-8.566139,       -10.038992,       -0.88892,       -6.089926,       -10.364743,       -17.936748,       -4.463168,       -10.153611,       -9.160767,       -6.257779,       -4.996157,       -6.880832,       -5.588719,       -8.145666,       -5.804056,       -11.032962
-4.240807,       -1.806986,       -6.089926,       4.545732,       -5.751117,       -7.140695,       1.581681,       -5.324189,       -5.381405,       2.64441,       -5.948386,       0.660272,       1.50268,       -4.669367,       -0.549971,       -2.67408
-10.179466,       -8.821177,       -10.364743,       -5.751117,       -4.707286,       -13.270641,       -3.468655,       -8.899426,       -7.046761,       -6.516246,       -12.303573,       -7.525053,       -2.417053,       -6.703942,       -5.475611,       -8.115265
-14.762892,       -9.9339,       -17.936748,       -7.140695,       -13.270641,       -3.312067,       -5.94754,       -5.939364,       -11.871201,       -3.525893,       -12.201175,       -8.6306,       -7.26781,       -6.636737,       -8.644358,       -4.657429
-4.897783,       -6.471481,       -4.463168,       1.581681,       -3.468655,       -5.94754,       5.367978,       -4.742348,       -6.017155,       1.944474,       -4.610309,       -0.317015,       2.676267,       -5.06906,       1.314146,       -3.905756
-12.564175,       -9.815214,       -10.153611,       -5.324189,       -8.899426,       -5.939364,       -4.742348,       -2.331785,       -6.767644,       -6.765991,       -13.523385,       -5.687496,       -4.425848,       -3.99553,       -6.998041,       -4.930917
-6.381157,       -11.803766,       -9.160767,       -5.381405,       -7.046761,       -11.871201,       -6.017155,       -6.767644,       -1.037241,       -5.781498,       -7.243181,       -5.859604,       -6.064656,       -6.008772,       -6.886125,       -11.785676
-5.237142,       -4.103912,       -6.257779,       2.64441,       -6.516246,       -3.525893,       1.944474,       -6.765991,       -5.781498,       5.600403,       -4.309724,       1.17327,       1.490335,       -4.961531,       -0.065839,       -3.85982
-8.46524,       -11.561322,       -4.996157,       -5.948386,       -12.303573,       -12.201175,       -4.610309,       -13.523385,       -7.243181,       -4.309724,       -2.054826,       -5.544274,       -5.790258,       -12.137111,       -4.35971,       -11.505715
-5.362397,       -5.127572,       -6.880832,       0.660272,       -7.525053,       -8.6306,       -0.317015,       -5.687496,       -5.859604,       1.17327,       -5.544274,       3.478354,       -0.585638,       -5.818228,       -2.021518,       -4.948862
-4.419746,       -5.234713,       -5.588719,       1.50268,       -2.417053,       -7.26781,       2.676267,       -4.425848,       -6.064656,       1.490335,       -5.790258,       -0.585638,       5.021989,       -3.226963,       1.138967,       -3.298085
-12.3752,       -8.444198,       -8.145666,       -4.669367,       -6.703942,       -6.636737,       -5.06906,       -3.99553,       -6.008772,       -4.961531,       -12.137111,       -5.818228,       -3.226963,       -3.346832,       -5.226122,       -5.749574
-7.560481,       -7.376528,       -5.804056,       -0.549971,       -5.475611,       -8.644358,       1.314146,       -6.998041,       -6.886125,       -0.065839,       -4.35971,       -2.021518,       1.138967,       -5.226122,       3.387026,       -4.267928
-6.982944,       -6.937692,       -11.032962,       -2.67408,       -8.115265,       -4.657429,       -3.905756,       -4.930917,       -11.785676,       -3.85982,       -11.505715,       -4.948862,       -3.298085,       -5.749574,       -4.267928,       0.116156
                    };
            return _data;
        }
    };
//    H: 3.7942
//    E: -2.8234


// ----------------------------------------------------------------------------
// Ribosum65_50 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.275842    0.206343    0.281149    0.236666
	struct Ribosum65_50 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum65_50>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.710118,       -1.07868,       -0.734873,       -0.738458
-1.07868,       0.964404,       -1.71774,       -0.465116
-0.734873,       -1.71774,       0.88313,       -0.99005
-0.738458,       -0.465116,       -0.99005,       1.144237
                    };
            return _data;
        }
    };
//    H: 0.4320
//    E: -0.0498

// ----------------------------------------------------------------------------
// Ribosum65_50N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum65_50N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum65_50N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.710118,       -1.07868,       -0.734873,       -0.738458,       -1.71774
-1.07868,       0.964404,       -1.71774,       -0.465116,       -1.71774
-0.734873,       -1.71774,       0.88313,       -0.99005,       -1.71774
-0.738458,       -0.465116,       -0.99005,       1.144237,       -1.71774
-1.71774,       -1.71774,       -1.71774,       -1.71774,       -1.71774
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum65_50d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum65_50d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum65_50d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-3.18054,       -5.357743,       -10.173926,       -4.521687,       -11.124616,       -11.460909,       -4.238752,       -12.164373,       -8.253531,       -5.644574,       -11.184779,       -5.223116,       -4.114123,       -12.461439,       -4.901403,       -9.931973
-5.357743,       -1.754566,       -10.498259,       -1.842787,       -11.04485,       -9.549743,       -5.224436,       -9.599831,       -8.888824,       -3.239838,       -9.667637,       -5.299299,       -4.151351,       -9.416477,       -5.47466,       -7.753977
-10.173926,       -10.498259,       -2.044898,       -4.726172,       -11.341056,       -13.873792,       -2.043173,       -11.02479,       -7.944534,       -5.05667,       -4.417496,       -7.830613,       -2.757972,       -10.057653,       -5.898304,       -11.379895
-4.521687,       -1.842787,       -4.726172,       4.033686,       -5.38684,       -2.646548,       2.142599,       -4.017983,       -3.695868,       3.264041,       -4.821614,       1.009311,       1.973542,       -4.284345,       -0.203331,       -3.297875
-11.124616,       -11.04485,       -11.341056,       -5.38684,       -6.129024,       -7.836263,       -3.119668,       -7.84656,       -8.817901,       -3.935245,       -10.231665,       -5.954921,       -2.8769,       -7.594883,       -6.372572,       -9.463096
-11.460909,       -9.549743,       -13.873792,       -2.646548,       -7.836263,       -2.971586,       -3.036653,       -4.73822,       -10.738382,       -2.420082,       -10.479507,       -4.649439,       -3.254206,       -6.973582,       -4.875999,       -4.123333
-4.238752,       -5.224436,       -2.043173,       2.142599,       -3.119668,       -3.036653,       5.349334,       -4.421978,       -4.221918,       2.775745,       -4.296097,       0.155328,       3.287861,       -4.249536,       1.405084,       -3.367246
-12.164373,       -9.599831,       -11.02479,       -4.017983,       -7.84656,       -4.73822,       -4.421978,       -3.296866,       -8.687125,       -3.472801,       -11.049696,       -4.464257,       -3.122682,       -5.922187,       -5.590421,       -6.188497
-8.253531,       -8.888824,       -7.944534,       -3.695868,       -8.817901,       -10.738382,       -4.221918,       -8.687125,       -2.375042,       -2.776524,       -10.240575,       -5.091208,       -3.632875,       -8.464109,       -8.301155,       -11.832549
-5.644574,       -3.239838,       -5.05667,       3.264041,       -3.935245,       -2.420082,       2.775745,       -3.472801,       -2.776524,       5.660964,       -3.55236,       1.742985,       2.315808,       -4.289252,       0.350018,       -3.014582
-11.184779,       -9.667637,       -4.417496,       -4.821614,       -10.231665,       -10.479507,       -4.296097,       -11.049696,       -10.240575,       -3.55236,       -2.516956,       -4.628169,       -4.985134,       -11.048872,       -3.986459,       -7.697463
-5.223116,       -5.299299,       -7.830613,       1.009311,       -5.954921,       -4.649439,       0.155328,       -4.464257,       -5.091208,       1.742985,       -4.628169,       3.062495,       0.002911,       -5.396679,       -1.728914,       -4.05865
-4.114123,       -4.151351,       -2.757972,       1.973542,       -2.8769,       -3.254206,       3.287861,       -3.122682,       -3.632875,       2.315808,       -4.985134,       0.002911,       4.419529,       -3.265304,       1.198902,       -2.042783
-12.461439,       -9.416477,       -10.057653,       -4.284345,       -7.594883,       -6.973582,       -4.249536,       -5.922187,       -8.464109,       -4.289252,       -11.048872,       -5.396679,       -3.265304,       -5.305117,       -3.186256,       -6.678805
-4.901403,       -5.47466,       -5.898304,       -0.203331,       -6.372572,       -4.875999,       1.405084,       -5.590421,       -8.301155,       0.350018,       -3.986459,       -1.728914,       1.198902,       -3.186256,       2.912126,       -2.930404
-9.931973,       -7.753977,       -11.379895,       -3.297875,       -9.463096,       -4.123333,       -3.367246,       -6.188497,       -11.832549,       -3.014582,       -7.697463,       -4.05865,       -2.042783,       -6.678805,       -2.930404,       -1.165649
                    };
            return _data;
        }
    };
//    H: 3.4004
//    E: -2.5723


// ----------------------------------------------------------------------------
// Ribosum65_95 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.299965    0.183040    0.246914    0.270080
	struct Ribosum65_95 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum65_95>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.13075,       -5.819848,       -5.378686,       -5.088001
-5.819848,       2.066701,       -5.432026,       -4.117041
-5.378686,       -5.432026,       1.726092,       -5.590652
-5.088001,       -4.117041,       -5.590652,       1.736467
                    };
            return _data;
        }
    };
//    H: 1.7949
//    E: -1.4591

// ----------------------------------------------------------------------------
// Ribosum65_95N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum65_95N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum65_95N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.13075,       -5.819848,       -5.378686,       -5.088001,       -5.819848
-5.819848,       2.066701,       -5.432026,       -4.117041,       -5.819848
-5.378686,       -5.432026,       1.726092,       -5.590652,       -5.819848
-5.088001,       -4.117041,       -5.590652,       1.736467,       -5.819848
-5.819848,       -5.819848,       -5.819848,       -5.819848,       -5.819848
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum65_95d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum65_95d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum65_95d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.174017,       -8.519549,       -9.160408,       -8.470792,       -999.0,       -999.0,       -11.841078,       -13.070674,       -8.576486,       -8.86872,       -10.231475,       -12.238913,       -9.268194,       -999.0,       -11.209462,       -999.0
-8.519549,       0.10035,       -10.234569,       -5.729054,       -14.509442,       -9.202793,       -11.863813,       -999.0,       -999.0,       -2.482316,       -11.66051,       -9.104708,       -12.408395,       -8.886889,       -11.619964,       -12.597339
-9.160408,       -10.234569,       -0.918478,       -8.474128,       -12.133941,       -999.0,       -6.839179,       -999.0,       -10.234536,       -10.51037,       -9.549108,       -12.704102,       -8.761526,       -11.982534,       -8.736254,       -13.986278
-8.470792,       -5.729054,       -8.474128,       4.937545,       -10.920534,       -12.304587,       -3.911,       -7.306265,       -13.917566,       -1.849683,       -9.461797,       -2.31174,       -3.765782,       -9.022621,       -6.270983,       -6.641587
-999.0,       -14.509442,       -12.133941,       -10.920534,       -1.521677,       -9.973973,       -4.958769,       -12.91101,       -13.494271,       -11.223546,       -10.066501,       -13.204926,       -5.661619,       -10.036107,       -9.675844,       -12.334305
-999.0,       -9.202793,       -999.0,       -12.304587,       -9.973973,       0.440424,       -6.123599,       -5.549119,       -12.643694,       -3.388243,       -14.745023,       -10.733704,       -9.817975,       -9.822566,       -11.387301,       -999.0
-11.841078,       -11.863813,       -6.839179,       -3.911,       -4.958769,       -6.123599,       6.579534,       -6.128046,       -9.666047,       -2.601524,       -6.22238,       -4.818916,       -1.862382,       -9.431756,       -1.123909,       -8.910807
-13.070674,       -999.0,       -999.0,       -7.306265,       -12.91101,       -5.549119,       -6.128046,       -1.077799,       -12.204926,       -6.374344,       -13.509103,       -7.896493,       -9.777592,       -9.761482,       -9.356568,       -8.802508
-8.576486,       -999.0,       -10.234536,       -13.917566,       -13.494271,       -12.643694,       -9.666047,       -12.204926,       -0.837481,       -7.009857,       -10.112044,       -7.339886,       -7.121093,       -999.0,       -11.670048,       -999.0
-8.86872,       -2.482316,       -10.51037,       -1.849683,       -11.223546,       -3.388243,       -2.601524,       -6.374344,       -7.009857,       6.69394,       -3.503482,       -1.137849,       -4.270325,       -5.368607,       -4.738421,       -8.501243
-10.231475,       -11.66051,       -9.549108,       -9.461797,       -10.066501,       -14.745023,       -6.22238,       -13.509103,       -10.112044,       -3.503482,       -0.619697,       -6.742871,       -16.018896,       -999.0,       -6.296374,       -15.070336
-12.238913,       -9.104708,       -12.704102,       -2.31174,       -13.204926,       -10.733704,       -4.818916,       -7.896493,       -7.339886,       -1.137849,       -6.742871,       3.886428,       -6.524925,       -10.938042,       -6.740344,       -8.322952
-9.268194,       -12.408395,       -8.761526,       -3.765782,       -5.661619,       -9.817975,       -1.862382,       -9.777592,       -7.121093,       -4.270325,       -16.018896,       -6.524925,       5.043223,       -5.551316,       -2.830494,       -6.205306
-999.0,       -8.886889,       -11.982534,       -9.022621,       -10.036107,       -9.822566,       -9.431756,       -9.761482,       -999.0,       -5.368607,       -999.0,       -10.938042,       -5.551316,       -0.258326,       -6.05039,       -6.40612
-11.209462,       -11.619964,       -8.736254,       -6.270983,       -9.675844,       -11.387301,       -1.123909,       -9.356568,       -11.670048,       -4.738421,       -6.296374,       -6.740344,       -2.830494,       -6.05039,       3.802705,       -8.516906
-999.0,       -12.597339,       -13.986278,       -6.641587,       -12.334305,       -999.0,       -8.910807,       -8.802508,       -999.0,       -8.501243,       -15.070336,       -8.322952,       -6.205306,       -6.40612,       -8.516906,       0.163736
                    };
            return _data;
        }
    };
//    H: 5.2054
//    E: -49.9765


// ----------------------------------------------------------------------------
// Ribosum60_30 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.299603    0.182687    0.250773    0.266937
	struct Ribosum60_30 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum60_30>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.325404,       -0.831565,       -0.470414,       -0.468901
-0.831565,       0.847347,       -1.607744,       -0.257662
-0.470414,       -1.607744,       0.787687,       -0.733561
-0.468901,       -0.257662,       -0.733561,       0.853502
                    };
            return _data;
        }
    };
//    H: 0.2596
//    E: 0.0039

// ----------------------------------------------------------------------------
// Ribosum60_30N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum60_30N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum60_30N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.325404,       -0.831565,       -0.470414,       -0.468901,       -1.607744
-0.831565,       0.847347,       -1.607744,       -0.257662,       -1.607744
-0.470414,       -1.607744,       0.787687,       -0.733561,       -1.607744
-0.468901,       -0.257662,       -0.733561,       0.853502,       -1.607744
-1.607744,       -1.607744,       -1.607744,       -1.607744,       -1.607744
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum60_30d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum60_30d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum60_30d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-5.053707,       -10.379997,       -10.828238,       -3.762507,       -11.996821,       -13.067563,       -4.932908,       -14.136991,       -8.628454,       -4.259497,       -11.150292,       -6.536541,       -3.47105,       -14.155185,       -4.756864,       -11.377984
-10.379997,       -3.340346,       -11.112356,       -2.20952,       -12.060441,       -9.481421,       -3.39891,       -12.052471,       -8.697252,       -1.437458,       -11.110205,       -5.889617,       -4.207435,       -10.075384,       -4.292991,       -10.345406
-10.828238,       -11.112356,       -2.868657,       -6.445313,       -12.180778,       -16.215953,       -2.491096,       -10.929125,       -10.947524,       -6.108533,       -5.31082,       -8.411545,       -2.114465,       -9.555328,       -7.213209,       -11.490898
-3.762507,       -2.20952,       -6.445313,       3.390389,       -5.730351,       -2.513604,       2.763763,       -5.005542,       -5.118708,       3.549657,       -5.642216,       0.886905,       2.028201,       -4.734387,       0.189527,       -3.538644
-11.996821,       -12.060441,       -12.180778,       -5.730351,       -7.427789,       -12.732096,       -3.312037,       -9.811084,       -9.279019,       -5.409784,       -12.332448,       -6.819847,       -3.441747,       -9.474093,       -7.430175,       -10.90986
-13.067563,       -9.481421,       -16.215953,       -2.513604,       -12.732096,       -4.007853,       -3.162397,       -7.909345,       -13.936642,       -3.746308,       -12.650286,       -7.505788,       -5.817913,       -10.021465,       -8.995331,       -8.228966
-4.932908,       -3.39891,       -2.491096,       2.763763,       -3.312037,       -3.162397,       5.634431,       -4.559776,       -6.17446,       3.429725,       -4.721431,       1.11081,       3.571324,       -3.862921,       1.503882,       -3.429637
-14.136991,       -12.052471,       -10.929125,       -5.005542,       -9.811084,       -7.909345,       -4.559776,       -4.135166,       -8.688025,       -3.219816,       -10.161461,       -5.343549,       -3.086274,       -6.219042,       -8.060111,       -7.510286
-8.628454,       -8.697252,       -10.947524,       -5.118708,       -9.279019,       -13.936642,       -6.17446,       -8.688025,       -3.165243,       -2.378148,       -10.886322,       -6.267298,       -3.303135,       -8.517141,       -8.637035,       -12.232146
-4.259497,       -1.437458,       -6.108533,       3.549657,       -5.409784,       -3.746308,       3.429725,       -3.219816,       -2.378148,       6.005847,       -3.448309,       1.809343,       2.871279,       -2.768648,       0.673665,       -4.05377
-11.150292,       -11.110205,       -5.31082,       -5.642216,       -12.332448,       -12.650286,       -4.721431,       -10.161461,       -10.886322,       -3.448309,       -2.929564,       -5.681162,       -6.283692,       -11.618776,       -5.387934,       -6.632155
-6.536541,       -5.889617,       -8.411545,       0.886905,       -6.819847,       -7.505788,       1.11081,       -5.343549,       -6.267298,       1.809343,       -5.681162,       2.790776,       0.459238,       -4.270808,       -1.539999,       -4.263671
-3.47105,       -4.207435,       -2.114465,       2.028201,       -3.441747,       -5.817913,       3.571324,       -3.086274,       -3.303135,       2.871279,       -6.283692,       0.459238,       3.884234,       -3.000149,       0.830524,       -2.116283
-14.155185,       -10.075384,       -9.555328,       -4.734387,       -9.474093,       -10.021465,       -3.862921,       -6.219042,       -8.517141,       -2.768648,       -11.618776,       -4.270808,       -3.000149,       -5.579995,       -3.199919,       -7.871207
-4.756864,       -4.292991,       -7.213209,       0.189527,       -7.430175,       -8.995331,       1.503882,       -8.060111,       -8.637035,       0.673665,       -5.387934,       -1.539999,       0.830524,       -3.199919,       2.583333,       -3.231506
-11.377984,       -10.345406,       -11.490898,       -3.538644,       -10.90986,       -8.228966,       -3.429637,       -7.510286,       -12.232146,       -4.05377,       -6.632155,       -4.263671,       -2.116283,       -7.871207,       -3.231506,       -2.229628
                    };
            return _data;
        }
    };
//    H: 3.3186
//    E: -2.8719


// ----------------------------------------------------------------------------
// Ribosum60_35 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.298176    0.185019    0.253698    0.263107
	struct Ribosum60_35 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum60_35>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
1.383771,       -0.88414,       -0.504703,       -0.489179
-0.88414,       0.878979,       -1.679552,       -0.300842
-0.504703,       -1.679552,       0.817833,       -0.809913
-0.489179,       -0.300842,       -0.809913,       0.896804
                    };
            return _data;
        }
    };
//    H: 0.2887
//    E: -0.0050

// ----------------------------------------------------------------------------
// Ribosum60_35N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum60_35N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum60_35N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
1.383771,       -0.88414,       -0.504703,       -0.489179,       -1.679552
-0.88414,       0.878979,       -1.679552,       -0.300842,       -1.679552
-0.504703,       -1.679552,       0.817833,       -0.809913,       -1.679552
-0.489179,       -0.300842,       -0.809913,       0.896804,       -1.679552
-1.679552,       -1.679552,       -1.679552,       -1.679552,       -1.679552
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum60_35d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum60_35d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum60_35d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-4.983505,       -10.360222,       -10.781647,       -3.692707,       -11.951812,       -14.951498,       -4.939177,       -14.078016,       -8.581863,       -4.605028,       -11.20356,       -6.576279,       -3.632718,       -14.09621,       -4.697138,       -11.27985
-10.360222,       -3.320531,       -11.090959,       -2.15748,       -12.040625,       -9.486799,       -3.411906,       -12.01869,       -8.675855,       -1.443723,       -11.11242,       -5.855747,       -4.47121,       -10.041602,       -4.257628,       -10.272465
-10.781647,       -11.090959,       -2.845678,       -6.487292,       -12.159381,       -16.219749,       -2.493914,       -10.893762,       -10.924545,       -6.184715,       -5.311454,       -8.393455,       -2.21438,       -9.519965,       -7.18445,       -11.416375
-3.692707,       -2.15748,       -6.487292,       3.464424,       -5.939341,       -2.485041,       2.71113,       -4.953258,       -5.067246,       3.528525,       -5.619999,       0.880124,       2.039545,       -4.669652,       0.124979,       -3.432763
-11.951812,       -12.040625,       -12.159381,       -5.939341,       -7.407974,       -12.737474,       -3.317295,       -9.777302,       -9.257622,       -5.674465,       -12.334663,       -6.833656,       -3.412611,       -9.440311,       -7.394812,       -10.836919
-14.951498,       -9.486799,       -16.219749,       -2.485041,       -12.737474,       -4.038424,       -3.192467,       -7.900757,       -13.940438,       -3.778539,       -12.677694,       -7.533628,       -5.872887,       -10.012876,       -8.985162,       -8.181218
-4.939177,       -3.411906,       -2.493914,       2.71113,       -3.317295,       -3.192467,       5.602974,       -4.553506,       -6.176675,       3.369683,       -4.755728,       1.073424,       3.522479,       -3.853429,       1.483631,       -3.381831
-14.078016,       -12.01869,       -10.893762,       -4.953258,       -9.777302,       -7.900757,       -4.553506,       -4.087418,       -8.652662,       -3.224335,       -10.14971,       -5.296516,       -3.019421,       -6.171294,       -8.018341,       -7.423378
-8.581863,       -8.675855,       -10.924545,       -5.067246,       -9.257622,       -13.940438,       -6.176675,       -8.652662,       -3.142264,       -2.380363,       -10.886955,       -6.234597,       -3.245308,       -8.481778,       -8.637061,       -12.157623
-4.605028,       -1.443723,       -6.184715,       3.528525,       -5.674465,       -3.778539,       3.369683,       -3.224335,       -2.380363,       5.972655,       -3.475318,       1.799125,       2.833486,       -2.761294,       0.670885,       -4.004441
-11.20356,       -11.11242,       -5.311454,       -5.619999,       -12.334663,       -12.677694,       -4.755728,       -10.14971,       -10.886955,       -3.475318,       -2.953809,       -5.66783,       -6.305054,       -11.607025,       -5.374601,       -6.581244
-6.576279,       -5.855747,       -8.393455,       0.880124,       -6.833656,       -7.533628,       1.073424,       -5.296516,       -6.234597,       1.799125,       -5.66783,       2.831804,       0.402872,       -4.223116,       -1.50861,       -4.189365
-3.632718,       -4.47121,       -2.21438,       2.039545,       -3.412611,       -5.872887,       3.522479,       -3.019421,       -3.245308,       2.833486,       -6.305054,       0.402872,       3.943548,       -2.932135,       0.833899,       -2.014605
-14.09621,       -10.041602,       -9.519965,       -4.669652,       -9.440311,       -10.012876,       -3.853429,       -6.171294,       -8.481778,       -2.761294,       -11.607025,       -4.223116,       -2.932135,       -5.532248,       -3.152054,       -7.784299
-4.697138,       -4.257628,       -7.18445,       0.124979,       -7.394812,       -8.985162,       1.483631,       -8.018341,       -8.637061,       0.670885,       -5.374601,       -1.50861,       0.833899,       -3.152054,       2.633796,       -3.14768
-11.27985,       -10.272465,       -11.416375,       -3.432763,       -10.836919,       -8.181218,       -3.381831,       -7.423378,       -12.157623,       -4.004441,       -6.581244,       -4.189365,       -2.014605,       -7.784299,       -3.14768,       -2.103562
                    };
            return _data;
        }
    };
//    H: 3.3318
//    E: -2.8806


// ----------------------------------------------------------------------------
// Ribosum85_95 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.268989    0.209347    0.286102    0.235562
	struct Ribosum85_95 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum85_95>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.419516,       -5.685234,       -5.176288,       -5.176121
-5.685234,       1.773008,       -6.123837,       -4.313895
-5.176288,       -6.123837,       1.462796,       -5.67975
-5.176121,       -4.313895,       -5.67975,       1.975642
                    };
            return _data;
        }
    };
//    H: 1.8639
//    E: -1.5267

// ----------------------------------------------------------------------------
// Ribosum85_95N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum85_95N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum85_95N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.419516,       -5.685234,       -5.176288,       -5.176121,       -6.123837
-5.685234,       1.773008,       -6.123837,       -4.313895,       -6.123837
-5.176288,       -6.123837,       1.462796,       -5.67975,       -6.123837
-5.176121,       -4.313895,       -5.67975,       1.975642,       -6.123837
-6.123837,       -6.123837,       -6.123837,       -6.123837,       -6.123837
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum85_95d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum85_95d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum85_95d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.350318,       -9.957831,       -10.231803,       -7.172284,       -999.0,       -999.0,       -14.387206,       -15.383552,       -8.862587,       -11.065985,       -12.666151,       -12.21001,       -9.18523,       -999.0,       -13.149138,       -999.0
-9.957831,       -0.193872,       -10.784178,       -5.020557,       -14.852244,       -9.031135,       -12.051816,       -999.0,       -999.0,       -5.400023,       -13.728355,       -10.184592,       -11.284258,       -8.854751,       -12.076756,       -10.261373
-10.231803,       -10.784178,       -0.346733,       -8.657186,       -14.856622,       -999.0,       -6.990871,       -999.0,       -11.388625,       -10.886427,       -8.991329,       -11.397452,       -9.53783,       -11.893597,       -8.757547,       -13.229263
-7.172284,       -5.020557,       -8.657186,       5.216773,       -9.302712,       -11.366256,       -4.511393,       -7.540064,       -13.28575,       -2.142855,       -10.071033,       -1.956764,       -4.203671,       -10.014152,       -5.990136,       -6.143723
-999.0,       -14.852244,       -14.856622,       -9.302712,       -1.260246,       -10.80003,       -4.970776,       -8.873848,       -9.34245,       -11.945144,       -10.531121,       -15.887573,       -5.518342,       -12.699973,       -8.788368,       -11.643674
-999.0,       -9.031135,       -999.0,       -11.366256,       -10.80003,       -1.045287,       -7.442538,       -7.62607,       -15.717364,       -5.974127,       -16.632715,       -9.715277,       -9.203645,       -12.698567,       -12.115903,       -999.0
-14.387206,       -12.051816,       -6.990871,       -4.511393,       -4.970776,       -7.442538,       6.023932,       -6.481948,       -9.576193,       -3.835997,       -6.706771,       -5.478582,       -1.793426,       -10.089751,       -1.419138,       -10.39013
-15.383552,       -999.0,       -999.0,       -7.540064,       -8.873848,       -7.62607,       -6.481948,       -0.635194,       -14.887573,       -8.599697,       -16.56152,       -6.833565,       -8.87057,       -9.298369,       -10.915206,       -8.734993
-8.862587,       -999.0,       -11.388625,       -13.28575,       -9.34245,       -15.717364,       -9.576193,       -14.887573,       -0.481432,       -8.002951,       -9.6248,       -8.276656,       -8.743444,       -999.0,       -9.969725,       -999.0
-11.065985,       -5.400023,       -10.886427,       -2.142855,       -11.945144,       -5.974127,       -3.835997,       -8.599697,       -8.002951,       6.152179,       -5.933837,       -1.608839,       -4.620403,       -6.628189,       -5.647168,       -10.051155
-12.666151,       -13.728355,       -8.991329,       -10.071033,       -10.531121,       -16.632715,       -6.706771,       -16.56152,       -9.6248,       -5.933837,       -1.224488,       -7.614058,       -17.555439,       -999.0,       -8.583953,       -17.731729
-12.21001,       -10.184592,       -11.397452,       -1.956764,       -15.887573,       -9.715277,       -5.478582,       -6.833565,       -8.276656,       -1.608839,       -7.614058,       3.970502,       -6.481557,       -13.182,       -7.060003,       -7.038323
-9.18523,       -11.284258,       -9.53783,       -4.203671,       -5.518342,       -9.203645,       -1.793426,       -8.87057,       -8.743444,       -4.620403,       -17.555439,       -6.481557,       5.432679,       -6.559545,       -2.14105,       -6.237854
-999.0,       -8.854751,       -11.893597,       -10.014152,       -12.699973,       -12.698567,       -10.089751,       -9.298369,       -999.0,       -6.628189,       -999.0,       -13.182,       -6.559545,       -0.699894,       -8.656821,       -6.270855
-13.149138,       -12.076756,       -8.757547,       -5.990136,       -8.788368,       -12.115903,       -1.419138,       -10.915206,       -9.969725,       -5.647168,       -8.583953,       -7.060003,       -2.14105,       -8.656821,       4.009479,       -7.394527
-999.0,       -10.261373,       -13.229263,       -6.143723,       -11.643674,       -999.0,       -10.39013,       -8.734993,       -999.0,       -10.051155,       -17.731729,       -7.038323,       -6.237854,       -6.270855,       -7.394527,       0.368472
                    };
            return _data;
        }
    };
//    H: 5.2067
//    E: -47.4619


// ----------------------------------------------------------------------------
// Ribosum95_60 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.257486    0.220353    0.300738    0.221424
	struct Ribosum95_60 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum95_60>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.277641,       -2.055953,       -1.669247,       -1.604949
-2.055953,       1.224739,       -2.648455,       -1.143138
-1.669247,       -2.648455,       1.082047,       -1.922181
-1.604949,       -1.143138,       -1.922181,       1.703162
                    };
            return _data;
        }
    };
//    H: 0.9787
//    E: -0.3049

// ----------------------------------------------------------------------------
// Ribosum95_60N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum95_60N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum95_60N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.277641,       -2.055953,       -1.669247,       -1.604949,       -2.648455
-2.055953,       1.224739,       -2.648455,       -1.143138,       -2.648455
-1.669247,       -2.648455,       1.082047,       -1.922181,       -2.648455
-1.604949,       -1.143138,       -1.922181,       1.703162,       -2.648455
-2.648455,       -2.648455,       -2.648455,       -2.648455,       -2.648455
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum95_60d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum95_60d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum95_60d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.049125,       -8.140916,       -8.564523,       -4.642317,       -9.494304,       -13.963556,       -4.973187,       -11.904117,       -6.445345,       -4.7655,       -9.689188,       -6.211986,       -4.510242,       -11.493558,       -6.168048,       -8.921083
-8.140916,       -1.948338,       -8.970537,       -2.120171,       -9.811402,       -9.164189,       -5.813112,       -10.87169,       -10.132513,       -3.753208,       -11.973868,       -4.960172,       -5.654945,       -8.623064,       -7.297499,       -7.851914
-8.564523,       -8.970537,       -0.672402,       -5.664705,       -10.238004,       -14.36653,       -4.698553,       -9.130974,       -9.332369,       -6.168817,       -5.536181,       -6.875638,       -5.775041,       -8.211192,       -5.718985,       -10.320024
-4.642317,       -2.120171,       -5.664705,       4.59259,       -5.932776,       -6.807882,       1.537726,       -5.450218,       -5.906939,       2.575737,       -5.900785,       0.472475,       1.486974,       -5.260437,       -0.691808,       -3.092774
-9.494304,       -9.811402,       -10.238004,       -5.932776,       -5.492818,       -11.0191,       -3.825067,       -7.700869,       -8.508083,       -6.046656,       -11.49826,       -8.112884,       -2.652865,       -7.179096,       -6.116595,       -8.314537
-13.963556,       -9.164189,       -14.36653,       -6.807882,       -11.0191,       -2.983277,       -5.383445,       -6.327028,       -13.359485,       -4.015446,       -11.826323,       -7.926334,       -7.224958,       -7.911109,       -8.653037,       -5.921825
-4.973187,       -5.813112,       -4.698553,       1.537726,       -3.825067,       -5.383445,       5.422584,       -4.874525,       -6.284798,       1.91471,       -4.579616,       -0.509474,       2.601876,       -4.611381,       1.189661,       -3.778193
-11.904117,       -10.87169,       -9.130974,       -5.450218,       -7.700869,       -6.327028,       -4.874525,       -1.9094,       -7.116699,       -5.925387,       -13.36296,       -5.926554,       -4.405002,       -3.828091,       -7.610977,       -4.630779
-6.445345,       -10.132513,       -9.332369,       -5.906939,       -8.508083,       -13.359485,       -6.284798,       -7.116699,       -0.973617,       -5.12617,       -9.231235,       -6.409237,       -5.992807,       -6.588393,       -7.55523,       -11.698869
-4.7655,       -3.753208,       -6.168817,       2.575737,       -6.046656,       -4.015446,       1.91471,       -5.925387,       -5.12617,       5.651405,       -4.548577,       1.079603,       1.3915,       -4.794123,       -0.21979,       -4.185096
-9.689188,       -11.973868,       -5.536181,       -5.900785,       -11.49826,       -11.826323,       -4.579616,       -13.36296,       -9.231235,       -4.548577,       -2.010217,       -5.732419,       -6.095941,       -11.3777,       -4.191764,       -11.09968
-6.211986,       -4.960172,       -6.875638,       0.472475,       -8.112884,       -7.926334,       -0.509474,       -5.926554,       -6.409237,       1.079603,       -5.732419,       3.543487,       -0.748799,       -5.214749,       -2.188616,       -4.950433
-4.510242,       -5.654945,       -5.775041,       1.486974,       -2.652865,       -7.224958,       2.601876,       -4.405002,       -5.992807,       1.3915,       -6.095941,       -0.748799,       5.039809,       -3.03849,       1.014024,       -3.511747
-11.493558,       -8.623064,       -8.211192,       -5.260437,       -7.179096,       -7.911109,       -4.611381,       -3.828091,       -6.588393,       -4.794123,       -11.3777,       -5.214749,       -3.03849,       -3.23036,       -4.796025,       -5.265323
-6.168048,       -7.297499,       -5.718985,       -0.691808,       -6.116595,       -8.653037,       1.189661,       -7.610977,       -7.55523,       -0.21979,       -4.191764,       -2.188616,       1.014024,       -4.796025,       3.433409,       -4.326561
-8.921083,       -7.851914,       -10.320024,       -3.092774,       -8.314537,       -5.921825,       -3.778193,       -4.630779,       -11.698869,       -4.185096,       -11.09968,       -4.950433,       -3.511747,       -5.265323,       -4.326561,       0.07487
                    };
            return _data;
        }
    };
//    H: 3.8551
//    E: -2.8255


// ----------------------------------------------------------------------------
// Ribosum90_95 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.260805    0.216491    0.289828    0.232877
	struct Ribosum90_95 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum90_95>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.471488,       -5.60453,       -5.068456,       -5.191515
-5.60453,       1.742418,       -5.950362,       -4.145882
-5.068456,       -5.950362,       1.425911,       -5.600523
-5.191515,       -4.145882,       -5.600523,       2.017566
                    };
            return _data;
        }
    };
//    H: 1.8661
//    E: -1.4963

// ----------------------------------------------------------------------------
// Ribosum90_95N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum90_95N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum90_95N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.471488,       -5.60453,       -5.068456,       -5.191515,       -5.950362
-5.60453,       1.742418,       -5.950362,       -4.145882,       -5.950362
-5.068456,       -5.950362,       1.425911,       -5.600523,       -5.950362
-5.191515,       -4.145882,       -5.600523,       2.017566,       -5.950362
-5.950362,       -5.950362,       -5.950362,       -5.950362,       -5.950362
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum90_95d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum90_95d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum90_95d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.057823,       -9.253768,       -9.230676,       -6.770948,       -999.0,       -999.0,       -13.806436,       -15.01327,       -8.67068,       -10.300328,       -12.311963,       -10.53171,       -8.066683,       -999.0,       -10.993636,       -999.0
-9.253768,       -0.140297,       -10.621131,       -4.768189,       -13.915237,       -8.259686,       -11.257411,       -999.0,       -999.0,       -5.18669,       -12.825884,       -9.712941,       -10.549285,       -7.458372,       -10.968503,       -11.369512
-9.230676,       -10.621131,       -0.364608,       -7.794367,       -14.484005,       -999.0,       -6.951632,       -999.0,       -10.812912,       -9.910265,       -9.44225,       -10.548068,       -10.087994,       -11.59061,       -8.864326,       -13.954616
-6.770948,       -4.768189,       -7.794367,       5.265285,       -9.144384,       -12.270866,       -4.04323,       -6.836456,       -14.244741,       -1.921181,       -9.623965,       -2.013801,       -3.833728,       -8.967866,       -5.8347,       -5.80307
-999.0,       -13.915237,       -14.484005,       -9.144384,       -1.29827,       -10.505403,       -4.842784,       -9.49837,       -10.453728,       -11.201906,       -9.64187,       -15.336227,       -4.86275,       -12.422677,       -9.68648,       -12.631558
-999.0,       -8.259686,       -999.0,       -12.270866,       -10.505403,       -0.944121,       -6.494981,       -8.123415,       -15.475269,       -6.017015,       -13.276273,       -10.365878,       -8.969424,       -12.386763,       -13.086063,       -999.0
-13.806436,       -11.257411,       -6.951632,       -4.04323,       -4.842784,       -6.494981,       5.926645,       -6.180075,       -9.216442,       -3.544618,       -6.473142,       -5.479781,       -1.747933,       -9.814853,       -1.358709,       -10.443911
-15.01327,       -999.0,       -999.0,       -6.836456,       -9.49837,       -8.123415,       -6.180075,       -0.503498,       -14.580534,       -7.678179,       -16.317723,       -6.595651,       -9.745024,       -8.999236,       -11.003851,       -7.608229
-8.67068,       -999.0,       -10.812912,       -14.244741,       -10.453728,       -15.475269,       -9.216442,       -14.580534,       -0.467348,       -7.392235,       -8.702184,       -7.232597,       -8.302773,       -999.0,       -10.698225,       -999.0
-10.300328,       -5.18669,       -9.910265,       -1.921181,       -11.201906,       -6.017015,       -3.544618,       -7.678179,       -7.392235,       6.048985,       -6.140231,       -1.646083,       -4.163016,       -5.999692,       -5.090272,       -8.2007
-12.311963,       -12.825884,       -9.44225,       -9.623965,       -9.64187,       -13.276273,       -6.473142,       -16.317723,       -8.702184,       -6.140231,       -1.412192,       -7.945626,       -16.607976,       -999.0,       -8.597967,       -17.422988
-10.53171,       -9.712941,       -10.548068,       -2.013801,       -15.336227,       -10.365878,       -5.479781,       -6.595651,       -7.232597,       -1.646083,       -7.945626,       3.96573,       -5.615886,       -12.683056,       -6.992724,       -7.28055
-8.066683,       -10.549285,       -10.087994,       -3.833728,       -4.86275,       -8.969424,       -1.747933,       -9.745024,       -8.302773,       -4.163016,       -16.607976,       -5.615886,       5.500139,       -6.562226,       -1.967627,       -6.008987
-999.0,       -7.458372,       -11.59061,       -8.967866,       -12.422677,       -12.386763,       -9.814853,       -8.999236,       -999.0,       -5.999692,       -999.0,       -12.683056,       -6.562226,       -1.0118,       -7.674219,       -5.942033
-10.993636,       -10.968503,       -8.864326,       -5.8347,       -9.68648,       -13.086063,       -1.358709,       -11.003851,       -10.698225,       -5.090272,       -8.597967,       -6.992724,       -1.967627,       -7.674219,       4.009382,       -7.500659
-999.0,       -11.369512,       -13.954616,       -5.80307,       -12.631558,       -999.0,       -10.443911,       -7.608229,       -999.0,       -8.2007,       -17.422988,       -7.28055,       -6.008987,       -5.942033,       -7.500659,       0.523184
                    };
            return _data;
        }
    };
//    H: 5.1669
//    E: -46.9770


// ----------------------------------------------------------------------------
// Ribosum90_60 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.258231    0.220515    0.301114    0.220140
	struct Ribosum90_60 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum90_60>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.257063,       -1.976785,       -1.590831,       -1.529605
-1.976785,       1.202271,       -2.582207,       -1.107143
-1.590831,       -2.582207,       1.06567,       -1.861238
-1.529605,       -1.107143,       -1.861238,       1.685611
                    };
            return _data;
        }
    };
//    H: 0.9444
//    E: -0.2845

// ----------------------------------------------------------------------------
// Ribosum90_60N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum90_60N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum90_60N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.257063,       -1.976785,       -1.590831,       -1.529605,       -2.582207
-1.976785,       1.202271,       -2.582207,       -1.107143,       -2.582207
-1.590831,       -2.582207,       1.06567,       -1.861238,       -2.582207
-1.529605,       -1.107143,       -1.861238,       1.685611,       -2.582207
-2.582207,       -2.582207,       -2.582207,       -2.582207,       -2.582207
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum90_60d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum90_60d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum90_60d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-2.180504,       -7.760792,       -8.208174,       -4.44182,       -9.277856,       -13.351302,       -4.783192,       -12.146559,       -6.697184,       -4.766413,       -8.998177,       -5.953554,       -4.300645,       -10.786608,       -6.062633,       -9.134638
-7.760792,       -2.046985,       -9.082678,       -2.114627,       -9.652563,       -9.203822,       -5.875237,       -10.631454,       -9.903595,       -3.735358,       -11.688518,       -4.837446,       -5.56911,       -8.505287,       -7.191024,       -7.729015
-8.208174,       -9.082678,       -0.715592,       -5.363676,       -9.604964,       -14.432787,       -4.55098,       -9.26032,       -9.058524,       -6.020552,       -5.53713,       -6.864765,       -5.654128,       -8.406736,       -5.793716,       -10.751191
-4.44182,       -2.114627,       -5.363676,       4.557574,       -5.916983,       -6.727582,       1.57705,       -5.298597,       -5.807239,       2.607705,       -5.722803,       0.52218,       1.536243,       -5.071524,       -0.6807,       -3.045879
-9.277856,       -9.652563,       -9.604964,       -5.916983,       -5.358956,       -10.987788,       -3.707917,       -7.650892,       -8.338913,       -6.064622,       -11.296222,       -8.129841,       -2.604263,       -6.92807,       -5.995102,       -8.369202
-13.351302,       -9.203822,       -14.432787,       -6.727582,       -10.987788,       -3.160206,       -5.446935,       -6.232452,       -13.044676,       -3.901951,       -12.869988,       -7.675041,       -7.071788,       -7.823906,       -8.530649,       -5.802351
-4.783192,       -5.875237,       -4.55098,       1.57705,       -3.707917,       -5.446935,       5.398935,       -4.816841,       -6.289965,       1.971745,       -4.63148,       -0.41127,       2.667106,       -4.799566,       1.24632,       -3.701958
-12.146559,       -10.631454,       -9.26032,       -5.298597,       -7.650892,       -6.232452,       -4.816841,       -2.000962,       -7.362573,       -5.802466,       -13.778239,       -5.878536,       -4.512246,       -3.860327,       -7.60049,       -4.594216
-6.697184,       -9.903595,       -9.058524,       -5.807239,       -8.338913,       -13.044676,       -6.289965,       -7.362573,       -0.999118,       -5.13948,       -8.927142,       -6.423727,       -5.949,       -6.604824,       -7.719795,       -11.470509
-4.766413,       -3.735358,       -6.020552,       2.607705,       -6.064622,       -3.901951,       1.971745,       -5.802466,       -5.13948,       5.640128,       -4.437469,       1.128439,       1.464531,       -4.632376,       -0.195928,       -4.114406
-8.998177,       -11.688518,       -5.53713,       -5.722803,       -11.296222,       -12.869988,       -4.63148,       -13.778239,       -8.927142,       -4.437469,       -1.987972,       -6.015462,       -5.959561,       -11.410196,       -4.216847,       -11.24766
-5.953554,       -4.837446,       -6.864765,       0.52218,       -8.129841,       -7.675041,       -0.41127,       -5.878536,       -6.423727,       1.128439,       -6.015462,       3.525872,       -0.680927,       -5.425817,       -2.144667,       -4.818073
-4.300645,       -5.56911,       -5.654128,       1.536243,       -2.604263,       -7.071788,       2.667106,       -4.512246,       -5.949,       1.464531,       -5.959561,       -0.680927,       5.022265,       -3.019752,       1.049617,       -3.461258
-10.786608,       -8.505287,       -8.406736,       -5.071524,       -6.92807,       -7.823906,       -4.799566,       -3.860327,       -6.604824,       -4.632376,       -11.410196,       -5.425817,       -3.019752,       -3.244131,       -4.812923,       -5.417053
-6.062633,       -7.191024,       -5.793716,       -0.6807,       -5.995102,       -8.530649,       1.24632,       -7.60049,       -7.719795,       -0.195928,       -4.216847,       -2.144667,       1.049617,       -4.812923,       3.416278,       -4.311774
-9.134638,       -7.729015,       -10.751191,       -3.045879,       -8.369202,       -5.802351,       -3.701958,       -4.594216,       -11.470509,       -4.114406,       -11.24766,       -4.818073,       -3.461258,       -5.417053,       -4.311774,       0.063099
                    };
            return _data;
        }
    };
//    H: 3.8247
//    E: -2.8016


// ----------------------------------------------------------------------------
// Ribosum95_65 score matrix 
// ----------------------------------------------------------------------------

//      A           C           G           U
//      0.258037    0.219511    0.300165    0.222288
	struct Ribosum95_65 {};
    template <>
    struct ScoringMatrixData_<double, Rna, Ribosum95_65>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U
2.287041,       -2.128932,       -1.725609,       -1.676047
-2.128932,       1.24784,       -2.741396,       -1.180593
-1.725609,       -2.741396,       1.100515,       -1.981781
-1.676047,       -1.180593,       -1.981781,       1.715053
                    };
            return _data;
        }
    };
//    H: 1.0089
//    E: -0.3245

// ----------------------------------------------------------------------------
// Ribosum95_65N score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum95_65N {};
    template <>
    struct ScoringMatrixData_<double, Rna5, Ribosum95_65N>
    {
        enum
        {
            VALUE_SIZE = ValueSize<Rna5>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      A           C           G           U           N
2.287041,       -2.128932,       -1.725609,       -1.676047,       -2.741396
-2.128932,       1.24784,       -2.741396,       -1.180593,       -2.741396
-1.725609,       -2.741396,       1.100515,       -1.981781,       -2.741396
-1.676047,       -1.180593,       -1.981781,       1.715053,       -2.741396
-2.741396,       -2.741396,       -2.741396,       -2.741396,       -2.741396
                    };
            return _data;
        }
    };

// ----------------------------------------------------------------------------
// Ribosum95_65d score matrix 
// ----------------------------------------------------------------------------

    struct Ribosum95_65d {};
    template <>
    struct ScoringMatrixData_<double, Iupac, Ribosum95_65d>   //TODO Finite(char,SIZE_BLOS_D)  instead of Iupac type
    {
        enum
        {
            VALUE_SIZE = ValueSize<Iupac>::VALUE,
            TAB_SIZE = VALUE_SIZE * VALUE_SIZE
        };
        static inline double const * getData()
        {
            static double const _data[TAB_SIZE] =
                    {
//                      AA          AC          AG          AU          CA          CC          CG          CU          GA          GC          GG          GU          UA          UC          UG          UU
-1.996203,       -8.509181,       -8.538128,       -4.636643,       -9.765752,       -13.993348,       -5.083244,       -11.950357,       -6.367744,       -4.769461,       -9.618031,       -6.2512,       -4.5767,       -11.443597,       -6.268756,       -8.890013
-8.509181,       -1.932534,       -8.964844,       -2.115515,       -9.771878,       -9.283184,       -5.888226,       -10.916934,       -10.1837,       -3.755886,       -12.183723,       -5.754018,       -5.798289,       -8.61141,       -7.49277,       -7.842956
-8.538128,       -8.964844,       -0.64151,       -5.755007,       -10.25136,       -14.576912,       -4.795707,       -9.052588,       -9.603078,       -6.264078,       -5.533864,       -6.915744,       -6.486202,       -8.129102,       -5.686124,       -10.304754
-4.636643,       -2.115515,       -5.755007,       4.610288,       -5.967468,       -7.009503,       1.467121,       -5.577459,       -6.081915,       2.547338,       -5.927983,       0.450907,       1.448752,       -5.28428,       -0.730925,       -3.125287
-9.765752,       -9.771878,       -10.25136,       -5.967468,       -5.449118,       -11.407604,       -3.848759,       -7.624843,       -8.506143,       -6.227744,       -11.962045,       -8.3482,       -2.622564,       -7.149543,       -6.165822,       -8.296317
-13.993348,       -9.283184,       -14.576912,       -7.009503,       -11.407604,       -2.887442,       -5.490706,       -6.39794,       -13.498903,       -4.04761,       -11.780969,       -8.132233,       -7.447429,       -7.867216,       -8.814458,       -5.98161
-5.083244,       -5.888226,       -4.795707,       1.467121,       -3.848759,       -5.490706,       5.456406,       -4.831712,       -6.394216,       1.797221,       -4.571803,       -0.609862,       2.569559,       -4.57089,       1.16358,       -4.002071
-11.950357,       -10.916934,       -9.052588,       -5.577459,       -7.624843,       -6.39794,       -4.831712,       -1.835055,       -7.071963,       -5.965612,       -13.36595,       -6.402741,       -4.389211,       -3.806068,       -7.761653,       -4.583161
-6.367744,       -10.1837,       -9.603078,       -6.081915,       -8.506143,       -13.498903,       -6.394216,       -7.071963,       -0.968197,       -5.354635,       -9.204161,       -6.529824,       -6.045142,       -6.531854,       -7.509686,       -11.830258
-4.769461,       -3.755886,       -6.264078,       2.547338,       -6.227744,       -4.04761,       1.797221,       -5.965612,       -5.354635,       5.678843,       -4.657931,       1.015731,       1.310758,       -4.800976,       -0.263943,       -4.290799
-9.618031,       -12.183723,       -5.533864,       -5.927983,       -11.962045,       -11.780969,       -4.571803,       -13.36595,       -9.204161,       -4.657931,       -1.984638,       -5.80773,       -6.167332,       -11.368088,       -4.146665,       -11.073634
-6.2512,       -5.754018,       -6.915744,       0.450907,       -8.3482,       -8.132233,       -0.609862,       -6.402741,       -6.529824,       1.015731,       -5.80773,       3.565527,       -0.79631,       -5.528064,       -2.228649,       -5.03698
-4.5767,       -5.798289,       -6.486202,       1.448752,       -2.622564,       -7.447429,       2.569559,       -4.389211,       -6.045142,       1.310758,       -6.167332,       -0.79631,       5.055064,       -2.99271,       0.984794,       -3.602892
-11.443597,       -8.61141,       -8.129102,       -5.28428,       -7.149543,       -7.867216,       -4.57089,       -3.806068,       -6.531854,       -4.800976,       -11.368088,       -5.528064,       -2.99271,       -3.146625,       -4.908798,       -5.22772
-6.268756,       -7.49277,       -5.686124,       -0.730925,       -6.165822,       -8.814458,       1.16358,       -7.761653,       -7.509686,       -0.263943,       -4.146665,       -2.228649,       0.984794,       -4.908798,       3.447856,       -4.624644
-8.890013,       -7.842956,       -10.304754,       -3.125287,       -8.296317,       -5.98161,       -4.002071,       -4.583161,       -11.830258,       -4.290799,       -11.073634,       -5.03698,       -3.602892,       -5.22772,       -4.624644,       0.127511
                    };
            return _data;
        }
    };
//    H: 3.8956
//    E: -2.8586

}  // namespace seqan
#endif /* SEQAN_INCLUDE_ALIGN_RNA_SCORE_MATRIX_DATA_RNA_H_ */
